<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一篇文章搞懂前端学习方法与构建知识体系</title>
      <link href="/2020/08/07/frontend/frontend-study.html"/>
      <url>/2020/08/07/frontend/frontend-study.html</url>
      
        <content type="html"><![CDATA[<h1 id="前沿"><a href="#前沿" class="headerlink" title="前沿"></a>前沿</h1><p>在大前端的成长路上，很多的同学都非常的迷茫，看到一座座越来越高的山。慢慢在工作中也对自己的职业发展也特别迷茫。有些粉丝也私信我问过我一些职业发展的问题，还有“我应该学习什么技术？”，“学习到什么层级才是个头”。</p><p>这次我给大家带来一遍文章，给大家讲讲怎么样才是一个优秀的前端工程师，怎么做自己的职业规划，如何学习和构建知识体系。</p><p><img src="https://img-blog.csdnimg.cn/20200613135642518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="什么是优秀的前端工程师？"><a href="#什么是优秀的前端工程师？" class="headerlink" title="什么是优秀的前端工程师？"></a>什么是优秀的前端工程师？</h1><p><img src="https://img-blog.csdnimg.cn/20200807133838943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="大家眼中的优秀工程师"><a href="#大家眼中的优秀工程师" class="headerlink" title="大家眼中的优秀工程师"></a>大家眼中的优秀工程师</h2><ul><li>熟练掌握 Vue React</li><li>Web 标准</li><li>会用 Webpack Babel</li><li>十年经验</li><li>性能优化</li><li>闭包，函数式编程</li><li>会写 NodeJS</li></ul><blockquote><p>这些其实都是错误的认知！</p></blockquote><h2 id="真正优秀的工程师"><a href="#真正优秀的工程师" class="headerlink" title="真正优秀的工程师"></a>真正优秀的工程师</h2><p>明确衡量的标准：</p><ul><li>领域知识<ul><li>不同工程师的工种有不一样的领域</li><li>领域知识是互相关联的，不能只一方面很强</li></ul></li><li>能力和潜力<ul><li>能力 —— 明确的能力要求，或者角色的要求，能力达标就能进入下一个级别。</li><li>潜力 —— 能力的上限，同样的层级的人，同样能写出同样的代码，但是区别在于<strong>独立解决问题的能力和出解决方案</strong>。</li><li>每年都有 KPI（30% - 优秀，60% - 普通，10% - 不合格），潜力评估（预计几年内可以晋升）</li></ul></li><li>职业规划<ul><li>工程师 (P5) —— 独立工作</li><li>资深工程师 (P6) —— 核心和骨干，小组长的位置，能带领突破难题</li><li>专家 (P7) —— 领域专家，在某一种领域成型一种权威，推动发展，在自己的领域内可以用通用的解决办法解决问题</li><li>经理 (P8)</li></ul></li><li>如何晋升？<ul><li>持续提升技术能力</li><li>在领域中有沉淀</li></ul></li><li>成就<ul><li>用你达到的成就来证明你的能力</li><li>根据你曾经做过的东西，曾经承担过的事情</li></ul></li></ul><h2 id="职业规划"><a href="#职业规划" class="headerlink" title="职业规划"></a>职业规划</h2><blockquote><p><em> You </em> are the owner of your career.</p></blockquote><ul><li>很多人觉得职业规划是“老板”，“爸妈”，“老师”的事，其实你才是职业的主人</li><li>很多同学在执行的时候就走形了，很多人觉得职业晋升是老板的意识，如果老板没有给我们晋升我们就认命了吗？</li><li>不是的，你的职业你才是主人，职业发现的结果我们要为他负责，所以我们要有行动（要不就谈判，要不就离职等等）</li><li>职业规划对我们自己影响是最大的，所以我们要有一个 owner 的态度，拿出一个方案来保障自己的结果</li><li>明确知道自己在这个公司什么时间，要达到什么样一个级别，如果不能就要思考怎么做到</li><li>所以在职场中，要保持一种危机感和紧迫感，如果我们一旦误就会止步不前了</li><li>我们该投入的精力，没有去投入，是没有人可以为你负责的，职业发展也是一样的</li></ul><h2 id="职业发展"><a href="#职业发展" class="headerlink" title="职业发展"></a>职业发展</h2><ul><li><strong>成长</strong> - 通过学习，沉淀获得成长</li><li><strong>成就</strong> - 成长后必定能做出一定的成就，成就可以用来证明自己的技术能力级别</li><li><strong>晋升</strong> - 获得成就就能证明自己可以晋升到下一个级别</li></ul><h3 id="业务型成就"><a href="#业务型成就" class="headerlink" title="业务型成就"></a>业务型成就</h3><ul><li>业务目标<ul><li>理解公司业务的核心目标</li><li>目标转化为指标（UV，PV，页面加载时间，成交的钱）</li></ul></li><li>技术方案<ul><li>业务指标到技术指标的转化</li><li>形成纸面方案、完成小规模试验</li></ul></li><li>实施方案<ul><li>确定实施目标、参与人</li><li>管理实施进度</li></ul></li><li>结果评估<ul><li>数据采集、数据报表</li><li>向上级汇报</li><li>没有结果是不可能获得晋升的，只会落得一个“勤奋耐劳”的称号</li></ul></li></ul><p><strong>案例</strong>：</p><ul><li>业务目标 &amp; 指标：点击率</li><li>技术方案：给 tab 组件增加手势操作</li><li>实施 1：在业务中加入对应功能，并上线</li><li>结果：点击率提升 3 倍</li><li>实施 2：编写通用 tab 组件，向所有导购业务推广，形成制度</li></ul><h3 id="工程型成就"><a href="#工程型成就" class="headerlink" title="工程型成就"></a>工程型成就</h3><ul><li>目标<ul><li>质量</li><li>效率</li></ul></li><li>方案与实施<ul><li>规章制度</li><li>库</li><li>工具</li><li>系统</li></ul></li><li>结果<ul><li>线上监控</li></ul></li></ul><p>案例——XSS 攻击的预防：</p><ul><li>目标 &amp; 指标：XSS 攻击白帽子反馈漏洞</li><li>技术方案：整理安全手册，review 历史代码，代码扫码工具</li><li>实施：对全体前端宣讲，整体 review 代码，更改代码发布流程</li><li>结果：XSS 漏洞大幅减少</li></ul><h3 id="技术难题"><a href="#技术难题" class="headerlink" title="技术难题"></a>技术难题</h3><ul><li>目标<ul><li>公认的技术难题</li><li>能影响业务</li></ul></li><li>方案与实施<ul><li>依靠扎实的编程能力</li></ul></li></ul><p>例子——爬取商品价格：</p><ul><li>背景：在某浏览器插件项目中，需要爬取各个网站价格比价，但是各个网站会采用图片价格等手段防御</li><li>方案：引入 JS 端的数字识别技术，靠 AI 技术解决</li></ul><p><img src="https://img-blog.csdnimg.cn/20200613135642518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="前端与学习方法"><a href="#前端与学习方法" class="headerlink" title="前端与学习方法"></a>前端与学习方法</h1><p><img src="https://img-blog.csdnimg.cn/20200807134003705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><blockquote><p>对学习知识体系的态度，应该不要去强求，而是去理解知识体系的完整性和框架，多面，多维度，多方面的去累积来补足，补全自己的知识体系。</p></blockquote><ul><li>很多同学在质问学习的东西有没有用</li><li>很多知识其实是没有用的，但是有一些微小的点可能会用上</li><li>但是没有办法确切去知道它的有效性</li><li>我们要知道完整的知识体系，然后抽取重要的知识点进行加固</li><li>重点在于每一个知识点，看到就学一下，学不会不要紧，下次再看到时就加固学习（强扭的瓜不甜）</li><li>系统化学习 + 随机性学习的结合</li></ul><h2 id="前端技能模型"><a href="#前端技能模型" class="headerlink" title="前端技能模型"></a>前端技能模型</h2><ul><li>领域知识<ul><li>不同的领域会学到不一样的知识</li><li>实践中学习</li></ul></li><li>前端知识<ul><li>建立知识体系</li><li>对知识体系掌握度是重点，而不是对知识体系的量级</li></ul></li><li>能力 —— 刻意练习<ul><li>编程能力</li><li>架构能力</li><li>工程能力</li></ul></li></ul><blockquote><p>前端技术不是武林秘籍，</p><p>真正的能力是练出来的。</p></blockquote><h2 id="学习法"><a href="#学习法" class="headerlink" title="学习法"></a>学习法</h2><h3 id="1-整理法"><a href="#1-整理法" class="headerlink" title="1. 整理法"></a>1. 整理法</h3><blockquote><p>我们要追求的是一个完备性，而不是追求完整或者完美性。而我们重点是选择对的逻辑关系</p></blockquote><ul><li>顺序关系<ul><li>记录一个体系的流程顺序关系</li></ul></li><li>组合关系</li><li>纬度关系<ul><li>每一个维度单独看都是完整的东西</li><li>多个维度去看是一个立体完整的东西</li></ul></li><li>分类关系<ul><li>按分类列出知识</li></ul></li></ul><p><strong>整理方式</strong>：</p><ol><li>先找线索，通过搜索，看手册，看文章搜集。<strong>先找到方向</strong>！</li><li>找到多份资料</li><li>进行对比，加强完整性</li></ol><h3 id="2-追溯法"><a href="#2-追溯法" class="headerlink" title="2. 追溯法"></a>2. 追溯法</h3><ul><li><strong>源头</strong> —— 从源头开始建立知识基础，提升可信度<ul><li>最早出现的论文、杂志</li><li>最初的实现案例</li></ul></li><li><strong>标准和文档</strong> —— 找权威性，但是不能盲目的看，要做好对比，保证准确性<ul><li>W3.org</li><li>Developer.mozilla.org</li><li>msdn.microsoft.com</li><li>Developer.apple.com</li></ul></li><li><strong>大师</strong> —— 可以去看他们对技术的定义，公信力更高<ul><li>Tim Berners-Lee</li><li>Brendan Eich</li><li>Bjarne Stoustrup</li></ul></li></ul><blockquote><p>通过这些方法建立知识基础，可以建立我们知识的准确性，可信度，公信力。同时在面试的时候可以提出你在那个权威的地方看到这个知识，也可以体现出你的专研和深挖能力。<br><br/></p><p>通过时间的的延伸，知识会不停的演变和被不同的人重新定义，所以我们要知道并对这个知识点有全面认知，从而在不同的领域或者场景下更加能抽丝破茧的方式去理解复杂，繁杂的知识。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200613135642518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="面试官怎么想？"><a href="#面试官怎么想？" class="headerlink" title="面试官怎么想？"></a>面试官怎么想？</h1><h3 id="面试内容三要素"><a href="#面试内容三要素" class="headerlink" title="面试内容三要素"></a>面试内容三要素</h3><ul><li>深度范围</li><li>覆盖面</li><li>区分度</li></ul><h3 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h3><ul><li>打断<ul><li>打断意味着不感兴趣</li><li>打断是一种提示</li><li>如果面试官不要你，直接就让你说，然后叫你走就好了</li></ul></li><li>争论<ul><li>争论与压力面试 —— 保持自己优雅仪表和态度</li><li>争论的技巧 —— 用追溯法找到可信度高来表达</li></ul></li><li>难题<ul><li>展现分析过程 —— 一边想一边说</li><li>缩小规模 —— 化繁为简，把问题拆解</li></ul></li></ul><h3 id="问题类型"><a href="#问题类型" class="headerlink" title="问题类型"></a>问题类型</h3><ul><li>项目型<ul><li>针对项目询问</li><li>项目中实现了什么？</li><li>遇到了什么难题，又是怎么解决的？</li><li>主要考量我们在项目中体现出来的能力和思维</li></ul></li><li>知识型<ul><li>体现自己的知识体系</li><li>会就会，不会就不会</li></ul></li><li>开放性问题<ul><li>通常是没有标准答案的问题</li><li>设计方案的能力</li><li>思维活跃程度</li><li>管理型问题</li></ul></li><li>案例性问题<ul><li>设计、编程类</li><li>给予场景并且给出解决方案</li><li>用来考验我们平时的工作状态</li><li>看的是过程不是结果（结果答的是正确的，过程不一定是对的，想看的就是你平时的工作状态，遇到问题时的状态）</li></ul></li><li>有趣的问题<ul><li>一般到达这个问题，基本面试已经过了</li><li>关键不是你答什么，重点是体现自己思维的活跃度</li><li>不一定要给到完美答案</li></ul></li></ul><h1 id="知识体系"><a href="#知识体系" class="headerlink" title="知识体系"></a>知识体系</h1><blockquote><p>建立自己的知识体系，确保自己体系的完整性。在学习的过程中可以补充这个体系，达到很高的完美性。而且是可以在自己的心里有这么一个完整的知识体系，而不只是在我们电脑放着就好。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200807133229930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20200613135642518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h1><p><img src="https://img-blog.csdnimg.cn/20200807134158637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><ul><li><strong>职业规划，我不知道往哪里去？</strong><ul><li>每个人目标不一样</li><li>有人可能喜欢深挖一个技术，有些人就想做一个伟大的项目</li><li>所以你要去哪里取决于你的人生目标是什么</li><li>但是没有什么选择是错的，重点是你想做什么，就找到能做你能做到的地方</li></ul></li><li><strong>大厂会不会对 5-6 年工作经验有顾虑</strong><ul><li>大厂对工作年龄不稳定</li><li>但是如果你的工龄与你的能力不成对比，那肯定是有问题的</li></ul></li><li><strong>在公司学不到东西，怎么办？</strong><ul><li>学不到东西是你自己的问题</li><li>要有 owner 意识，学不到东西就去找东西学</li><li>我们不能把学不到东西推卸给公司或者环境</li></ul></li><li><strong>我年龄大了，还有可能进入大厂？</strong><ul><li>如果你觉得你的年龄无法进入 P6，那就继续提升到更高的级别</li><li>总有一个级别是不在乎年龄的</li><li>不论是年龄还是自己的学历，都不是我们应该关注的点</li><li>更应该关注的是，我们有什么亮点可以让别人忽略我们的缺点</li><li>所以要持续提升自己技术的认知，这些核心竞争力</li><li>不要一直盯着自己不能改变的东西</li></ul></li></ul><blockquote><p>我是<font color="#60AAF8"><b>三钻</b></font>，一个在<font color="#60AAF8"><b>技术银河</b></font>中等你们一起来终身漂泊学习。<br>点赞是力量，关注是认可，评论是关爱！下期再见 👋！</p></blockquote><blockquote><p>公众号《<strong>技术银河</strong>》回复”前端知识体系”，可以获得这个系列文章的<strong>知识脑图</strong>！</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200613135642518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="推荐专栏"><a href="#推荐专栏" class="headerlink" title="推荐专栏"></a>推荐专栏</h1><p>小伙伴们可以<strong>查看或者订阅相关的专栏</strong>，从而集中阅读相关知识的文章哦。</p><ul><li><p>📖 <a href="https://blog.csdn.net/tridiamond6/category_10036942.html" target="_blank" rel="noopener">《数据结构与算法》</a> — 到了如今，如果想成为一个高级开发工程师或者进入大厂，不论岗位是前端、后端还是 AI，算法都是重中之重。也无论我们需要进入的公司的岗位是否最后是做算法工程师，前提面试就需要考算法。</p></li><li><p>📖 <a href="https://blog.csdn.net/tridiamond6/category_9782493.html" target="_blank" rel="noopener">《FCC 前端集训营》</a> — 根据 FreeCodeCamp 的学习课程，一起深入浅出学习前端。稳固前端知识，一起在 FreeCodeCamp 获得证书</p></li><li><p>📖 <a href="https://blog.csdn.net/tridiamond6/category_9782493.html" target="_blank" rel="noopener">《前端星球》</a> — 以实战为线索，深入浅出前端多维度的知识点。内含有多方面的前端知识文章，带领不懂前端的童鞋一起学习前端，在前端开发路上童鞋一起燃起心中那团火 🔥</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FrontEnd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>44关学习CSS与CSS3基础「二」</title>
      <link href="/2020/07/11/frontend/fcc-css3-basics-2.html"/>
      <url>/2020/07/11/frontend/fcc-css3-basics-2.html</url>
      
        <content type="html"><![CDATA[<h1 id="「前沿」"><a href="#「前沿」" class="headerlink" title="「前沿」"></a>「前沿」</h1><p>我有一段时间没有更新 FCC 前端教程了，这一周就继续写完 CSS 与 CSS3 基础的教程。最近工作和生活都比较繁忙所以文章更新也受到了一定的影响。不过技术文章写作再忙也不会放弃的。我会继续努力坚持着一周一篇文章的进度，继续为大家带来我学习到的知识。让我们一起继续终身学习吧！</p><p>这一篇文章是上一篇《<a href="https://tridiamond.blog.csdn.net/article/details/106048140" target="_blank" rel="noopener">44 关学习 CSS 与 CSS3 基础「一」</a>》的第二部分，一共闯了 44 关。废话少说，让我们一起来闯关吧！</p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第二十三关」使用属性选择器改变元素属性"><a href="#「第二十三关」使用属性选择器改变元素属性" class="headerlink" title="「第二十三关」使用属性选择器改变元素属性"></a>「第二十三关」使用属性选择器改变元素属性</h1><blockquote><p>关卡名：<code>Use Attribute Selectors to Style Elements</code></p></blockquote><h5 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h5><ul><li>之前我们使用了<code>id</code>和<code>class</code>属性选择器给特定的元素改变样式；</li><li>这种方式叫做<code>ID</code>和<code>CLASS</code>选择器；</li><li>除了这两种 CSS 选择器之外，还有其他选择让我们选择一组自定义的元素来改变样式的；</li><li>我们把<strong>CatPhotoApp</strong>拿出来练习其他 CSS 选择器；</li><li>在这个关卡中我们将使用<code>[attr=value]</code>（属性=值）这种属性选择来给我们的 <strong>checkboxes</strong> （复选框）添加样式；</li><li>这个选择器匹配特殊的属性值，然后对这个属性做出样式的改变；</li></ul><p>比如一下例子，所有<code>type</code>属性值为<code>radio</code>的元素加入 <strong>margin</strong>（外边距）做出改变：</p><pre><code class="css">[type=&#39;radio&#39;] {  margin: 20px 0px 20px 0px;}</code></pre><h5 id="过关目标"><a href="#过关目标" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>使用属性选择器，选中所有<code>type</code>属性为复选框的元素；</li><li>并且给与这些元素 <strong>10px</strong> 的顶部外边距和 <strong>15px</strong> 的底部外边距；</li></ul><h5 id="过关条件"><a href="#过关条件" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>type</code>属性选择器必须用来选中所有复选框；</li><li>所有复选框的顶部 margin 必须是 10px；</li><li>所有复选框的底部 margin 必须是 15px；</li></ul><h5 id="学会了什么？"><a href="#学会了什么？" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>使用属性选择器来改变元素的样式；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200706160100722.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第二十四关」绝对与相对单位"><a href="#「第二十四关」绝对与相对单位" class="headerlink" title="「第二十四关」绝对与相对单位"></a>「第二十四关」绝对与相对单位</h1><blockquote><p>关卡名：<code>Understand Absolute versus Relative Units</code></p></blockquote><h5 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h5><ul><li>之前所有的关卡中，我们都是给元素的 margin 和 padding 赋予“<strong>像素（pixels/px）</strong>”单位；</li><li>像素是一个浏览器使用的长度单位，这个单位会告诉浏览器给予一个元素多少大小和空间；</li><li>在 CSS 当中除了 <code>px</code> 单位之外，还可以使用其他可选的单位；</li><li>可用单位主要分为两种 <strong>绝对单位（absolute）</strong> 和 <strong>相对单位（relative）</strong><ul><li>绝对单位有 <code>in</code>（英寸） 和 <code>mm</code> （厘米），绝对长度单位近似于屏幕上的实际测量值，但是根据屏幕的分辨率会有一些差异；</li><li>相对单位有 <code>em</code> 或者 <code>rem</code>, 两者分别都是相对单位，都会根据一个相对的元素转换自己的大小；</li></ul></li></ul><p><strong>那么 <code>em</code> 和 <code>rem</code> 有什么区别呢？</strong></p><blockquote><p>EM 是相对长度，它是相对于当前元素的字体大小，如果当前元素没有设置字体大小就会一直往父级找，然后相对于父级字体大小来转换。</p><p><strong>EM 特性：</strong></p><ol><li>em 的值并不是固定的；</li><li>em 会基层父级元素的字体大小；</li><li>如果父级也是使用了 em 长度单位，那当前元素的 em 换算就会使用父级 em 换算后的结果进行换算。（比如父级使用了 1.2em，换算后是 12px，那当前元素用的 1em 就是 12px，但是我们想要的是 1em = 10px，这种情况用 em 就会出现大小错误。）</li></ol></blockquote><blockquote><p>REM 是 CSS3 新增的一个相对单位，它是 root em 的缩写，顾名思义就是根 em。</p><p><strong>REM 特性：</strong></p><ol><li>它与 EM 不一样的是，因为是”根”em，所以它永远都是相对于 HTML 根元素的字体大小；</li><li>与 EM 相同的就是值并不是固定的，都是相对一个元素的字体大小；</li><li>因为 REM 的特性是相对于 HTML 根元素，所以只要改变根元素的字体大小，就会对所有 REM 单位的元素发生大小变化；</li><li>除了 IE8 及更早版本的浏览器内核，所有浏览器均支持 REM；</li><li>对于不支持的浏览器来说，我们就需要加入一个 px 单位的 font-size 属性，如果浏览器发现无法使用 rem 即会使用 px 单位的 font-size 值；</li><li>这个单位可谓集合相对和绝对单位的优点与一身，所以此单位引起了广泛的使用，特别是在做移动端网页时，用于响应不同手机屏幕大小和分辨率大小；</li></ol></blockquote><p>这些相对单位的使用会在《响应式页面开发》的关卡中详细介绍使用场景。</p><h5 id="过关目标-1"><a href="#过关目标-1" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>给拥有<code>red-box</code>类的元素加入 <code>padding</code> 属性，值为 <code>1.5em</code>；</li></ul><h5 id="过关条件-1"><a href="#过关条件-1" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>red-box</code>类元素必须含有 <code>padding</code> 属性；</li><li><code>red-box</code>类元素的<code>padding</code>属性值必须为<code>1.5em</code>；</li></ul><h5 id="学会了什么？-1"><a href="#学会了什么？-1" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>认识“像素（px）”以外的大小单位；</li><li>认识什么是绝对与相对大小单位，并且分别拥有那些单位可以使用；</li><li>如何使用<code>em</code>，这种相对单位；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-1"><a href="#答案-1" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/202007061718366.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第二十五关」HTML-主体属性样式"><a href="#「第二十五关」HTML-主体属性样式" class="headerlink" title="「第二十五关」HTML 主体属性样式"></a>「第二十五关」HTML 主体属性样式</h1><blockquote><p>关卡名：<code>Style the HTML Body Element</code></p></blockquote><h5 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h5><ul><li>这一关开始，我们重新开始一个页面，并且一起来学习<strong>CSS 继承</strong>；</li><li>首先每一个 HTML 页面都会有一个<code>body</code>元素；</li><li>这一关我们用<code>background-color</code>属性给<code>body</code>元素一个背景颜色为<code>black</code>；</li><li>如果这时页面变成了黑色，证明我们页面中是有<code>body</code>元素的；</li></ul><p>以下例子演示如何给<code>body</code>应用一个黑色背景的代码：</p><pre><code class="css">body {  background-color: black;}</code></pre><h5 id="过关目标-2"><a href="#过关目标-2" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>用 CSS 把页面中<code>body</code>元素的背景色变成黑色；</li><li>从而证明我们页面中拥有一个<code>body</code>元素；</li></ul><h5 id="过关条件-2"><a href="#过关条件-2" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>body</code>元素必须拥有<code>background-color</code>属性，并且值为<code>black</code>；</li><li>CSS 的格式必须合格并且遵循规范写法；</li><li>CSS 的规则写法必须用分号结束；</li></ul><h5 id="学会了什么？-2"><a href="#学会了什么？-2" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>使用背景颜色；</li><li>证明了页面中必定会有一个<code>body</code>元素；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-2"><a href="#答案-2" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200706173011551.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第二十六关」从主体元素中继承样式"><a href="#「第二十六关」从主体元素中继承样式" class="headerlink" title="「第二十六关」从主体元素中继承样式"></a>「第二十六关」从主体元素中继承样式</h1><blockquote><p>关卡名：<code>Inherit Styles from the Body Element</code></p></blockquote><h5 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h5><ul><li>上一关我们证明了每一个 HTML 页面中都必定会有<code>body</code>元素；</li><li>而且<code>body</code>元素也是可以使用 CSS 给它定制样式的；</li></ul><blockquote><p><strong>记住：</strong><code>body</code>元素与其他 HTML 中的元素一样，都是可以使用 CSS 给予样式控制的。不同的就是，<code>body</code>元素中的样式会被 HTML 中其他元素默认继承。意思就是说，任何在 body 中的样式都会携带到其他元素中，如果 body 中给予了背景颜色是黑色，那我们加入一个<code>div</code>元素，默认也是黑色背景。</p></blockquote><h5 id="过关目标-3"><a href="#过关目标-3" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>首先，创建一个<code>h1</code>元素，内容填入文字 “<strong>Hello World</strong>”；</li><li>接下来我们让这个页面下所有元素的文字颜色都改为绿色，要达到这样的效果只需要在<code>body</code>元素中加入<code>color: green</code>即可；</li><li>最后给<code>body</code>元素定义字体为<code>monospace</code>，我们只需要在<code>body</code>样式中加入<code>font-family: monospace</code>属性值即可；</li></ul><h5 id="过关条件-3"><a href="#过关条件-3" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>创建一个<code>h1</code>元素；</li><li><code>h1</code>元素内容是 Hello World；</li><li><code>h1</code>元素有关闭标签；</li><li><code>body</code>元素应该有<code>color</code>属性，并且值为<code>green</code>；</li><li><code>body</code>元素应该有<code>font-family</code>属性，并且值为<code>monospace</code>；</li><li><code>h1</code>元素的字体应该继承<code>body</code>元素的字体定义；</li><li><code>h1</code>元素的字体颜色应该继承<code>body</code>元素的字体颜色；</li></ul><h5 id="学会了什么？-3"><a href="#学会了什么？-3" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>学会继承主体（body）元素的样式；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-3"><a href="#答案-3" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200706174603899.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第二十七关」CSS-样式继承中样式优先级"><a href="#「第二十七关」CSS-样式继承中样式优先级" class="headerlink" title="「第二十七关」CSS 样式继承中样式优先级"></a>「第二十七关」CSS 样式继承中样式优先级</h1><blockquote><p>关卡名：<code>Prioritize One Style Over Another</code></p></blockquote><h5 id="知识点-4"><a href="#知识点-4" class="headerlink" title="知识点"></a>知识点</h5><ul><li>有些时候 HTML 元素会同时存在多个样式，并且产生冲突的可能性；</li><li>举例，我们的<code>h1</code>元素无法同时拥有绿色和粉红色字体颜色的属性；</li><li>让我们来看看，如果我们给一个元素一个类名，并且赋予这个类红粉色的字体颜色；</li><li>这个时候会不会覆盖<code>body</code>元素中的<code>color: green</code>CSS 属性；</li></ul><h5 id="过关目标-4"><a href="#过关目标-4" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>创建一个 CSS 类，名为<code>pink-text</code>；</li><li>然后给<code>pink-text</code>加入字体颜色<code>color: pink</code>；</li><li>把<code>pink-text</code>类赋予<code>h1</code>元素；</li></ul><h5 id="过关条件-4"><a href="#过关条件-4" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>h1</code>元素必须拥有<code>pink-text</code>类；</li><li><code>&lt;style&gt;</code>标签中必须含有<code>pink-text</code>类样式，并且含有改变字体颜色的属性；</li><li><code>h1</code>元素的字体应该是粉红色（pink）；</li></ul><h5 id="学会了什么？-4"><a href="#学会了什么？-4" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>如何在 CSS 样式继承中覆盖<code>body</code>元素的样式；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-4"><a href="#答案-4" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200706235606934.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第二十八关」覆盖后续-CSS-中的样式"><a href="#「第二十八关」覆盖后续-CSS-中的样式" class="headerlink" title="「第二十八关」覆盖后续 CSS 中的样式"></a>「第二十八关」覆盖后续 CSS 中的样式</h1><blockquote><p>关卡名：<code>Override Styles in Subsequent CSS</code></p></blockquote><h5 id="知识点-5"><a href="#知识点-5" class="headerlink" title="知识点"></a>知识点</h5><ul><li>上一关我们用<code>pink-text</code>类覆盖了<code>body</code>元素的 CSS 样式；</li><li>这里证明了 CSS 类会覆盖<code>body</code>元素的 CSS；</li><li>所以下一个问题就是，我们是否可以覆盖<code>pink-text</code>类的样式呢？</li><li>一个 HTML 元素是可以叠加多个 CSS 类的，给一个元素多个 CSS 类只需要在多个类名之间加入空格即可；</li></ul><pre><code class="css">&lt;div class=&quot;class1 class2&quot;&gt;&lt;/div&gt;</code></pre><blockquote><p><strong>注意</strong>：元素中多个 CSS 类的摆放顺序是不会影响 CSS 样式的权重的。真正决定 CSS 样式的权重的是在 CSS 样式表中的顺序，CSS 样式表的样式规则会从上往下写，越是在后面的权重越高。因为<code>.blue-text</code>的样式在<code>.pink-text</code>的后面，所以最后<code>.blue-text</code>的样式会覆盖<code>.pink-text</code>。</p></blockquote><h5 id="过关目标-5"><a href="#过关目标-5" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>创建一个新的 CSS 类名为<code>blue-text</code>，然后赋予这个类蓝色字体样式；</li><li><code>blue-text</code>类在样式表中必须放在<code>pink-text</code>之后；</li><li>在拥有<code>pink-text</code>类的<code>h1</code>元素上叠加<code>blue-text</code>类；</li></ul><h5 id="过关条件-5"><a href="#过关条件-5" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>h1</code>元素中需要有<code>pink-text</code>类；</li><li><code>h1</code>元素中需要有<code>blue-text</code>类；</li><li><code>blue-text</code>和<code>pink-text</code>都需要赋予给<code>h1</code>元素；</li><li><code>h1</code>元素中的字体应该是蓝色的；</li></ul><h5 id="学会了什么？-5"><a href="#学会了什么？-5" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>如何覆盖 CSS 样式，和使用 CSS 权重；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-5"><a href="#答案-5" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200707130528922.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第二十九关」通过使用-ID-属性覆盖类属性样式"><a href="#「第二十九关」通过使用-ID-属性覆盖类属性样式" class="headerlink" title="「第二十九关」通过使用 ID 属性覆盖类属性样式"></a>「第二十九关」通过使用 ID 属性覆盖类属性样式</h1><blockquote><p>关卡名：<code>Override Class Declarations by Styling ID Attributes</code></p></blockquote><h5 id="知识点-6"><a href="#知识点-6" class="headerlink" title="知识点"></a>知识点</h5><ul><li>上一关我们知道了 CSS 样式表是从上到下阅读的，越是后面的权重就越高，就会覆盖前面声明的样式属性；</li><li>所以就算我们在<code>h1</code>元素中，把<code>pink-text</code>放在<code>blue-text</code>的前面，<code>blue-text</code>类中的 CSS 属性权重也是更大，会覆盖<code>pink-text</code>的 CSS 属性；</li><li>但是 CSS 属性权重并不止于此，还有比这个权重更高的；</li><li>这一关我们给<code>h1</code>元素添加一个<code>ID</code>名为<code>orange-text</code>，然后在 CSS 样式表中给这个 ID 橙色字体颜色的样式，从而覆盖掉<code>blue-text</code>类和<code>pink-text</code>类的样式；</li></ul><p>给一个元素加入 ID 属性需要使用以下写法：</p><pre><code class="html">&lt;h1 id=&quot;orange-text&quot;&gt;&lt;/h1&gt;</code></pre><p>在 CSS 样式表中定义 ID 属性需要使用以下写法：</p><pre><code class="css">#brown-text {  color: brown;}</code></pre><h5 id="过关目标-6"><a href="#过关目标-6" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>给<code>h1</code>元素一个 ID 属性，值为<code>orange-text</code>；</li><li>保留<code>blue-text</code>类和<code>pink-text</code>类在<code>h1</code>元素中；</li><li>创建<code>orange-text</code>的 CSS 声明，并且给予<code>color: orange</code>的属性；</li></ul><h5 id="过关条件-6"><a href="#过关条件-6" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>h1</code>元素需要有一个<code>pink-text</code>类；</li><li><code>h1</code>元素需要有一个<code>blue-text</code>类；</li><li><code>h1</code>元素需要有一个<code>orange-text</code>ID；</li><li>必须只有一个<code>h1</code>元素；</li><li><code>orange-text</code>ID 需要声明好 CSS 的属性；</li><li><code>h1</code>元素不应该有任何<code>style</code>属性；</li><li><code>h1</code>元素中的字体应该是橙色的；</li></ul><h5 id="学会了什么？-6"><a href="#学会了什么？-6" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>使用 ID 属性的样式来覆盖类样式；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-6"><a href="#答案-6" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200707195618978.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第三十关」使用行内样式覆盖类样式"><a href="#「第三十关」使用行内样式覆盖类样式" class="headerlink" title="「第三十关」使用行内样式覆盖类样式"></a>「第三十关」使用行内样式覆盖类样式</h1><blockquote><p>关卡名：<code>Override Class Declarations with Inline Styles</code></p></blockquote><h5 id="知识点-7"><a href="#知识点-7" class="headerlink" title="知识点"></a>知识点</h5><ul><li>上一关我们见证了 ID 属性的样式声明在权重中是高于类属性的样式声明；</li><li>就算在 CSS 样式表中是写在最上面的，也会比其他类属性声明的 CSS 属性要大；</li><li>但是还有一个大佬是被所有这些都权重更高的，还记得行内样式吗？就是在元素中定义的<code>style</code>属性；</li></ul><p>不记得行内样式的写法的同学，可以看看以下例子：</p><pre><code class="html">&lt;h1 style=&quot;color: green&quot;&gt;&lt;/h1&gt;</code></pre><h5 id="过关目标-7"><a href="#过关目标-7" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>使用行内样式，让<code>h1</code>元素中的字体变成白色（<code>color: white</code>）；</li><li>保留<code>h1</code>元素中的<code>blue-text</code>类，<code>pink-text</code>类和<code>orange-text</code>ID 属性；</li></ul><h5 id="过关条件-7"><a href="#过关条件-7" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>h1</code>元素需要有一个<code>pink-text</code>类；</li><li><code>h1</code>元素需要有一个<code>blue-text</code>类；</li><li><code>h1</code>元素需要有一个<code>orange-text</code>ID；</li><li><code>h1</code>元素需要有一个<code>style</code>属性；</li><li><code>h1</code>元素中的字体是白色的；</li></ul><h5 id="学会了什么？-7"><a href="#学会了什么？-7" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>使用行内样式覆盖元素的样式；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-7"><a href="#答案-7" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200707201825875.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第三十一关」用-Important-覆盖所有样式"><a href="#「第三十一关」用-Important-覆盖所有样式" class="headerlink" title="「第三十一关」用 Important 覆盖所有样式"></a>「第三十一关」用 Important 覆盖所有样式</h1><blockquote><p>关卡名：<code>Override All Other Styles by using Important</code></p></blockquote><h5 id="知识点-8"><a href="#知识点-8" class="headerlink" title="知识点"></a>知识点</h5><ul><li>在上一个关卡中发现，行内样式是会覆盖所有类型的样式声明；</li><li>但是行内样式并不是最大的，还有最后一个比行内样式权重还要高的；</li><li>对那就是使用<code>!important</code>，顾名思义就是“重要”的意识，也是表达着这个样式有最高优先级；</li><li>在我们使用它之前，先来了解一下为什么我们需要强制覆盖 CSS 样式；</li></ul><blockquote><p><strong>为何要强制覆盖 CSS 样式？又有什么时候需要我们这么做呢？</strong></p><p>在很多情况下，我们需要使用到 CSS 库，甚至是某 UI 框架。因为是使用别的开发者写好的样式，自然就有可能我们些的样式是被原有库或则框架的样式所覆盖了。所以当我们需要保证我们编写的 CSS 拥有最高优先级，并且绝对有效，这个时候我们就可以使用 <code>!important</code>。</p></blockquote><ul><li>让我们回到最初的<code>pink-text</code>类样式声明，一开始我们使用了写在后面的<code>blue-text</code>类覆盖了它的样式；</li><li>接下来是使用了<code>orange-text</code>ID 属性覆盖它；</li><li>最后使用了行内样式覆盖；</li></ul><p><strong>所以样式声明的优先级顺序就是：</strong></p><blockquote><p><strong>CSS 类声明顺序</strong> &lt; <strong>ID 属性样式</strong> &lt; <strong>行内样式</strong></p></blockquote><h5 id="过关目标-8"><a href="#过关目标-8" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>让我们在<code>pink-text</code>类的颜色声明后面加入<code>!important</code>；</li><li>用这个给<code>pink-text</code>类的样式声明得到最大优先级；</li></ul><p>!important 的使用例子：</p><pre><code class="css">.brown-text {  color: brown !important;}</code></pre><h5 id="过关条件-8"><a href="#过关条件-8" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>h1</code>元素需要有一个<code>pink-text</code>类；</li><li><code>h1</code>元素需要有一个<code>blue-text</code>类；</li><li><code>h1</code>元素需要有一个<code>orange-text</code>ID；</li><li><code>h1</code>元素中应该有行内属性为<code>color: white</code>；</li><li><code>pink-text</code>类样式声明中应该有 <code>!important</code>结尾；</li><li><code>h1</code>元素中的字体应该是粉红色；</li></ul><h5 id="学会了什么？-8"><a href="#学会了什么？-8" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>如何使用最高优先级的<code>!important</code>；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-8"><a href="#答案-8" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200707223115633.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第三十二关」使用-Hex-代码指定特定颜色"><a href="#「第三十二关」使用-Hex-代码指定特定颜色" class="headerlink" title="「第三十二关」使用 Hex 代码指定特定颜色"></a>「第三十二关」使用 Hex 代码指定特定颜色</h1><blockquote><p>关卡名：<code>Use Hex Code for Specific Colors</code></p></blockquote><h5 id="知识点-9"><a href="#知识点-9" class="headerlink" title="知识点"></a>知识点</h5><ul><li>你们知道在 CSS 中还有其他方式可以用来指定颜色的吗？</li><li>其中一种方式就是使用 十六进制（Hexadecimal）或者叫 Hex 颜色代码；</li></ul><blockquote><p><strong>什么是十六进制？</strong></p><p>学过计算机的同学应该都知道，通常用小数，或者以 10 为底的数，那就是用数字 0 到 9。十六进制，顾名思义就是用 16 为底的数。也就是说需要使用 16 个不同的符号。符号 0 到 9 用来代表数字中的零到久，然后 A，B，C，D，E，F 就是第十到十五的符号。从 0 到 9，A 到 F 一共就有 16 个符号组成十六进制的代码。</p></blockquote><ul><li>在 CSS 中，我们可以使用 6 个十六进制的数值来代表颜色；</li><li>每两个都是代表着<code>红（R）</code>，<code>绿（G）</code>，<code>蓝（B）</code>三种色系。</li><li>拿<code>#000000</code>的黑色作为例子，如果红，绿，蓝都调到最低，自然就是没有颜色，那就是黑色了；</li><li>可以把这三种颜色当成三个颜色的灯泡，然后十六进制是用来控制他们的亮度，数值越高就越亮，0 为最低，也就是灯会关掉，所以所有<code>#000000</code>就等同于三盏灯都关掉，自然是黑色了。如果三盏灯都调到最亮，那就会是白色了，也就是我们用的<code>#FFFFFF</code>；</li></ul><p>颜色码使用例子如下：</p><pre><code class="css">body {  color: #000000;}</code></pre><h5 id="过关目标-9"><a href="#过关目标-9" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>替换<code>body</code>元素中的<code>black</code>属性值为<code>#000000</code>；</li></ul><h5 id="过关条件-9"><a href="#过关条件-9" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>body</code>元素的背景颜色应该是黑色；</li><li>需要替换<code>black</code>，并且使用 Hex 颜色码；</li></ul><h5 id="学会了什么？-9"><a href="#学会了什么？-9" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>什么是 Hex 颜色码；</li><li>什么是十六进制；</li><li>如何使用 Hex 颜色码；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-9"><a href="#答案-9" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200709203341902.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第三十三关」使用十六进制代码来混合颜色"><a href="#「第三十三关」使用十六进制代码来混合颜色" class="headerlink" title="「第三十三关」使用十六进制代码来混合颜色"></a>「第三十三关」使用十六进制代码来混合颜色</h1><blockquote><p>关卡名：<code>Use Hex Code to Mix Colors</code></p></blockquote><h5 id="知识点-10"><a href="#知识点-10" class="headerlink" title="知识点"></a>知识点</h5><ul><li>我们来回顾一下上一关的知识，Hex 颜色代码中有 6 位十六进制的数值，每两位都是分别代表着<code>红（R）</code>，<code>绿（G）</code>，<code>蓝（B）</code>三种色系；</li><li>我们可以随意调配这三种纯颜色的亮度来混合出超过 1600 万种颜色；</li><li>比如说橙色，就是纯红色，加一点绿色，然后没有蓝色，对应 Hex 颜色码就是<code>#FFA500</code>；</li><li>数值<code>0</code>在 Hex 码中是最低的数值，等同于把这个颜色调到没有为止；</li><li>数值<code>F</code>就是 Hex 码中最大值，等同于把这个颜色调到最亮值；</li></ul><h5 id="过关目标-10"><a href="#过关目标-10" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>转换一下颜色成 Hex 颜色码：</li></ul><table><thead><tr><th>颜色</th><th>Hex 码</th></tr></thead><tbody><tr><td>Dodger Blue</td><td>#1E90FF</td></tr><tr><td>Green</td><td>#00FF00</td></tr><tr><td>Orange</td><td>#FFA500</td></tr><tr><td>Red</td><td>#FF0000</td></tr></tbody></table><h5 id="过关条件-10"><a href="#过关条件-10" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>h1</code>元素的字体<code>I am red!</code>需要是红色；</li><li>红色（Red）字体颜色属性应该使用<code>hex 码</code>替换颜色值<code>red</code>;</li><li><code>h1</code>元素的字体<code>I am green!</code>需要是绿色；</li><li>绿色（Green）字体颜色属性应该使用<code>hex 码</code>替换颜色值<code>green</code>;</li><li><code>h1</code>元素的字体<code>I am dodger blue!</code>需要是宝蓝色；</li><li>宝蓝色（Dodger Blue）字体颜色属性应该使用<code>hex 码</code>替换颜色值<code>dodgerblue</code>;</li><li><code>h1</code>元素的字体<code>I am orange!</code>需要是橙色；</li><li>橙色（Orange）字体颜色属性应该使用<code>hex 码</code>替换颜色值<code>orange</code>;</li></ul><h5 id="学会了什么？-10"><a href="#学会了什么？-10" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>使用 Hex 颜色码替换颜色名词的属性值；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-10"><a href="#答案-10" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200709211924778.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第三十四关」使用-Hex-颜色码缩写"><a href="#「第三十四关」使用-Hex-颜色码缩写" class="headerlink" title="「第三十四关」使用 Hex 颜色码缩写"></a>「第三十四关」使用 Hex 颜色码缩写</h1><blockquote><p>关卡名：<code>Use Abbreviated Hex Code</code></p></blockquote><h5 id="知识点-11"><a href="#知识点-11" class="headerlink" title="知识点"></a>知识点</h5><ul><li>超过 1600 万种颜色码的可能性，让许多人感到不知所措；</li><li>而且很难记住十六进制代码，幸运的是你可以用他们的缩写版；</li><li>比如红色的 Hex 颜色码为 <code>#FF0000</code> 可以被缩写为 <code>#F00</code>，这个缩写版只给红色一个数值，绿色一个数值和蓝色一个数值；</li><li>但是这样的缩写版，就会让我们的颜色总可能数讲到 4000 种；</li><li>就算使用这种缩写版，浏览器会设别 <code>#F00</code> 和 <code>#FF0000</code> 为同一个颜色；</li></ul><h5 id="过关目标-11"><a href="#过关目标-11" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>用以下缩写版的 Hex 颜色码来更换对应的 CSS 类中的颜色值：</li></ul><table><thead><tr><th>颜色</th><th>缩写 Hex 码</th></tr></thead><tbody><tr><td>Cyan</td><td>#0FF</td></tr><tr><td>Green</td><td>#0F0</td></tr><tr><td>Red</td><td>#F00</td></tr><tr><td>Fuchsia</td><td>#F0F</td></tr></tbody></table><h5 id="过关条件-11"><a href="#过关条件-11" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>h1</code>元素的字体<code>I am red!</code>需要是红色；</li><li>红色（Red）字体颜色属性应该使用缩写<code>hex 码</code>替换颜色值<code>#FF0000</code>;</li><li><code>h1</code>元素的字体<code>I am green!</code>需要是绿色；</li><li>绿色（Green）字体颜色属性应该使用缩写<code>hex 码</code>替换颜色值<code>#00FF00</code>;</li><li><code>h1</code>元素的字体<code>I am cyan!</code>需要是宝青色；</li><li>青色（Cyan）字体颜色属性应该使用缩写<code>hex 码</code>替换颜色值<code>#00FFFF</code>;</li><li><code>h1</code>元素的字体<code>I am fuchsia!</code>需要是樱红色；</li><li>樱红色（Fuchsia）字体颜色属性应该使用缩写<code>hex 码</code>替换颜色值<code>#FF00FF</code>;</li></ul><h5 id="学会了什么？-11"><a href="#学会了什么？-11" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>使用缩写版的 Hex 颜色码；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-11"><a href="#答案-11" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/2020071010464869.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第三十五关」使用-RGB-值改变元素颜色"><a href="#「第三十五关」使用-RGB-值改变元素颜色" class="headerlink" title="「第三十五关」使用 RGB 值改变元素颜色"></a>「第三十五关」使用 RGB 值改变元素颜色</h1><blockquote><p>关卡名：<code>Use RGB values to Color Elements</code></p></blockquote><h5 id="知识点-12"><a href="#知识点-12" class="headerlink" title="知识点"></a>知识点</h5><ul><li>除了 Hex 颜色码，还有其他方法可以用来给元素赋予颜色，那就是使用<code>RGB</code>值；</li><li>黑色的 RGB 值是：<code>rgb(0, 0, 0)</code>；</li><li>白色的 RGB 值是：<code>rgb(255, 255, 255)</code>；</li><li>与十六进制一样的原理，都是使用调整<code>红（R）</code>，<code>绿（G）</code>，<code>蓝（B）</code>三种色系的亮度来混合出 1600 万种颜色；</li><li>十六进制使用的是 0-9 和 A-F，而<code>RGB</code>使用的是 0 到 255，如果我们计算一下，其实 16 x 16 就是 256，而计算机都是从 0 开始，所以 $256-1=255$ ；</li><li>所以<code>RGB</code>和十六进制都是拥有一样的颜色种数，并且都是调整三种色系来变换颜色的；</li></ul><p>以下是把背景颜色换成橙色的 CSS 代码：</p><pre><code class="css">body {  background-color: rgb(255, 165, 0);}</code></pre><h5 id="过关目标-12"><a href="#过关目标-12" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>把<code>body</code>元素的背景颜色换成<code>RGB</code>中的黑色值：<code>rgb(0, 0, 0)</code>；</li></ul><h5 id="过关条件-12"><a href="#过关条件-12" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>h1</code>元素的字体<code>I am red!</code>需要是红色；</li><li>红色（Red）字体颜色属性应该使用<code>RGB</code>值替换 Hex 颜色值;</li><li><code>h1</code>元素的字体<code>I am orchid!</code>需要是淡紫色；</li><li>淡紫色（Orchid）字体颜色属性应该使用<code>RGB</code>值替换 Hex 颜色值;</li><li><code>h1</code>元素的字体<code>I am blue!</code>需要是蓝色；</li><li>蓝色（Blue）字体颜色属性应该使用<code>RGB</code>替换 Hex 颜色值;</li><li><code>h1</code>元素的字体<code>I am sienna!</code>需要是赭色；</li><li>赭色（Sienna）字体颜色属性应该使用<code>RGB</code>替换 Hex 颜色值;</li></ul><h5 id="学会了什么？-12"><a href="#学会了什么？-12" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>使用 RGB 值改变元素颜色；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-12"><a href="#答案-12" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200710124638981.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第三十六关」用-RGB-来混合颜色"><a href="#「第三十六关」用-RGB-来混合颜色" class="headerlink" title="「第三十六关」用 RGB 来混合颜色"></a>「第三十六关」用 RGB 来混合颜色</h1><blockquote><p>关卡名：<code>Change the Color of Text</code></p></blockquote><h5 id="知识点-13"><a href="#知识点-13" class="headerlink" title="知识点"></a>知识点</h5><ul><li>与 Hex 颜色代码一样，我们可以用不同的<code>RGB</code>值来混合出各种颜色；</li></ul><h5 id="过关目标-13"><a href="#过关目标-13" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>使用以下<code>RGB</code>值来替换 CSS 中的 Hex 颜色代码：</li></ul><table><thead><tr><th>颜色</th><th>RGB 值</th></tr></thead><tbody><tr><td>Blue</td><td>rgba(0, 0, 255)</td></tr><tr><td>Red</td><td>rgb(255, 0 , 0)</td></tr><tr><td>Orchid</td><td>rgb(218, 112, 214)</td></tr><tr><td>Sienna</td><td>rgb(160, 82, 45)</td></tr></tbody></table><h5 id="过关条件-13"><a href="#过关条件-13" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>h2</code>元素中需要有<code>style</code>属性；</li><li><code>h2</code>元素的<code>color</code>样式属性应该赋予<code>red</code>这个值；</li><li><code>style</code>属性值里的样式属性应该以<code>;</code>符号结束；</li></ul><h5 id="学会了什么？-13"><a href="#学会了什么？-13" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>如何使用<code>RGB</code>混合颜色;</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-13"><a href="#答案-13" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200710160701552.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第三十七关」使用-CSS-变量同时改变多个元素样式"><a href="#「第三十七关」使用-CSS-变量同时改变多个元素样式" class="headerlink" title="「第三十七关」使用 CSS 变量同时改变多个元素样式"></a>「第三十七关」使用 CSS 变量同时改变多个元素样式</h1><blockquote><p>关卡名：<code>Use CSS Variables to change several elements at once</code></p></blockquote><h5 id="知识点-14"><a href="#知识点-14" class="headerlink" title="知识点"></a>知识点</h5><ul><li>CSS 变量是一种通过只改变一个值来一次性改变多个 CSS 样式属性的强大方法；</li><li>遵循下面的目标，看看仅改变三个值来改变多个元素的样式；</li></ul><h5 id="过关目标-14"><a href="#过关目标-14" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>在<code>penguin</code>类中，改变一下内容：<ol><li>改变<code>--penguin-skin</code>的<code>black</code>为<code>gray</code>；</li><li>改变<code>--penguin-belly</code>的<code>gray</code>为<code>white</code>；</li><li>改变<code>--penguin-beak</code>的<code>yellow</code>为<code>orange</code>；</li></ol></li><li>必须在<code>/* Only change code below this line */</code> 和 <code>/* Only change code above this line */</code> 这两个备注之间修改代码；</li></ul><h5 id="过关条件-14"><a href="#过关条件-14" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>penguin</code>类中的<code>--penguin-skin</code>CSS 变量的值改为<code>gray</code>；</li><li><code>penguin</code>类中的<code>--penguin-belly</code>CSS 变量的值改为<code>white</code>；</li><li><code>penguin</code>类中的<code>--penguin-beak</code>CSS 变量的值改为<code>orange</code>；</li></ul><h5 id="学会了什么？-14"><a href="#学会了什么？-14" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>如何使用 CSS 变量批量改变多个元素样式；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-14"><a href="#答案-14" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200710163203200.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第三十八关」创建自定义-CSS-变量"><a href="#「第三十八关」创建自定义-CSS-变量" class="headerlink" title="「第三十八关」创建自定义 CSS 变量"></a>「第三十八关」创建自定义 CSS 变量</h1><blockquote><p>关卡名：<code>Create a custom CSS Variable</code></p></blockquote><h5 id="知识点-15"><a href="#知识点-15" class="headerlink" title="知识点"></a>知识点</h5><ul><li>创建一个 CSS 变量，我们只需要在变量名前面加上两个“横杠（<code>-</code>）”即可；</li><li>编写语法如下：</li></ul><pre><code class="css">--penguin-skin： gray;</code></pre><ul><li>以上代码会创建一个变量，名为<code>--penguin-skin</code>，并且赋予了这个变量的值为<code>gray</code>；</li><li>现在我们就可以在 CSS 样式表中任何的地方使用这个变量；</li></ul><h5 id="过关目标-15"><a href="#过关目标-15" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>在<code>penguin</code>类中，创建一个变量名<code>--penguin-skin</code>；</li><li>并且给予这个变量一个值为<code>gray</code>；</li><li>必须在<code>/* Only change code below this line */</code> 和 <code>/* Only change code above this line */</code> 这两个备注之间编写代码；</li></ul><h5 id="过关条件-15"><a href="#过关条件-15" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>penguin</code>类中需要含有一个<code>--penguin-skin</code>变量，并且变量值为<code>gray</code>；</li></ul><h5 id="学会了什么？-15"><a href="#学会了什么？-15" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>如何编写 CSS 变量；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-15"><a href="#答案-15" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200710164128315.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第三十九关」使用自定义-CSS-变量"><a href="#「第三十九关」使用自定义-CSS-变量" class="headerlink" title="「第三十九关」使用自定义 CSS 变量"></a>「第三十九关」使用自定义 CSS 变量</h1><blockquote><p>关卡名：<code>Use a custom CSS Variable</code></p></blockquote><h5 id="知识点-16"><a href="#知识点-16" class="headerlink" title="知识点"></a>知识点</h5><ul><li>上一关我们创建了一个自定义的 CSS 变量，这一关我们来看看是怎么使用的；</li><li>创建了一个 CSS 变量后，这个变量的名字可以在 CSS 样式属性中使用，只要我们关联这个变量名即可；</li><li>在代码中的关联写法如下：</li></ul><pre><code class="css">background： var(--penguin-skin);</code></pre><ul><li>以上代码改变了<code>background</code>属性的值，这个值我们用了 CSS 变量；</li><li>CSS 的变量的值，就是我们上一关定义的<code>gray</code>，这个值会被关联过来；</li></ul><blockquote><p><strong>注意</strong>：使用的变量名字必须是和定义的变量名<strong>完全一致</strong>，要不就不会生效！</p></blockquote><h5 id="过关目标-16"><a href="#过关目标-16" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>把一下几个 CSS 类中的<code>background</code>属性的值都替换成<code>--penguin-skin</code>CSS 变量：<ol><li>penguin-top;</li><li>penguin-bottom;</li><li>right-hand;</li><li>left-hand;</li></ol></li></ul><h5 id="过关条件-16"><a href="#过关条件-16" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>penguin-top</code>CSS 类中的<code>background</code>属性值需要改为使用<code>--penguin-skin</code>CSS 变量；</li><li><code>penguin-bottom</code>CSS 类中的<code>background</code>属性值需要改为使用<code>--penguin-skin</code>CSS 变量；</li><li><code>right-hand</code>CSS 类中的<code>background</code>属性值需要改为使用<code>--penguin-skin</code>CSS 变量；</li><li><code>left-hand</code>CSS 类中的<code>background</code>属性值需要改为使用<code>--penguin-skin</code>CSS 变量；</li></ul><h5 id="学会了什么？-16"><a href="#学会了什么？-16" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>如何使用自定义 CSS 变量；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-16"><a href="#答案-16" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200710165358878.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第四十关」给-CSS-变量加上回退值"><a href="#「第四十关」给-CSS-变量加上回退值" class="headerlink" title="「第四十关」给 CSS 变量加上回退值"></a>「第四十关」给 CSS 变量加上回退值</h1><blockquote><p>关卡名：<code>Attach a Fallback value to a CSS Variable</code></p></blockquote><h5 id="知识点-17"><a href="#知识点-17" class="headerlink" title="知识点"></a>知识点</h5><ul><li>当我们使用 CSS 变量做为属性的值，我们可以赋予这个变量一个回退值；</li><li>所谓的回退值，就是当这个变量无效或者无法取得值是，就会使用回退的值；</li></ul><blockquote><p><strong>注意</strong>：这个回退值并不是用来提高浏览器兼容的，在 IE 浏览器下回退值也不会生效的。所以这个回退值只是用于当变量无法获取到值时，浏览器有一个可回退的值可用，并且可以保证有效显示。</p></blockquote><p>如下是如何设置回退值的例子：</p><pre><code class="css">background: var(--penguin-skin, black);</code></pre><ul><li>上面的例子中，如果<code>--penguin-skin</code>变量无法获取到值，就会自动回退使用<code>black</code>做为背景颜色属性的值；</li></ul><h5 id="过关目标-17"><a href="#过关目标-17" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>同学们应该都注意到，右边的企鹅的身体部分的颜色不见了；</li><li>这个是因为<code>.penguin-top</code>类和<code>.penguin-bottom</code>类中的背景颜色属性的值中的变量名拼写错误了，所以导致变量无法取到变量所定义的值；</li><li>在不修正这个变量名拼写错误的情况下，我们给<code>.penguin-top</code>类和<code>.penguin-bottom</code>类中的<code>background</code>属性的变量值加上回退颜色：<code>black</code>；</li></ul><h5 id="过关条件-17"><a href="#过关条件-17" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>在<code>penguin-top</code>类中的<code>background</code>属性的变量值加入回退值<code>black</code>；</li><li>在<code>penguin-bottom</code>类中的<code>background</code>属性的变量值加入回退值<code>black</code>；</li></ul><h5 id="学会了什么？-17"><a href="#学会了什么？-17" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>如何给 CSS 变量加上可回退的值；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-17"><a href="#答案-17" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200710192259591.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第四十一关」CSS-变量的浏览器兼容"><a href="#「第四十一关」CSS-变量的浏览器兼容" class="headerlink" title="「第四十一关」CSS 变量的浏览器兼容"></a>「第四十一关」CSS 变量的浏览器兼容</h1><blockquote><p>关卡名：<code>Improve Compatibility with Browser Fallbacks</code></p></blockquote><h5 id="知识点-18"><a href="#知识点-18" class="headerlink" title="知识点"></a>知识点</h5><ul><li>当我们使用 CSS 时，很有可能我们会遇到浏览器兼容问题；</li><li>如果遇到需要兼容不支持 CSS 变量的浏览器时，我们要提供一个回退的属性给浏览器读取；</li><li>当浏览器解析页面上的 CSS 时，它会忽略无法识别的 CSS 属性；</li><li>比如此时我们有一个背景颜色属性值使用了 CSS 变量，Internet Explore（简称 IE）会忽略这个 IE 不支持的背景颜色，因为 IE 不支持使用 CSS 变量。这种情况下 IE 浏览器只会寻找其他它认识的背景属性，如果它找不到就会回退到浏览器默认的背景颜色，当然这样不是我们想要的，并且可能默认的颜色和我们理想的效果有很大的出入；</li><li>按照以上的逻辑，如果我们需要给某一个属性一个兼容的回退值，我们只需要在不兼容的属性上面添加一个可兼容的属性即可；</li><li>这样当浏览器遇到一个属性它无法识别，就会往上找可用的属性，这样就可以做到浏览器兼容了；</li></ul><h5 id="过关目标-18"><a href="#过关目标-18" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>在代码中我们可以看到，在<code>.red-box</code>类样式中的<code>background</code>属性值使用了<code>--red-color</code>CSS 变量；</li><li>我们在这个属性的上方加入<code>background: red</code>，从而兼容其他不支持 CSS 变量的浏览器；</li></ul><h5 id="过关条件-18"><a href="#过关条件-18" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>.red-box</code>类中的<code>background</code>属性上面添加一个<code>background: red</code>的兼容属性；</li></ul><h5 id="学会了什么？-18"><a href="#学会了什么？-18" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>如果做到浏览器兼容；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-18"><a href="#答案-18" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200711101311833.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第四十二关」继承-CSS-变量"><a href="#「第四十二关」继承-CSS-变量" class="headerlink" title="「第四十二关」继承 CSS 变量"></a>「第四十二关」继承 CSS 变量</h1><blockquote><p>关卡名：<code>Inherit CSS Variables</code></p></blockquote><h5 id="知识点-19"><a href="#知识点-19" class="headerlink" title="知识点"></a>知识点</h5><ul><li>当我们创建一个 CSS 变量，我们是可以在创建的 CSS 选择器中使用；</li><li>如果我现在把<code>--penguin-skin</code>变量下载<code>.penguin</code>类选择器中，那就能<code>.penguin</code>中可以调用这个 CSS 变量；</li><li>同时也可以在<code>.penguin</code>的所有子节点中使用，除外都是无法调用的；</li></ul><blockquote><p><strong>那些才是子节点呢？</strong></p><p>比如现在我们有一段这样的 HTML：<br><code>&lt;div class=&quot;foo&quot;&gt;&lt;span class=&quot;bar&quot;/&gt;&lt;/div&gt;</code></p><p>这段 HTML 中<code>bar</code>就是<code>foo</code>的子节点，他们彼此有继承关系。</p></blockquote><ul><li>为了可以良好利用继承关系，CSS 变量一般都会放入<code>:root</code>元素；</li><li><code>:root</code>是一个伪类（pseudo-class）选择器，它会直接匹配 HTML 文档（document）中的根元素，那就是<code>html</code>元素；</li><li>在<code>:root</code>伪类中添加我们的 CSS 变量，遵循继承关系这些变量全局都可以使用了；</li></ul><h5 id="过关目标-19"><a href="#过关目标-19" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>在<code>:root</code>伪类选择器中声明一个<code>--penguin-belly</code>变量，并且给予<code>pink</code>属性值；</li><li>然后我们就可以看到所有使用到这个变量的地方，都会可以继承并且生效；</li></ul><h5 id="过关条件-19"><a href="#过关条件-19" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>--penguin-belly</code>变量需要在<code>:root</code>伪类选择器中声明，并且属性值是<code>pink</code>；</li></ul><h5 id="学会了什么？-19"><a href="#学会了什么？-19" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>如何使用 CSS 继承关系来使用 CSS 变量；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-19"><a href="#答案-19" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200711133923383.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第四十三关」在特定地方改变-CSS-变量"><a href="#「第四十三关」在特定地方改变-CSS-变量" class="headerlink" title="「第四十三关」在特定地方改变 CSS 变量"></a>「第四十三关」在特定地方改变 CSS 变量</h1><blockquote><p>关卡名：<code>Change a variable for a specific area</code></p></blockquote><h5 id="知识点-20"><a href="#知识点-20" class="headerlink" title="知识点"></a>知识点</h5><ul><li>当我们在<code>:root</code>伪类选择器中定义 CSS 变量，整个页面使用到这个变量的地方都会被影响；</li><li>但是如果我们想再某一元素中重新定义这个变量，我们只需要在这个选择器中重新定义即可；</li></ul><h5 id="过关目标-20"><a href="#过关目标-20" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>在<code>penguin</code>类中改变<code>--penguin-belly</code>属性值为<code>white</code>；</li></ul><h5 id="过关条件-20"><a href="#过关条件-20" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>penguin</code>类中加入<code>--penguin-belly</code>属性，并且值赋予<code>white</code>；</li></ul><h5 id="学会了什么？-20"><a href="#学会了什么？-20" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>如何在特定地方改变 CSS 变量值；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-20"><a href="#答案-20" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200711144035565.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第四十四关」使用媒体查询来修改变量值"><a href="#「第四十四关」使用媒体查询来修改变量值" class="headerlink" title="「第四十四关」使用媒体查询来修改变量值"></a>「第四十四关」使用媒体查询来修改变量值</h1><blockquote><p>关卡名：<code>Use a media query to change a variable</code></p></blockquote><h5 id="知识点-21"><a href="#知识点-21" class="headerlink" title="知识点"></a>知识点</h5><ul><li>CSS 变量可以简化媒体查询的使用方式；</li><li>比如当我们屏幕小于或大于媒体查询的范围时，我们可以改变 CSS 变量的值；</li><li>这时候所有使用了这个变量的属性就会跟着改变；</li></ul><h5 id="过关目标-21"><a href="#过关目标-21" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>在<code>:root</code>选择器中的<code>media query</code>内，重新定义<code>--penguin-size</code>的值为<code>200px</code>；</li><li>同时也重新定义<code>--penguin-skin</code>变量的值为<code>black</code>;</li><li>最后改变预览区域的宽度，看看又什么变化；</li></ul><h5 id="过关条件-21"><a href="#过关条件-21" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>:root</code>中需要重新定义<code>--penguin-size</code>的值为<code>200px</code>；</li><li><code>:root</code>中需要重新定义<code>--penguin-skin</code>的值为<code>black</code>；</li></ul><h5 id="学会了什么？-21"><a href="#学会了什么？-21" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>在媒体查询中使用 CSS 变量重定义，从而达到在特定屏幕大小时，变量值发生变化；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-21"><a href="#答案-21" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200711145852830.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「总结」"><a href="#「总结」" class="headerlink" title="「总结」"></a>「总结」</h1><p><img src="https://img-blog.csdnimg.cn/20200711150059950.png" alt=""></p><p>这一期我们终于完成了 CSS 与 CSS3 基础的所有关卡，个人觉得这个 FCC 集训营的关卡中的 CSS 知识还是比较全面的。在编写这些关卡的过程中确实重温了不少前端基础，也是收益匪浅。在跟着我的教程一起闯关的同学们，也希望你们也有所收获。</p><blockquote><p>我是<font color="#60AAF8"><b>三钻</b></font>，一个在<font color="#60AAF8"><b>技术银河</b></font>中等和你们一起来终身漂泊学习。<br>点赞是力量，关注是认可，评论是关爱！下期再见 👋！</p></blockquote><h2 id="系列阅读"><a href="#系列阅读" class="headerlink" title="系列阅读"></a>系列阅读</h2><ol><li>🔥<a href="https://blog.csdn.net/TriDiamond6/article/details/105915758" target="_blank" rel="noopener">《勇闯 28 个关卡学会 HTML 与 HTML5 基础》</a> —— 这周我们一起闯过了 22 关，下一期我们会一起把剩余的 22 关完成。学习是一种像爬山一样的过程，要经历过漫长的上坡路，一步一个脚印。“路漫漫其修远兮，吾将上下而求索。”， 在追寻知识的道路上，前方的道路还很漫长，但我们将百折不挠，不遗余力地，上天下地的去追求和探索。让我们继续坚持学习，终身学习成长。在大前端的时代爬到技术的巅峰，做一个有深度的技术人员。</li><li>🔥<a href="https://blog.csdn.net/TriDiamond6/article/details/106048140" target="_blank" rel="noopener">《44 关学习 CSS 与 CSS3 基础「一」》</a> —— 这一期我们一起攻破前端第二大知识点《CSS 基础入门》。因为这一课一共有 44 关，我把文章分成两期更新。</li></ol><h2 id="推荐系列"><a href="#推荐系列" class="headerlink" title="推荐系列"></a>推荐系列</h2><p>小伙伴们可以<strong>查看或者订阅相关的专栏</strong>，从而集中阅读相关知识的文章哦。</p><ul><li><p>📖 <a href="https://blog.csdn.net/tridiamond6/category_10036942.html" target="_blank" rel="noopener">《数据结构与算法》</a> — 到了如今，如果想成为一个高级开发工程师或者进入大厂，不论岗位是前端、后端还是 AI，算法都是重中之重。也无论我们需要进入的公司的岗位是否最后是做算法工程师，前提面试就需要考算法。</p></li><li><p>📖 <a href="https://blog.csdn.net/tridiamond6/category_9782493.html" target="_blank" rel="noopener">《FCC 前端集训营》</a> — 根据 FreeCodeCamp 的学习课程，一起深入浅出学习前端。稳固前端知识，一起在 FreeCodeCamp 获得证书</p></li><li><p>📖 <a href="https://blog.csdn.net/tridiamond6/category_9782493.html" target="_blank" rel="noopener">《前端星球》</a> — 以实战为线索，深入浅出前端多维度的知识点。内含有多方面的前端知识文章，带领不懂前端的童鞋一起学习前端，在前端开发路上童鞋一起燃起心中那团火 🔥</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML&amp;CSS </tag>
            
            <tag> Free Code Camp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣实战之移动零、盛最多的水、爬楼梯</title>
      <link href="/2020/06/24/algorithm/leetcode-moveZero-water-stairs.html"/>
      <url>/2020/06/24/algorithm/leetcode-moveZero-water-stairs.html</url>
      
        <content type="html"><![CDATA[<h1 id="练题法则"><a href="#练题法则" class="headerlink" title="练题法则"></a>练题法则</h1><p><strong>5-10 分钟读题与思考</strong></p><ul><li><strong>不要纠结</strong>没有思路就直接看题解；</li><li><strong>不要死磕</strong>觉得自己很失败，怎么我们就想不出来；</li><li>基本上这些算法题，让我们自己想出来是不可能的；</li><li>拿跳表的来说，如果我们能从 0-1 把它想出来，那我们就可以拿到图灵奖了；</li><li>所以记住！<strong>无思路就直接看题解，无思路就直接看题解，无思路就直接看题解</strong>！</li><li>我们只需要<strong>知道并且能运用即可！</strong></li></ul><p><strong>有思路</strong></p><ul><li>自己开始写代码，没有，就马上看题解！<br><strong>默写背题，熟练</strong></li><li>做完题目后，我们需要记住这种题的思路和有<strong>N 种解决办法</strong>；</li><li>重复再<strong>重复的默写，</strong>直到自己有深刻的影响；</li></ul><p><strong>最后开始自己写（闭卷）</strong></p><ul><li>到了这里如果我们还需要看别人代码，那就要回去背题；</li><li>能到达这个阶段基本这种题你已经开始熟悉的，接下来就是反复练习；</li></ul><h2 id="在哪里练题？"><a href="#在哪里练题？" class="headerlink" title="在哪里练题？"></a>在哪里练题？</h2><p>那肯定是<a href="https://leetcode-cn.com/" target="_blank" rel="noopener">力扣</a>了！没有账号的小伙伴，马上就去注册个账号开始日复一日的练习吧！～</p><p><img src="https://img-blog.csdnimg.cn/20200613135642518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="283-题-移动零"><a href="#283-题-移动零" class="headerlink" title="283 题 - 移动零"></a>283 题 - 移动零</h1><blockquote><p><a href="https://leetcode-cn.com/problems/move-zeroes/" target="_blank" rel="noopener">283. 移动零</a>｜<strong>难度</strong>：<font color="green">简单</font></p></blockquote><h2 id="题目讲解"><a href="#题目讲解" class="headerlink" title="题目讲解"></a>题目讲解</h2><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p>示例：</p><pre><code>输入: [0,1,0,3,12]输出: [1,3,12,0,0]</code></pre><p><strong>说明</strong>:</p><ol><li>必须在原数组上操作，不能拷贝额外的数组。</li><li>尽量减少操作次数。</li></ol><p><strong>这里需要注意的重点：</strong></p><ol><li>所有 <code>0</code> 移动到数组的末尾；</li><li>保持非零元素的相对顺序；</li><li>必须在原数组上操作，不能拷贝额外的数组；</li></ol><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>思考题解时，使用<strong>MECE 原则</strong> — 每一个思路都相对独立的思维，然后想到完全穷尽。首先不要管附加条件，先把有可能解决这个问题的思路都想出来，再评估哪一个办法是最优解。面试的时候也是一样，说出你所有可以想到的思路，然后分别讲出各自的优点与缺点，最后提出最优答案。</p></blockquote><ol><li><strong>统计 0 的个数</strong><ul><li>循环数组找到 0 的位置，遇到 0 就为 0 的个数加一；</li><li>遇到不是 0 的时候，把非 0 的元素值与 0 的元素交换即可；</li></ul></li><li><strong>开新数组</strong><ul><li>给一个指针<code>i</code>从数组的头部开始递增；</li><li>给一个指针<code>j</code>从数组的尾部开始递减（也就是原数组的总长度）；</li><li>遇到零就往<code>j</code>指针的位置放，然后<code>j--</code>；</li><li>遇到非零就往<code>i</code>指针的位置放，然后<code>i++</code>；</li><li><strong>缺点：</strong>内存使用会高；</li><li><strong>不符合条件：</strong>必须在原数组上操作，所以可以实现但是不符合条件；</li></ul></li><li><strong>双指针交换</strong><ul><li>给两个指针<code>i</code>和<code>j</code>，并且默认都从 0 开始；</li><li><code>i</code>指向的是当前位置；</li><li><code>j</code>指针会一直移动，直到找到一个非零元素，然后与<code>i</code>位置的值交换；</li><li>如果<code>j</code>的位置与<code>i</code>不是一致的话，就可以给<code>j</code>的值换成 0；</li></ul></li><li><strong>双指针替换后清零</strong><ul><li>这个与<strong>第三种</strong>方法一致，也是双指针；</li><li>唯一的区别是不在<code>i</code>指针扫描的时候替换零；</li><li>而是在替换完毕所有非零元素后，把剩余的全部位数都改为 0；</li></ul></li></ol><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><p><strong>「方法一」</strong> - 统计 0 的个数：</p><ul><li>时间复杂度：$O(n)$ - N 个元素就需要遍历 N 次</li><li>空间复杂度：$O(1)$ - 只对原数组进行替换操作</li></ul><pre><code class="javascript">/** * @param {number[]} nums * @return {void} Do not return anything, modify nums in-place instead. */var moveZeroes = function (nums) {  let zeroCount = 0;  for (let i = 0; i &lt; nums.length; i++) {    if (nums[i] == 0) {      zeroCount += 1;    } else if (zeroCount &gt; 0) {      nums[i - zeroCount] = nums[i];      nums[i] = 0;    }  }};</code></pre><p><strong>「方法二」</strong> - 双指针交换：</p><p><img src="https://img-blog.csdnimg.cn/20200624213737392.gif#pic_center" alt=""></p><ul><li>时间复杂度：$O(n)$ - N 个元素就需要遍历 N 次</li><li>空间复杂度：$O(1)$ - 只对原数组进行替换操作</li></ul><pre><code class="javascript">/** * @param {number[]} nums * @return {void} Do not return anything, modify nums in-place instead. */var moveZeroes = function (nums) {  let j = 0;  for (let i = 0; i &lt; nums.length; i++) {    if (nums[i] !== 0) {      nums[j] = nums[i];      if (j !== i) {        nums[i] = 0;      }      j++;    }  }};</code></pre><p><strong>「方法三」</strong> - 双指针替换后清零：</p><p><img src="https://img-blog.csdnimg.cn/20200624213755998.gif#pic_center" alt=""></p><ul><li>时间复杂度：$O(n)$ - N 个元素就需要遍历 N 次，加上最后清零是走了<code>n减非零的个数</code>，那就是<code>O(n+n-i)</code>，总的来说还是<code>O(n)</code></li><li>空间复杂度：$O(1)$ - 只对原数组进行替换操作</li></ul><pre><code class="javascript">/** * @param {number[]} nums * @return {void} Do not return anything, modify nums in-place instead. */var moveZeroes = function (nums) {  var j = 0;  for (let i = 0; i &lt; nums.length; i++) {    if (nums[i] != 0) {      nums[j] = nums[i];      j++;    }  }  for (let k = j; k &lt; nums.length; k++) {    nums[k] = 0;  }};</code></pre><h2 id="边界测试用例"><a href="#边界测试用例" class="headerlink" title="边界测试用例"></a>边界测试用例</h2><blockquote><p>[0,1,0,3,12][1,2] &gt; [0,0]</p></blockquote><h2 id="题解对比与分析"><a href="#题解对比与分析" class="headerlink" title="题解对比与分析"></a>题解对比与分析</h2><blockquote><p><strong>注意</strong>：以下数据都是在<strong>力扣</strong>中提交后返回的结果，每次提交都有可能不一致。所以相近的方案输出的结果有所差异也是正常的，最终<strong>最优方案要通过分析代码来确定</strong>，<strong>不能只以力扣输出的数据为准，只能供于我们作为参考</strong>。</p></blockquote><table><thead><tr><th>方法</th><th>执行时间</th><th>内存消耗</th></tr></thead><tbody><tr><td>「方法一」- 统计 0 的个数</td><td>96 ms（战胜 17.82%）</td><td>37.1 MB</td></tr><tr><td>「方法二」- 双指针交换</td><td>72 ms（战胜 87.23%）</td><td>37.2 MB</td></tr><tr><td>「方法三」- 双指针替换后清零</td><td>76 ms（战胜 73.98%）</td><td>37.2 MB</td></tr></tbody></table><p><strong>分析一下：</strong></p><ul><li>第一种方法是通过统计 0 出现的次数来定位到需要替换 0 的所在位置，里面涉及一个<code>i - zeroCount</code>的运算，所以相对其他方法来说运行时间会更长一些；</li><li>第二个方法是通过两个指针一起运行，一个固定在 0 元素，一个一直走找到非 0 元素，最后做一个交换，这种方法没有涉及运算，同时也是一个循环就可以完成，相对来说是最优解；</li><li>第三种方法也是用了双指针，与第二种方法的唯一区别就是先替换掉所有 0 的元素，最后把剩余的元素全部一次性替换成 0。可读性来说，个人觉得更容易懂，但是时间和空间复杂度和第二种方法是一致的。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200613135642518.png" alt=""></p><h1 id="11-题-盛最多水的容器"><a href="#11-题-盛最多水的容器" class="headerlink" title="11 题 - 盛最多水的容器"></a>11 题 - 盛最多水的容器</h1><blockquote><p><a href="https://leetcode-cn.com/problems/container-with-most-water/" target="_blank" rel="noopener">283. 盛最多水的容器</a>｜<strong>难度</strong>：<font color="orange">中等</font></p></blockquote><h2 id="题目讲解-1"><a href="#题目讲解-1" class="headerlink" title="题目讲解"></a>题目讲解</h2><p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><blockquote><p>说明：你不能倾斜容器，且 n 的值至少为 2。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200624214839464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><p>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p><p><strong>示例：</strong></p><blockquote><p>输入：[1,8,6,2,5,4,8,3,7]<br>输出：49</p></blockquote><p><strong>题目重点：</strong></p><ol><li>首先我们的目标是挑选两条柱子，从而让两个柱子之前可以得出最大的面积（面积越大自然可容纳的水就越多）；</li><li>挑选最长的两个柱子不等于拥有最大的面积，因为它们之间的距离也是决定空间的一个维度；</li><li>所以重点是找到高度和宽度比例最大的一对柱子，从而得出最大面积；</li><li>注意在运算面积时，我们只能用一对柱子中最短的一条作为高度，因为水只能填满到最短的那条柱子的高度；</li><li>面积运算公式： <code>高度 x 宽度 = 面积</code></li></ol><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><p><strong>枚举</strong> —— 暴力解法</p><ul><li>遍历左边和右边，找出所有面积；</li><li>列出所有柱子的组合；</li><li>算出所有组合各自的面积；</li><li>最后输出最大的面积的一组；</li><li><strong>缺点：</strong>遍历次数过高，所以时间复杂度会相对偏高</li><li><strong>复杂度</strong>：时间复杂度 $O(n^2)$、空间复杂度 $O(1)$</li></ul></li><li><p><strong>双指针</strong></p><ul><li><p>左右两边都往中间移动；</p></li><li><p>需要移动左右两头的问题都可以考虑双指针；</p></li><li><p>相同情况下两遍距离越远越好；</p></li><li><p>区域受限于较短边的高度；</p></li><li><p>所以让较矮的那边的指针往内移动；</p></li><li><p>一直以上面的规则移动知道两个指针重合；</p></li></ul></li></ol><h2 id="解题代码-1"><a href="#解题代码-1" class="headerlink" title="解题代码"></a>解题代码</h2><p><strong>「方法一」</strong> - 枚举（暴力破解）：</p><ul><li>时间复杂度：$O(n^2)$ - 双循环，所以总计循环了 N^2。</li><li>空间复杂度：$O(1)$</li></ul><pre><code class="javascript">/** * @param {number[]} height * @return {number} */var maxArea = function (height) {  let max = 0;  for (let i = 0; i &lt; height.length - 1; i++) {    for (let j = i + 1; j &lt; height.length; j++) {      let area = (j - i) * Math.min(height[i], height[j]);      max = Math.max(max, area);    }  }  return max;};</code></pre><p><strong>「方法二」</strong> - 双指针：</p><ul><li>时间复杂度：$O(n)$ - 双指针总计最多遍历整个数组一次。</li><li>空间复杂度：$O(1)$ - 只需要额外的常数级别的空间。</li></ul><pre><code class="javascript">/** * @param {number[]} height * @return {number} */var maxArea = function (height) {  let max = 0;  for (let i = 0, j = height.length - 1; i &lt; j; ) {    let minHeight = height[i] &lt; height[j] ? height[i++] : height[j--];    let area = (j - i + 1) * minHeight;    max = Math.max(max, area);  }  return max;};</code></pre><h2 id="题解对比与分析-1"><a href="#题解对比与分析-1" class="headerlink" title="题解对比与分析"></a>题解对比与分析</h2><table><thead><tr><th>方法</th><th>执行时间（毫秒）</th><th>内存消耗</th></tr></thead><tbody><tr><td>枚举（暴力破解）</td><td>984 ms （战胜 9.99%）</td><td>35.9 MB</td></tr><tr><td>双指针</td><td>56 ms（战胜 99.88%）</td><td>36 MB</td></tr></tbody></table><p><strong>分析一下</strong></p><ul><li>通过使用第二种方法，我们从$O(n^2)$的时间复杂度降到$O(n)$，总的执行时间大概是<strong>快了 17 倍</strong>。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200613135642518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="70-题-爬楼梯"><a href="#70-题-爬楼梯" class="headerlink" title="70 题 - 爬楼梯"></a>70 题 - 爬楼梯</h1><blockquote><p><a href="https://leetcode-cn.com/problems/climbing-stairs/" target="_blank" rel="noopener">283. 移动零</a>｜<strong>难度</strong>：<font color="green">简单</font></p></blockquote><h2 id="题目讲解-2"><a href="#题目讲解-2" class="headerlink" title="题目讲解"></a>题目讲解</h2><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p>注意：给定 n 是一个正整数。</p><p>示例 1：</p><blockquote><p>输入： 2<br>输出： 2<br>解释： 有两种方法可以爬到楼顶。</p><ol><li>1 阶 + 1 阶</li><li>2 阶</li></ol></blockquote><p>示例 2：</p><blockquote><p>输入： 3<br>输出： 3<br>解释： 有三种方法可以爬到楼顶。</p><ol><li>1 阶 + 1 阶 + 1 阶</li><li>1 阶 + 2 阶</li><li>2 阶 + 1 阶</li></ol></blockquote><h3 id="题解重点"><a href="#题解重点" class="headerlink" title="题解重点"></a>题解重点</h3><p>其实题目本身并不难，在力扣（LeetCode）是属于“简单”级别的题目，但是如果没有思路，或者对这个题目完全不了解的话，一点头绪都没有也是正常的，这种题目也就是<strong>属于套路题</strong>。如果我们是不知道的话，我们自然会难到不知道怎么做。我们要是知道了的话，那就变得相当容易了。</p><p>这里讲一下解题的思想：</p><blockquote><p><strong>首先我们解题时最大的误区是什么？</strong></p><ul><li>做题只做了一遍</li><li>至少要做五遍</li></ul><p><strong>然后我们优化的思想是什么？</strong></p><ul><li>空间换时间</li><li>升维思想（升级到二维）</li></ul><p><strong>看题时懵了怎么办？</strong></p><ul><li>首先我们能不能暴力破解？</li><li>最基本的情况我们应该怎么解决？能否化繁为简？</li></ul><p><strong>破解所有问题的法则：</strong></p><ul><li><strong>找最近重复的子问题</strong></li><li>为什么？因为写程序我们只能写<code>if</code>，<code>else</code>，<code>for</code>，<code>while</code>，<code>recursion</code>（递归）</li><li>计算机是人类发明的，计算机肯定是没有人脑那么强的，它其实就是一个<strong>简单的重复式机器</strong></li><li>那么计算机运行的程序也是同理，它是用重复的东西来解决问题的</li><li>如果我们遇到算法题的时候，就是需要我们用程序去解决的问题，那<strong>问题的本身就是可重复的</strong></li><li>无论是算法中的回述、分治、动态规划、递归等，全部都是在<strong>找重复性</strong>的原理</li><li>所以重点都是“<strong>找规律</strong>”</li></ul></blockquote><h3 id="深度分析题目："><a href="#深度分析题目：" class="headerlink" title="深度分析题目："></a>深度分析题目：</h3><p>首先我们使用<strong>化繁为简</strong>的思维来分析：</p><p>要到达第一个台阶，我们只能爬 1 个台阶，所以只有一种方法的可能性，所以 n = 1 的时候，只有 1 种可能。</p><p>那如果我们要到达第二个台阶，我们要不就是连续爬 2 次 1 个跨度，要不就是一次性爬两个台阶到达第二个台阶。所以有 2 种可能性。</p><p>那如果是需要到达<strong>第三个台阶呢</strong>？</p><blockquote><p>这里有个小技巧，要到达第三个台阶我们可以换一种思维去想，如果我们还是像第一个和第二个台阶的方式去列出可以到达第三个台阶的所有可能性，那如果<code>n</code>很大的时候，我们只靠人的大脑去想，那真的是太费劲了。但是这里有一个很巧妙的思维方式。</p><br/>返过来想，我们想到达第三个台阶，只有两种可能可以到达：<ol><li>要不就是从第二个台阶爬 1 个台阶到达</li><li>要不就是从第一个台阶爬 2 个台阶到达</li></ol><br/>那其实如果是第四个台阶是不是也是一样的？<ol><li>要不就是从第三个台阶爬 1 个台阶到达</li><li>要不就是从第二个台阶爬 2 个台阶到达</li></ol><br/>这里就有一个`规律`了。要到达第`n`个台阶我们需要知道：<ol><li>到达第<code>n-1</code>的台阶有多少种可能</li><li>到达第<code>n-2</code>的台阶有多少种可能</li><li>然后这两个相加就是到达第<code>n</code>的台阶有多少种可能</li></ol></blockquote><p>那其实这里就是老生常谈的<code>斐波拉次</code>数列:</p><p>$f(n) = f(n-1) + f(n-2)$</p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><strong>斐波拉次（Fibonacci）</strong>- “傻递归“<ul><li>直接使用递归循环使用斐波拉次公式即可</li><li>但是时间复杂度就很高 - $O(2^n)$</li></ul></li><li><strong>动态规划</strong><ul><li>用上面讲到的原理，到达第<code>n</code>个台阶只需要：爬上 $n-1$ 台阶的方式数 + 爬上 $n - 2$ 台阶的方法数 = 爬上第 $n$ 个台阶的方式数</li><li>所以得出的公式是 $dp[n] = dp[n-1] + dp[n-2]$</li><li>同时需要初始化： $dp[0]=1$ 和 $dp[1] = 1$</li><li>使用这种方式时间复杂度降到 $O(n)$</li></ul></li><li>动态规划 2 - 只记录最后 3 个的方法量<ul><li>与上面的动态规划的方法一样，但是这里我们只记录最后 3 个的台阶的爬楼方法数</li><li>使用<code>f1</code>，<code>f2</code>，<code>f3</code>作为储存变量</li><li>默认 $f1 = 1$ 和 $f2 = 2$ 即可</li></ul></li><li>通项公式（Binet’s Formular ）<ul><li>有观察数学规律的同学，或者数学比较好的同学，会发现本题是斐波那次数列，那么我们也可以用斐波那次的“通项公式”</li><li>公式是：$F_n = \frac{1}{\sqrt{5}}[(\frac{1+\sqrt{5}}{2})^n - (\frac{1-\sqrt{5}}{2})^n]$</li><li>时间复杂度：$O(logn)$</li></ul></li></ol><h2 id="解题代码-2"><a href="#解题代码-2" class="headerlink" title="解题代码"></a>解题代码</h2><p><strong>「方法一」斐波那次</strong></p><ul><li>时间复杂度：$O(2^n)$</li><li>空间复杂度：$O(1)$</li></ul><pre><code class="javascript">/** * @param {number} n * @return {number} */var climbStairs = function (n) {  if (n &lt;= 2) return n;  return climbStairs(n - 1) + climbStairs(n - 2);};</code></pre><p><strong>「方法二」动态规划</strong></p><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(n)$</li></ul><pre><code class="javascript">/** * @param {number} n * @return {number} */var climbStairs = function (n) {  const dp = [];  dp[0] = 1;  dp[1] = 1;  for (let i = 2; i &lt;= n; i++) {    dp[i] = dp[i - 1] + dp[i - 2];  }  return dp[n];};</code></pre><p><strong>「方法三」动态规划 2</strong></p><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)$</li></ul><pre><code class="javascript">/** * @param {number} n * @return {number} */var climbStairs = function (n) {  if (n &lt;= 2) {    return n;  }  let f1 = 1,    f2 = 2,    f3;  for (let i = 3; i &lt;= n; i++) {    f3 = f1 + f2;    f1 = f2;    f2 = f3;  }  return f3;};</code></pre><p><strong>「方法四」通项公式</strong></p><ul><li>时间复杂度：$O(logn)$</li><li>空间复杂度：$O(1)$</li></ul><pre><code class="javascript">/** * @param {number} n * @return {number} */var climbStairs = function (n) {  const sqrt_5 = Math.sqrt(5);  const fib_n = Math.pow((1 + sqrt_5) / 2, n + 1) - Math.pow((1 - sqrt_5) / 2, n + 1);  return Math.round(fib_n / sqrt_5);};</code></pre><h2 id="题解对比与分析-2"><a href="#题解对比与分析-2" class="headerlink" title="题解对比与分析"></a>题解对比与分析</h2><table><thead><tr><th>方法</th><th>执行时间（毫秒）</th><th>内存消耗</th></tr></thead><tbody><tr><td>「方法一」斐波那次</td><td>超出时间限制</td><td>N/A</td></tr><tr><td>「方法二」动态规划</td><td>68 ms</td><td>32.4 MB</td></tr><tr><td>「方法三」动态规划 2</td><td>53 ms</td><td>32.3 MB</td></tr><tr><td>「方法三」通项公式</td><td>67 ms</td><td>32.4 MB</td></tr></tbody></table><p><strong>分析一下</strong></p><ul><li>按照时间复杂度来说，应该“<strong>通项公式</strong>”是性能最优的，但是力扣的执行时间不是很靠谱，这一点我在上面也说到，就不多解释了。</li><li>所以最优解还是第三种方法“<strong>通项公式</strong>”</li><li>接着就是“<strong>动态规划 2</strong>”，因为只储存了 3 个变量，第二种方法需要用到数组。在空间复杂度上就占了优势。</li><li>而最后输一下傻瓜式的斐波那次递归，这种方法还没有执行完就已经被淘汰了。时间复杂度过高。</li></ul><h1 id="推荐专栏"><a href="#推荐专栏" class="headerlink" title="推荐专栏"></a>推荐专栏</h1><p>小伙伴们可以<strong>查看或者订阅相关的专栏</strong>，从而集中阅读相关知识的文章哦。</p><ul><li><p>📖 <a href="https://blog.csdn.net/tridiamond6/category_10036942.html" target="_blank" rel="noopener">《数据结构与算法》</a> — 到了如今，如果想成为一个高级开发工程师或者进入大厂，不论岗位是前端、后端还是 AI，算法都是重中之重。也无论我们需要进入的公司的岗位是否最后是做算法工程师，前提面试就需要考算法。</p></li><li><p>📖 <a href="https://blog.csdn.net/tridiamond6/category_9782493.html" target="_blank" rel="noopener">《FCC 前端集训营》</a> — 根据 FreeCodeCamp 的学习课程，一起深入浅出学习前端。稳固前端知识，一起在 FreeCodeCamp 获得证书</p></li><li><p>📖 <a href="https://blog.csdn.net/tridiamond6/category_9782493.html" target="_blank" rel="noopener">《前端星球》</a> — 以实战为线索，深入浅出前端多维度的知识点。内含有多方面的前端知识文章，带领不懂前端的童鞋一起学习前端，在前端开发路上童鞋一起燃起心中那团火 🔥</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用动图解说数组、链表、跳表原理与实现</title>
      <link href="/2020/06/14/algorithm/algorithm-array-linked-list-jump-list.html"/>
      <url>/2020/06/14/algorithm/algorithm-array-linked-list-jump-list.html</url>
      
        <content type="html"><![CDATA[<h1 id="「初」前言"><a href="#「初」前言" class="headerlink" title="「初」前言"></a>「初」前言</h1><p>在学习数据结构与算法的过程中，感觉真的是一入算法深似海，但是越学越觉得有趣。不过我们会发现在终身学习的过程中，我们都是越学越多，不知的也越来越多，但是更渴望认知更多的知识，越是对知识感兴趣。</p><p>本期讲说最常见的数据结构类型分别有数组、链表、跳表。这一期我们一起来了解它们的原理与实现。</p><h1 id="「一」数组-Array"><a href="#「一」数组-Array" class="headerlink" title="「一」数组 Array"></a>「一」数组 Array</h1><ul><li><strong>Java, C++</strong>: int a[100]</li><li><strong>Python</strong>: list = []</li><li><strong>JavaScript</strong>: let x = [1, 2, 3]</li></ul><blockquote><p>当今的高级数据语言中，对于数组里面的类型没有严格要求，相对来说比较多元化。</p><p>在语言下有一个标准的叫法叫做<code>泛型</code>，也就说任何一个单元类型都可以放入数组。</p></blockquote><h2 id="数组的原理"><a href="#数组的原理" class="headerlink" title="数组的原理"></a>数组的原理</h2><ul><li>数组底层的硬件实现是有一个<code>内存管理器</code>的；</li><li>当我们向计算机申请数组时，实际上计算机是在内存中给我们开辟了<strong>一段连续的地址</strong>；</li><li>每一个地址都是可以通过内存管理进行访问；</li><li>无论我们是访问第一个值，还是里面其中一个值，时间复杂度都是<code>常数O(1)</code>；</li><li>并且可以<strong>随意访问任何一个元素</strong>，所以它的<strong>访问速度非常的快</strong>，也是数组的特性之一；</li></ul><p><img src="https://img-blog.csdnimg.cn/20200613135359695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="数组的缺陷"><a href="#数组的缺陷" class="headerlink" title="数组的缺陷"></a>数组的缺陷</h2><blockquote><p>数组的问题关键是在增加与删除元素的时候。</p></blockquote><h3 id="数组插入操作"><a href="#数组插入操作" class="headerlink" title="数组插入操作"></a>数组插入操作</h3><p>假设现在我们定义了一个<code>[A, B, C, E, F, G]</code>的数组，然后我们要插入一个<code>D</code>到这个数组里面。现在假设我们要把 D 插入到指针 3 的位置，我们要怎么实现呢？</p><ol><li>首先我们需要把<code>E</code>，<code>F</code>，<code>G</code>都挪动到各自的下一个指针；</li><li>然后加入<code>D</code>到指针<code>3</code>上；</li></ol><p><strong>详细实现效果请查看下效果图：</strong></p><p><img src="https://img-blog.csdnimg.cn/20200613135432776.gif#pic_center" alt=""></p><blockquote><p>因为插入操作的时候，我们需要挪动平均一半的元素（<strong>N/2</strong>），所以数组每次插入元素时，平均就是<code>O(n)</code>的时间复杂度。</p></blockquote><h3 id="数组删除操作"><a href="#数组删除操作" class="headerlink" title="数组删除操作"></a>数组删除操作</h3><p>删除元素也是同理的，假设我们现在有<code>[A, B, C, Z, D, E, F]</code>的一个数组，我们现在需要把<code>Z</code>从这个数组中移除。实现逻辑如下：</p><ol><li>首先把指针<code>3</code>的值置空；</li><li>然后把<code>D</code>、<code>E</code>、<code>F</code>三个值往上移动一个位置；</li><li>最后在例如<code>Java</code>的数组语言中，我们需要把数组的长度减一即可；</li></ol><p><strong>具体的实现效果看下图：</strong></p><p><img src="https://img-blog.csdnimg.cn/20200613135457255.gif#pic_center" alt=""></p><blockquote><p>因为删除操作的时候，也是需要挪动平均一半的元素（<code>N/2</code>），所以数组每次删除元素时，平均就是<code>O(n)</code>的时间复杂度。</p></blockquote><h2 id="数组时间复杂度"><a href="#数组时间复杂度" class="headerlink" title="数组时间复杂度"></a>数组时间复杂度</h2><table><thead><tr><th><strong>操作类型</strong></th><th><strong>时间复杂度</strong></th></tr></thead><tbody><tr><td>查询上一个 (prepend)</td><td>O(1)</td></tr><tr><td>查询下一个 (append)</td><td>O(1)</td></tr><tr><td>查询某一个元素 (lookup)</td><td>O(1)</td></tr><tr><td>==新增结点 (insert)==</td><td>==O(N)==</td></tr><tr><td>==删除结点 (delete)==</td><td>==O(N)==</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/20200613135642518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="「二」-链表-Linked-List"><a href="#「二」-链表-Linked-List" class="headerlink" title="「二」 链表 Linked List"></a>「二」 链表 Linked List</h1><p>下来我们一起来看看另外一个数据结构<code>链表</code>。链表的诞生就是为了<strong>解决数组的缺点</strong>。</p><p><img src="https://img-blog.csdnimg.cn/20200613135733621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><p><strong>链表的特性：</strong></p><ul><li>每一个元素有两个成员变量<code>value</code><strong>值</strong>与<code>next</code><strong>指针</strong>（指向下一个元素）；</li><li>每一个元素串在一起后与数组是非常相似的结构；</li><li>与数组不一样的就是<strong>每一个元素一般都要定义一个</strong><code>Class</code>（<strong>类</strong>）：一般都叫一个<code>Node</code>；</li><li><code>单链表</code>：只有一个<strong>next</strong>指针；</li><li><code>双向链表</code>：拥有一个<strong>prev</strong>或者<strong>previous</strong>指针指向前一个元素；</li><li>头指针用<strong>Head</strong>来表示，尾指针用<strong>Tail</strong>来表示；</li><li>尾部指针的<strong>next</strong>指针都会指向一个<strong>None</strong>（空）；</li><li><code>循环链表</code>：尾指针的<strong>next</strong>指针指向头指针；</li></ul><h2 id="链表添加结点"><a href="#链表添加结点" class="headerlink" title="链表添加结点"></a>链表添加结点</h2><p>下来我们一起来看看一个链表新添加一个元素的原理：</p><ol><li>首先为新的元素创建一个结点（<strong>Node</strong>）；</li><li>然后我们需要把这个新元素插入到连个元素之间；</li><li>把前一个元素的<code>next</code>指针指向新的<strong>Node</strong>；</li><li>把新元素的<code>next</code>指针指向后一个元素；</li></ol><p><strong>具体实现效果看下图：</strong></p><p><img src="https://img-blog.csdnimg.cn/20200613135814842.gif#pic_center" alt=""></p><blockquote><p>链表的插入操作总共是<strong>2 次</strong>，但是常数次的，所以<strong>时间复杂度为</strong> <code>O(1)</code>。</p></blockquote><h2 id="链表删除结点"><a href="#链表删除结点" class="headerlink" title="链表删除结点"></a>链表删除结点</h2><p>接下来我们一起来看看删除结点的原理，删除与新增大致上是一样的，是</p><ol><li>在需要把删除的结点的前一个<strong>node</strong>的<code>next</code>，改为删除结点的下一个<strong>node</strong>；</li></ol><p><strong>具体的实效效果看下图：</strong></p><p><img src="https://img-blog.csdnimg.cn/2020061313583234.gif#pic_center" alt=""></p><blockquote><p>链表的删除操作<strong>只需要一次</strong>，所以<strong>时间复杂</strong>也是<code>O(1)</code>。</p></blockquote><h2 id="链表时间复杂度"><a href="#链表时间复杂度" class="headerlink" title="链表时间复杂度"></a>链表时间复杂度</h2><p>通过分析链表的新增和删除操作，我们发现链表中并没有像数组一样需要挪动一半或者多个的元素的位置和复制元素等。也是因为这样它的移动和修改操作的<strong>效率非常高为 O(1)</strong>。 但是在查询的时候，当我们需要访问链表中某一个值的时候，就相对变得复杂了，为<strong>O(N)</strong>。</p><p><strong>我们来看看一下的链表时间复杂度：</strong></p><table><thead><tr><th><strong>操作类型</strong></th><th><strong>时间复杂度</strong></th></tr></thead><tbody><tr><td>查询上一个 (prepend)</td><td>O(1)</td></tr><tr><td>查询下一个 (append)</td><td>O(1)</td></tr><tr><td>==查询某一个元素 (lookup)==</td><td>==O(N)==</td></tr><tr><td>新增结点 (insert)</td><td>O(1)</td></tr><tr><td>删除结点 (delete)</td><td>O(1)</td></tr></tbody></table><blockquote><p>看完<strong>Array</strong>和<strong>Linked List</strong>的两种数据结构的特性后，我们可以发现是<strong>没有完美的数据结构</strong>的。如果有完美的那就不需要 Array 或者 Linked List 并存了。所以我们需要看<strong>场景来决定</strong>我们需要用那种数据结构。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200613135642518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="「三」跳表-Skip-List"><a href="#「三」跳表-Skip-List" class="headerlink" title="「三」跳表 Skip List"></a>「三」跳表 Skip List</h1><p>后续有技术科学家对链表进行了优化，诞生出第三个数据结构叫做<strong>跳表</strong>（Skip List）。跳表可能有些小伙伴没有怎么接触过，但是其实它一直都在我们身边的应用中使用。在 Redis 里面就使用了跳表。不过面试过程中并不会给大家出跳表的题目来写程序，所以我们只需要理解它的原理即可。</p><p><strong>跳表</strong>的核心是为了优化<strong>链表元素随机访问</strong>的<strong>时间复杂</strong>度过高的问题 (<code>O(n)</code>)。</p><blockquote><p>这个优化的<strong>中心思想</strong>其实是<strong>贯穿于整个算法数据结构，甚至也贯穿于整个数学与物理的世界</strong>。那就是<code>升维思想 / 空间换时间</code> - 顾名思义就是在原有的链表中添加第二维的链表叫<code>第一级索引</code>。</p></blockquote><h2 id="添加第一级索引"><a href="#添加第一级索引" class="headerlink" title="添加第一级索引"></a>添加第一级索引</h2><p>我们看看下面图什么是<strong>一级索引</strong>：</p><p><img src="https://img-blog.csdnimg.cn/2020061314004587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><ul><li>首先索引的第一个索引指向<strong>头 (head)</strong>，也就是<strong>第一个元素 (1)</strong>；</li><li>然后索引的下一个元素指向的就是<strong>next + 1</strong>，也就是<strong>第三个元素 (4)</strong>；</li><li>换句话来说，就是第一级索引的元素比原始链表走<strong>快 2 倍的速度</strong>；</li></ul><p>假设现在我们需要<strong>访问结点 7</strong>，添加了这个索引后，是<strong>怎么提高了访问速度</strong>呢？我们来看看下面的图：</p><p><img src="https://img-blog.csdnimg.cn/20200613140130197.gif#pic_center" alt=""></p><ul><li>首先从第一级索引中走到索引 7；</li><li>然后从索引 7 下来找到第 7 个结点；</li><li>这里总共的步数<strong>4 步降到 2 步</strong>就能找到第 7 个结点；</li></ul><blockquote><p>虽然说速度是快了，但是<strong>能不能更快</strong>呢？可以的，<strong>只需要我们再叠加维度，用空间换时间的中心思想即可</strong>。</p></blockquote><h2 id="添加第二级索引"><a href="#添加第二级索引" class="headerlink" title="添加第二级索引"></a>添加第二级索引</h2><p>第二级索引比第一级的索引再走快一步，那就是每次走两步，也就是<strong>next+2</strong>。这样访问结点的时候就更快了。首先我们来看看加入第二级索引后的结构图：</p><p><img src="https://img-blog.csdnimg.cn/2020061314020971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><ul><li>同理二级索引的第一个是指向一级索引的第一个，最终指向的是头 (head)；</li><li>二级索引的第个人结点指向的就是结点 7，因为<strong>二级索引是 next+2</strong>，<strong>每次跳 3 步</strong>的进行步伐；</li></ul><p><strong>加入了二级索引后，我们访问结点 7 的时候是怎么样的呢？</strong></p><p><img src="https://img-blog.csdnimg.cn/20200613140308170.gif#pic_center" alt=""></p><ul><li>维度升级到第二级时，只需要 1 步就能到达结点 7 的索引；</li><li>加入二级索引后，我们从<strong>4 步降到 1 步</strong>完成结点 7 的访问；</li></ul><blockquote><p>所以清晰看到，当我们<strong>升级多一层的维度后，链表的访问速度也会相对应的提升</strong>。也就是说，在一个非常长的链表中，我们可以<strong>加入 N 级索引，也就是提高 N 层的维度就可以提高这个链表访问的速度</strong>。总体来说我们就是需要添加<code>log2n</code>个级索引，来达到最高级索引维度。</p></blockquote><h2 id="跳表查询的时间复杂度分析"><a href="#跳表查询的时间复杂度分析" class="headerlink" title="跳表查询的时间复杂度分析"></a>跳表查询的时间复杂度分析</h2><ul><li>首先每一级索引我们提升了 2 倍的跨度，那就是减少了 2 倍的步数，所以是<strong>n/2、n/4、n/8 以此类推</strong>；</li><li>第 k 级索引结点的个数就是 <strong>n/(2^k)</strong>；</li><li>假设索引有 h 级， 最高的索引有 2 个结点；</li><li><strong>n/(2^h) = 2</strong>, 从这个公式我们可以求得 <strong>h = log2(n)-1</strong>；</li><li><strong>所以最后得出跳表的时间复杂度是</strong><code>O(log n)</code></li></ul><h2 id="跳表查询的空间复杂度分析"><a href="#跳表查询的空间复杂度分析" class="headerlink" title="跳表查询的空间复杂度分析"></a>跳表查询的空间复杂度分析</h2><ul><li>首先原始链表<strong>长度为 n</strong></li><li>如果索引是每 2 个结点有一个索引结点，每层索引的结点数：n/2, n/4, n/8 … , 8, 4, 2 以此类推；</li><li>或者所以是每 3 个结点有一个索引结点，每层索引的结点数：n/3, n/9, n/27 … , 9, 3, 1 以此类推；</li><li><strong>所以空间复杂度是</strong><code>O(n)</code>；</li></ul><h2 id="跳表现实中的形态"><a href="#跳表现实中的形态" class="headerlink" title="跳表现实中的形态"></a>跳表现实中的形态</h2><p><img src="https://img-blog.csdnimg.cn/20200613141031623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><center>来源于覃超老师的PPT</center><ul><li>在现实使用中，链表的索引并<strong>不是那么整齐和有规则</strong>的；</li><li>这个是因为在元素<strong>增加与删除的过程中会有所变化</strong>；</li><li>最后经过多次改动之后，<strong>有一些索引会跨步多几步或者少哭跨几步</strong>；</li><li>而且<strong>维护成本相对要高</strong> - 新增或者删除时需要把所有索引都更新一遍；</li><li>最后在新增和删除的过程中的更新，时间复杂度也是<code>O(log n)</code>；</li></ul><blockquote><p><strong>升维思想和空间换时间</strong>的思维，我们一定要记下来，并且融会贯通。后面在解决相应的面试题的时候我们会经常用到这种思维。比如：树，二叉搜索树等经常用高级数据库结构。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200613135642518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="「四」工程中的应用"><a href="#「四」工程中的应用" class="headerlink" title="「四」工程中的应用"></a>「四」工程中的应用</h1><p>链表在日常工程中其实应用是很多的，但是因为这些都属于高级的数据结构了，无论是 Java 也好、C++、JavaScript 还是 Go 语言，这些语言里面都<strong>提供了封装好的数据结构，我们只需要直接使用就可以了</strong>。</p><h2 id="链表的应用"><a href="#链表的应用" class="headerlink" title="链表的应用"></a>链表的应用</h2><p>链表最常见的一个应用就是<code>LRU Cache</code>，没有接触过的小伙伴，可以百度一下深挖一下。然后这里附上一道<code>Leetcode</code>的题目[<a href="https://leetcode-cn.com/problems/lru-cache-lcci/" target="_blank" rel="noopener">面试题 16.25. LRU 缓存</a>，这道题的话使用双链表就可以实现。有兴趣的小伙伴可以尝试实现。</p><h2 id="跳表的应用"><a href="#跳表的应用" class="headerlink" title="跳表的应用"></a>跳表的应用</h2><p>跳表的话在 Redis 中就有应用到。 想了解更多的小伙伴可以搜索<code>Redis的跳跃表</code>进深挖。</p><p><img src="https://img-blog.csdnimg.cn/20200613135642518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="「终」总结"><a href="#「终」总结" class="headerlink" title="「终」总结"></a>「终」总结</h1><ul><li><strong>数据结构</strong>：<ul><li><strong>数组</strong>：随机查询快 <code>O(1)</code>，但是删除与插入较慢 <code>O(n)</code>；</li><li><strong>链表</strong>：删除与插入快 <code>O(1)</code>，但是随机查询慢 <code>O(n)</code>；</li><li><strong>跳表</strong>：为了提高链表的随机查询而生的，随机查询能提升到 <code>O(log n)</code>，但是<strong>维护成本高</strong>；</li></ul></li><li><strong>思维重点</strong>：<ul><li>==升维思想 + 空间换时间==</li></ul></li><li><strong>应用</strong>：<ul><li><strong>链表</strong>：LRU Cache</li><li><strong>跳表</strong>：Redis</li></ul></li></ul><blockquote><p>我是<font color="#60AAF8"><b>三钻</b></font>，一个在<font color="#60AAF8"><b>技术银河</b></font>中等和你们一起来终身漂泊学习。<br>点赞是力量，关注是认可，评论是关爱！下期再见 👋！</p></blockquote><blockquote><p>公众号《<strong>技术银河</strong>》回复”算法资料”，可以获得这个系列文章的<strong>PDF 版</strong>和<strong>其他资料</strong>！</p></blockquote><h2 id="推荐专栏"><a href="#推荐专栏" class="headerlink" title="推荐专栏"></a>推荐专栏</h2><p>小伙伴们可以<strong>查看或者订阅相关的专栏</strong>，从而集中阅读相关知识的文章哦。</p><ul><li><p>📖 <a href="https://blog.csdn.net/tridiamond6/category_10036942.html" target="_blank" rel="noopener">《数据结构与算法》</a> — 到了如今，如果想成为一个高级开发工程师或者进入大厂，不论岗位是前端、后端还是 AI，算法都是重中之重。也无论我们需要进入的公司的岗位是否最后是做算法工程师，前提面试就需要考算法。</p></li><li><p>📖 <a href="https://blog.csdn.net/tridiamond6/category_9782493.html" target="_blank" rel="noopener">《FCC 前端集训营》</a> — 根据 FreeCodeCamp 的学习课程，一起深入浅出学习前端。稳固前端知识，一起在 FreeCodeCamp 获得证书</p></li><li><p>📖 <a href="https://blog.csdn.net/tridiamond6/category_9782493.html" target="_blank" rel="noopener">《前端星球》</a> — 以实战为线索，深入浅出前端多维度的知识点。内含有多方面的前端知识文章，带领不懂前端的童鞋一起学习前端，在前端开发路上童鞋一起燃起心中那团火 🔥</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linked List </tag>
            
            <tag> Array </tag>
            
            <tag> Jump List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里、力扣、政采云的15位专家分享前端面试与招聘视角</title>
      <link href="/2020/06/04/interview/big-company-interview-2020.html"/>
      <url>/2020/06/04/interview/big-company-interview-2020.html</url>
      
        <content type="html"><![CDATA[<h1 id="「始」前沿"><a href="#「始」前沿" class="headerlink" title="「始」前沿"></a>「始」前沿</h1><p>有幸在 5 月 31 号参加了《<strong>第八届前端早早聊大会</strong>》主办的《<strong>前端跳槽的新起点｜前端如何搞面试</strong>》。在这次大会中从早上 9 点半一直到下午 6 点多结束，大会含金量超高，我此次受益匪浅，屁股坐到起茧都是超级值得的。本次大会一共有<strong>15 位</strong>来源于各大厂公司的高级前端工程师和技术专家，每个讲师都给我带来了精彩绝伦的知识与干货。</p><p>这次大会的内容不只给我的<strong>技术生涯中带来了冲劲</strong>，让我认知到自己还有很多的不足与未知。同时也让我<strong>认知到了优秀的技术人才与团队的能力模型</strong>，讲师们有说到他们的经历和三观，引发了我对自己“保安式”的灵魂拷问。</p><p>听完本次大会后，真的让我重新认识了自己，也重新找到了前进方向与目标。最后还收获了许多知识与秘诀。下来我来总结一下我在这个大会上吸收到的知识精华。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/20200604003302784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="「一」候选人视角看待面试"><a href="#「一」候选人视角看待面试" class="headerlink" title="「一」候选人视角看待面试"></a>「一」候选人视角看待面试</h1><p>首先我们从候选人（面试者）的角度来剖析和分析一下面试者应该怎么从准备到面试成功，最后拿到心仪的 Offer。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="「1-」面试准备"><a href="#「1-」面试准备" class="headerlink" title="「1.」面试准备"></a>「1.」面试准备</h2><blockquote><p>我以前准备面试的时候都会非常慌张，不知道自己需要复习什么，或者做什么准备工作。甚至还有在某宝，某猫，某东买下了一堆的书籍开始刨书。还有就是下了几个 TG 的视频，然后天天晚上熬夜刨视频学习。这种方法其实作用真的不是很大，而且前端那么多知识，要全部都会，都能深入了解，是并不可能的。<strong>更重要的是我们平时每天的累积和沉淀。</strong></p></blockquote><p>那应该怎么准备呢？通过大会中各位优秀的候选人的分享，其实我们第一步应该是<strong>重新认识自己</strong>。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h3 id="「1-1」-重新认识自己"><a href="#「1-1」-重新认识自己" class="headerlink" title="「1.1」 重新认识自己"></a>「1.1」 重新认识自己</h3><p>在大会中我认识到如何深度剖析自己，从性格和心态、优点与缺点、思维、技能与知识、项目经验等维度开始剖析。</p><blockquote><p>每位讲师都有重点提及到，在优秀的团队中更看重的是一个人的自我修养，包括积极乐观面对挑战的态度，自信但保持谦虚的心态和突破瓶颈的魄力。如果在技术中没有，那在生活中我们有没有这样的修养，如果都没有那肯定是有待提升的。</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h4 id="性格与心态-——-深入了解和懂得自己的性格，会对我们在面试和工作中有很大的帮助"><a href="#性格与心态-——-深入了解和懂得自己的性格，会对我们在面试和工作中有很大的帮助" class="headerlink" title="性格与心态 —— 深入了解和懂得自己的性格，会对我们在面试和工作中有很大的帮助"></a>性格与心态 —— 深入了解和懂得自己的性格，会对我们在面试和工作中有很大的帮助</h4><ul><li><strong>自卑不自信</strong> —— 谦虚但不自卑<ul><li>很多小伙伴如果没有强大的学历背景和经历，往往会内心很自卑，不自信，在面试前中后都非常紧张、害怕和焦虑；</li><li>如果我们是有一些自卑不自信的，那我们是需要去调整和克服的；</li><li>但是每一个人的缺点也同时是他的优点，拿内向来说，自然会特别敏感，但是同时也具有洞察和感知他人情绪的能力；</li><li>在面试之前，先平复自己的内心，给自己心理暗示（我们是可以的！）</li><li>面试的过程中，多使用我们的洞察力来看清面试官当前的情绪从而做出调整，让自己在面试中表现的更好；</li></ul></li><li><strong>自信</strong> —— 自信但保持谦虚<ul><li>自信是我们的优点，那同理也会是我们的缺点；</li><li>自信很容易让我们自大，过于自信时就会忘记谦虚；</li><li>我们要时刻保持着谦虚的心，<strong>自信而不自大，谦虚而不自卑</strong>；</li><li>自信更多要来源于我们的准备和硬实力，而不是空虚无力的自信；</li></ul></li><li><strong>积极乐观</strong> —— 阳光正面面对挑战<ul><li>我们可以问问自己是喜欢在一个积极乐观的团队中，遇到问题大家都积极面对，共同寻找解决办法，还是遇到挑战都会一起刷屏“我太难了”？</li><li>个人心态会影响身边的人，一个团队的环境更会影响着大家的效率和工作激情；</li><li>所以优秀的团队都会选择积极乐观，勇于挑战，有主见，有想法，有自信的人来加入；</li><li>注意以下两种消极心态的自己：<ul><li><strong>二元轮认知</strong> - 解决问题的态度要正面，找到成功的可能，不是站在对立项目的问题；</li><li><strong>偏执型人格</strong> - 不要为自己的失败辩解找理由，只为成功找办法；</li></ul></li></ul></li></ul><blockquote><p>找到自己的性格，可以从而先解决自己性格上的缺陷，这个也是我们内心最基本的素养。一个优秀的技术人员首先就要有一个优秀的内心素养。良好的素养可以提高我们的面对困难，面对挑战时的心态，也是能让我们在技术道路上走的更远的基本功底。</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h4 id="自我审视，重新思考-——-挖掘自己的优势与劣势"><a href="#自我审视，重新思考-——-挖掘自己的优势与劣势" class="headerlink" title="自我审视，重新思考 —— 挖掘自己的优势与劣势"></a>自我审视，重新思考 —— 挖掘自己的优势与劣势</h4><blockquote><p>讲师们讲到的认识自己也包括挖掘自己的优势与劣势。那有哪些是要在面试前要挖掘自己的呢？</p></blockquote><p>深入思考后发现能自我探索，找到自己的能力和缺陷所在，才能让自己持续的成长，让每一件事情下一次做都能做的更好。有一句话“失败是成功之母”，其实这句话里面还有更深层的意思，如果我们失败后不总结，不找出自己失败的原因，无法自我挖掘自己在这件事情中做的好与不好的地方，那再去尝试总归还是会失败的。</p><p><strong>每一次失败都是一个学习的过程，重点不是我们失败的结果，而是我们在失败的过程中得到了什么，然后我们应该怎么去改变做的更好。</strong></p><p>在开发或者是工作中无非就是从失败到成功，从做的不够好到做的更好的过程。所以我们要善于总结自己，找到自己的优点与缺点，扬长避短，不断提升改变自己，才能让自己越来越优秀，越来越成功。</p><p>认识自己是一个很漫长的过程，持续的自我探索本身也是一种能力。只有发现自身的优势与劣势才能更好的让自己持续突破瓶颈往前迈进，也是一种发现自信的过程。</p><blockquote><p>那么我们具体要挖掘自己哪些东西呢？</p></blockquote><p><strong>从古到今：</strong></p><ol><li>学习到的<strong>知识</strong>；</li><li>工作中<strong>参与过</strong>和<strong>负责过</strong>的项目；</li><li>在每个项目中的<strong>角色</strong>和做的<strong>事情</strong>；</li><li>最终我们得到了什么“<strong>量化</strong>”的<strong>效果</strong>和<strong>结果</strong>；</li></ol><p><strong>首先讲讲知识：</strong></p><p>具体剖析自己懂得哪些，哪些是自己的强项，哪些是自己的弱项。<strong>强项就深挖学习，弱项就刻意学习。</strong></p><ul><li><strong>需要我们懂什么知识</strong>？<ul><li><strong>基础知识</strong><ul><li>JavaScript, HTML(5)，CSS(3)，HTTP，浏览器等</li><li>要懂方法实现和工作原理</li></ul></li><li><strong>框架能力</strong><ul><li>3 大框架必须至少熟悉到精通使用其一；</li><li>并且深耕到框架底层实现和工作原理；</li><li>重点复习 React 和 Vue；</li><li>还有每个框架的周边产品的运用和原理；</li></ul></li><li><strong>常见设计模式</strong><ul><li>不能就准备如何实现；</li><li>更多的需要知道设计模式如何在项目中如何应用与实现；</li><li>作用是什么？为了什么？</li></ul></li><li><strong>前端性能优化</strong><ul><li>4 个层面资源优化，请求优化，渲染优化，JS 优化；</li><li>每一个优化知道 1-2 种优化；</li></ul></li><li><strong>数据结构及算法</strong><ul><li>LeetCode 刷题量（每天 1-2 题），有较强的逻辑思维与能力；</li><li>以简单到中等难度为主，偶尔练一练高难度的题目；</li><li>常用数据结构：树、栈、队列等；</li><li>运用了数据结构及算法解决了什么复杂的业务问题；</li></ul></li><li><strong>源码阅读</strong><ul><li>熟悉的技术栈关键源码；</li><li>源码的实现逻辑；</li><li>懂得为什么这么实现，有什么好处，可以列举出来；</li></ul></li></ul></li></ul><p>分析出我们懂得哪些知识和有哪些我们需要加强的，<strong>我们应该怎么学习和加强呢</strong>？讲师们给到以下意见：</p><ul><li><strong>学习与加大知识库</strong>：<ul><li><strong>形成知识体系</strong><ul><li>知识点</li><li>理论</li><li>体系</li></ul></li><li><strong>学习</strong> - 输入知识<ul><li>看书 - 技术书籍、技术以外的书籍</li><li>看文章 - 博客、官方文档</li><li>源码 - 通过看懂看透底层原理</li><li>看视频 - 报课程</li></ul></li><li><strong>构建关系</strong><ul><li>思维导图 - 牢固的知识是从有树干到树杈到树叶，都是一环扣一环的</li><li><strong>5 个 Why</strong> - 构建知识脑图时的 5 大重点<ul><li><strong>背景</strong> - 技术诞生的背景以及迭代史是什么？</li><li><strong>原理</strong> - 技术原理是什么？</li><li><strong>场景</strong> - 有哪些应用场景？</li><li><strong>比较</strong> - 横向比较同类技术，各自的优点，缺点是什么？</li><li><strong>未来</strong> - 未来会支持哪些新特性？</li></ul></li></ul></li><li><strong>稳固</strong> - 费曼技巧（以教为学）<ul><li>提取压缩 - 写成自己的笔记，脑图等等，抽出知识的重点与精华</li><li>转为语言 - 明确任务、拆分知识、清理关系</li><li>列举例子 - 新例子、新视角</li><li>能教能传授 - 能教会一个不懂这门知识的人，这个知识你才是真的达到精通水平</li></ul></li></ul></li></ul><p><strong>然后我们来讲讲项目：</strong></p><p>各位讲师都反复强调，在面试的过程中我们要习惯使用<code>STAR</code>法则来剖析我们的项目经历和经验：</p><ul><li><strong>S</strong>ituation - <strong>场景</strong></li><li><strong>T</strong>arget - <strong>目标</strong></li><li><strong>A</strong>ction - <strong>行动</strong></li><li><strong>R</strong>esult - <strong>结果</strong></li></ul><p>具体表述时使用以下部分，一步一步来讲述自己的项目经验：</p><ul><li><strong>背景</strong>：项目背景，是什么情况下发生的</li><li><strong>角色</strong>：我当时承担了什么角色</li><li><strong>职责</strong>：负责工作的哪一方面，协调/开发/等等</li><li><strong>难题</strong>：遇到了什么难题，怎么解决的，为什么这么解决</li><li><strong>结果</strong>：项目结果如何，有数据支撑更有说服力</li><li><strong>沉淀</strong>：做完这个项目沉淀了什么，给别人带来了什么</li><li><strong>复盘</strong>：如果重新让你做这件事，你会怎么做，有什么更好的方案</li><li><strong>评价</strong>：项目中的表现，你周围小伙伴怎么评价的，上级怎么评价的</li></ul><p><strong>梳理“关键”经历和经验</strong>：（阶段性需要回顾经历和经验，以项目或者半年为周期）</p><ol><li>梳理<strong>2-3 个亮点项目</strong>，并能通过 STAR 法则描述<ul><li>让面试官了解，我们做了这个项目不只是为了 KAI，我们是有思考，有主动思辩思维</li><li>这个也能体现出 Owner 精神</li><li>在项目中的角色和起到的价值</li><li>工作中对团队/他人的影响（不只局限于做好自己）</li></ul></li><li>梳理<strong>人生的失败经历</strong>，传递看法、描述行为、获得成长<ul><li>“项目黄了=没有受益”？❌❗️，不是的</li><li>通过失败的经历，传递你面对失败的态度</li><li>并且能够反思自己，并加以改变，最后获得了成长</li><li>反面例子：遇到失败就堕落，抱怨，退缩，这样反而让面试官觉你逆商不够</li></ul></li><li>梳理<strong>人生的高光时刻</strong>，传递你的价值观和需求层次<ul><li>首先问自己：这件事情为什么让你觉得是人生的高光时刻？</li><li>当前处在《马斯洛》的《<a href="[https://baike.baidu.com/item/%E9%A9%AC%E6%96%AF%E6%B4%9B%E9%9C%80%E6%B1%82%E5%B1%82%E6%AC%A1%E7%90%86%E8%AE%BA/11036498?fromtitle=%E9%A9%AC%E6%96%AF%E6%B4%9B%E7%90%86%E8%AE%BA&fromid=7936858](https://baike.baidu.com/item/马斯洛需求层次理论/11036498?fromtitle=马斯洛理论&fromid=7936858)">需求层次</a>》的那个层次呢？</li></ul></li><li>梳理<strong>职业规划方向</strong>，思考未来想成为一个什么样的人？<ul><li>在面试中都是一个高频的问题</li></ul></li></ol><p>最后再多想想我们自己的经历，过往的人生中做过成功的事情和失败的事情，在这些事情当中多问自己“<strong>为什么</strong>”。<strong>为什么会成功</strong>？<strong>为什么会失败</strong>？做了什么让事情得到了好的结果，又做错了什么导致自己的失败。这个过程其实是很有趣的。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h3 id="「1-2」明确梦想公司与团队"><a href="#「1-2」明确梦想公司与团队" class="headerlink" title="「1.2」明确梦想公司与团队"></a>「1.2」明确梦想公司与团队</h3><p>在大会中讲师们也有重复强调一个点“找到合适你的公司/团队/项目”非常重要。</p><p>这个也是为什么我们第一步先要剖析自己，重新认识自己，因为只有了解自己的能力和自己是怎么样的人，才能更好的找到合适你的公司，团队和项目。</p><ul><li><strong>何为合适？</strong><ul><li>公司<ul><li>企业文化</li><li>企业价值观</li><li>企业规模</li><li>企业发展方向</li></ul></li><li>团队<ul><li>团队文化</li><li>团队价值观</li><li>团队使用的技术栈</li><li>能否让你成长</li></ul></li><li>项目<ul><li>业务是否是你感兴趣的</li><li>项目的发展方向</li><li>价值观相同</li><li>能否让你成长</li></ul></li></ul></li></ul><p>找到自己合适，有共同价值观，共同努力目标的公司和团队是完全不一样的体验。在大会中好几个候选人都分享了进入团队后的感想，这里也分享一下他们的感悟：</p><ul><li>见识到阿里工程师最基本的职业素养<ul><li>既要有过硬的前端基础技术能力打底</li><li>也要有 ONWER 意识，团队推动力，跨团队协作能力，沟通能力非常重要</li><li>优秀人才多，互相吸引，互相敦促成长，共同进退</li></ul></li><li>真-海量知识<ul><li>进来的第一周感觉知识像洪水一样涌入，技术产品和业务沉淀齐飞</li><li>有非常多的优秀知识在内网</li><li>无论是软实力还是硬实力都在压力下极速成长</li><li>完备的基础设施和工作流</li></ul></li><li>终于在国民级应用上大展拳脚<ul><li>爽，刺激，有成就感，能让很多亲朋好友都见到自己亲手写的代码</li><li>同时也面临着更大的挑战，千万级流量下更严苛的性能挑战，线上稳定性保障</li></ul></li><li>为何要选择阿里巴巴<ul><li>大平台、大公司、大机会</li></ul></li><li>为何选择淘系技术部<ul><li>稳定成熟业务体系</li><li>不缺乏创新点</li></ul></li></ul><blockquote><p>经历过这次大会，我发现人生中最重要的两个选择，也是会陪伴我们最长的，那就是<strong>梦想公司/团队</strong>和<strong>终身伴侣</strong>。</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h3 id="「1-3」准备简历"><a href="#「1-3」准备简历" class="headerlink" title="「1.3」准备简历"></a>「1.3」准备简历</h3><p>一个好的简历就像等于一块 3 级敲门砖，为我们敲开进入大厂的第一扇门。</p><p><strong>简历中需要注意的</strong>：</p><ul><li>书写原则：<ul><li>排版清晰，技术的简历模版不要“标新立异”（导出 PDF）</li><li>挑选重要、突出的优势表达</li><li>无关次要的不要表达</li><li>适度包装、不能造假</li><li>用量化指标去说明</li></ul></li><li>职位 JD：<ul><li>挑与岗位匹配的内容</li><li>岗位职责、硬技能、找差距、不齐差距</li></ul></li><li>内容排版：<ul><li>基本信息（要全面：包括邮箱、联系方式等基本信息）</li><li>专业技能（专业技能按掌、熟悉、了解程度依次罗列）</li><li>项目经验（亮点项目详细写，附带数据描述成果更具说服力）</li><li>教育背景</li></ul></li><li>简历模版<ul><li>WonderCV、五百丁</li></ul></li><li>多份简历<ul><li>不同岗位</li><li>不同公司</li><li>不同等级</li><li>以上不同的都需要针对的去调整简历内容</li></ul></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="「2-」面试技巧"><a href="#「2-」面试技巧" class="headerlink" title="「2.」面试技巧"></a>「2.」面试技巧</h2><p>任何事情要做好，首先我们要先了解清楚这个事情的来龙去脉。那面试也是一样的。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h3 id="「2-1」岗位职级"><a href="#「2-1」岗位职级" class="headerlink" title="「2.1」岗位职级"></a>「2.1」岗位职级</h3><blockquote><p>这里主要讲说的是阿里巴巴的技术岗位职级。很多时候去面试失败怀疑自己是不是哪里表现的不好，往往有可能是自己对自己的能力认知有误差。能力在 P6 时，去投了 P7 等级的岗位面试，这样结果很大可能会失败。所以首先要<strong>找到对标的岗位职级</strong>！</p></blockquote><ul><li><strong>P5 级别</strong><ul><li>独立执行既定的任务，寻找更优解</li><li>培养潜力巨大，较强学习能力</li></ul></li><li><strong>P6 级别</strong><ul><li>独挡一面，能负责多个业务模块</li><li>能团队协同做项目，担任项目 PM</li></ul></li><li><strong>P7 级别</strong><ul><li>专家，一杆到底的系统性思考</li><li>技术方案可被复制</li></ul></li></ul><p><strong>注：</strong> <strong>详细的岗位职级会在</strong>“面试官视角看面试”的部分详细讲说</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h3 id="「2-2」形象建设"><a href="#「2-2」形象建设" class="headerlink" title="「2.2」形象建设"></a>「2.2」形象建设</h3><p>在面试之前，我们要整理好自己的形象。一般来说在我们首次与陌生人相见，第一形象和眼缘是会给别人带来很大的吸引力。</p><ul><li><strong>声音形象</strong> —— 通常第一轮面试都是电话面试，所以我们都是通过声音来交流<ul><li>语速<ul><li>反面例子：语速过快导致听不清，语速过慢会让面试官失去耐心</li><li>正面例子：<strong>保持均匀的水平（一分钟大概 200 字左右）</strong></li></ul></li><li>语气<ul><li>反面例子：语气上扬太高会显得你很轻浮，不够稳重</li><li>正面例子：<strong>心平气和，温和的语气，外显的是平和、尊重与体贴</strong></li></ul></li><li>语调<ul><li>反面例子：语调太低，语调微弱，会给人感觉胆怯懦弱</li><li>正面例子：<strong>用胸腔偏下的位子发声，这样发出来的声音是雄浑有力的，不会显得很沉闷反而会有一些磁性</strong></li></ul></li></ul></li><li>外在形象<ul><li>简单、干练、不邋遢</li><li>头发洗一洗</li><li>头发鼻毛剪一剪</li><li>胡子剃一剃</li><li>穿着干净简单大方</li></ul></li><li>内在形象<ul><li>人格上吸引力</li><li>自信、踏实、皮实、乐观</li></ul></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h3 id="「2-3」面试流程"><a href="#「2-3」面试流程" class="headerlink" title="「2.3」面试流程"></a>「2.3」面试流程</h3><blockquote><p>根据各位候选人的总结，阿里面试基本上都是 5-6 轮。一般在 1-3 周左右完成。</p></blockquote><p><strong>我从几个优秀的候选人的面试经历，总结出的大概面试流程</strong>：（因为不同部门，不同团队，会更具部门要求有所差异，只供参考）</p><ul><li><strong>技术一面 - 同岗研发/直属主管</strong>（30 分钟左右）<ul><li>考察重点：基础和知识广度（专业 80% + 软素质 20%）</li><li>内容：<ul><li><strong>计算机基础</strong>：算法、数据结构</li><li><strong>前端基础</strong>：JS/CSS、前端框架、Node、浏览器原理、网络、安全、跨端能力（后端或客户端）</li><li><strong>编码能力</strong>：逻辑是否清晰、辩解是否考虑到、思维是否活跃、设计模式能否应用、方案设计与细节</li><li><strong>技术视野</strong>： 行业技术现状、新技术的了解和实战</li></ul></li></ul></li><li><strong>技术二面 - 部门主管/前端负责人</strong>（40 分钟左右）<ul><li>考察重点：工程能力、设计能力、规划能力（专业 60% + 软素质 40%）</li><li>内容：<ul><li><strong>工程能力</strong>：效率、质量、性能、定义标准、产出规范</li><li><strong>设计能力</strong>：抽象能力、拆解能力、健壮性、扩展性</li><li><strong>规划能力</strong>：做事的思路是什么</li><li><strong>沟通和推动力</strong>：是否有一套自己的项目推动方法和成功案例</li><li><strong>产品意识</strong>：事情的目标是什么？存在哪些问题？如何解决？价值体现在哪里？规范？共建（也就是项目 STAR 讲述过程）</li><li><strong>其他软实力</strong>：聪明程度、学习能力、责任心、价值观等。</li></ul></li></ul></li><li><strong>技术三面 - 部门 TL/总经理</strong>（100 分钟左右）<ul><li>考察重点：技术格局和视野、人生规划、软技能考察</li><li>内容：<ul><li>沟通表达能力</li><li>工程架构能力</li><li>业务/行业思考理解</li><li>综合能力与成长性</li><li>PS：这一轮有可能出现笔试</li></ul></li></ul></li><li><strong>技术四面 - 交叉面</strong>（20 分钟左右）<ul><li>考察重点：项目经验、价值和解决问题能力</li><li>内容：<ul><li>方案选型与设计细节</li></ul></li></ul></li><li><strong>技术五面 - 大 BOSS/HRG</strong>（60 分钟左右）<ul><li>考察重点：项目中的亮点技术方案、业务能力、抗压能力</li><li>内容：<ul><li>HR 更注重软实力</li><li>综合能力与成长性</li><li>人才调性与匹配度</li><li>发展与薪酬待遇</li></ul></li></ul></li></ul><blockquote><p>如果面试官觉得还需要深入了解或者确定候选人的能力，还会加多一轮交叉面试。主要还是为了能对候选人有一个公平公正的评估，让候选人能拿到与能力相配比的岗位职级。</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h3 id="「2-4-」面试技巧"><a href="#「2-4-」面试技巧" class="headerlink" title="「2.4 」面试技巧"></a>「2.4 」面试技巧</h3><p>这次大会中候选人提出了很多不同的面试技巧，这里我总结了我觉得最实用的技巧分享给大家。</p><h4 id="面试模拟"><a href="#面试模拟" class="headerlink" title="面试模拟"></a>面试模拟</h4><ul><li><strong>自我模拟</strong><ul><li>讲给自己听</li><li>讲给朋友听</li><li>找一个在你水平之上的前辈模拟面试</li></ul></li><li><strong>实战模拟</strong><ul><li>收集反馈</li><li>分析问题</li><li>自我调整</li><li>反复实战</li></ul></li></ul><h4 id="沟通技巧"><a href="#沟通技巧" class="headerlink" title="沟通技巧"></a>沟通技巧</h4><ul><li><strong>沟通原则</strong> ——<ul><li>客观描述事实，不做主观臆断</li></ul></li><li><strong>三说</strong> ——<ul><li>知道的知识-自信说</li><li>模糊的知识-假设说（分情况说）</li><li>陌生的知识-诚实说（比如说我的知识还没有接触到这一块，“但是”我知道什么什么，我可以跟你聊什么什么，把不擅长的话题往你知道的带）</li></ul></li><li><strong>三不说</strong> ——<ul><li>不说谎话</li><li>不说抱怨的话</li><li>不说轻浮的话</li></ul></li></ul><h4 id="面试节凑"><a href="#面试节凑" class="headerlink" title="面试节凑"></a>面试节凑</h4><ul><li><strong>引导对方</strong><ul><li>每个面试官会问的问题都是无法预测的</li><li>所以我们可以引导面试官问我们擅长的问题</li><li>知识点 A 引申出知识点 B、C，预埋问题坑位，引导对方提问</li><li>注意重点还是要在回答 A 上，顺带 B 和 C 来做引导下一个问题的主题</li></ul></li><li><strong>渲染情绪</strong><ul><li>在面试的时候要多感知对方的情绪</li><li>感知对方情绪，判断策略，引发对方的共情</li><li>特别是我们有高光时刻，这些是很容易让别人产生共情的</li></ul></li><li><strong>反问阶段</strong><ul><li>如果在这个阶段不知道问什么的时候，有一个保守的问法</li><li>了解对方团队、技术栈、痛点问题、组织定位</li></ul></li></ul><h4 id="面试后加微信"><a href="#面试后加微信" class="headerlink" title="面试后加微信"></a>面试后加微信</h4><ul><li><strong>夸赞对方</strong> —— 夸赞对方在技术领域的专业性</li><li><strong>承认不足</strong> —— 勇敢承认自己当前的不足</li><li><strong>询问建议</strong> —— 询问从面试官视角给予你未来的建议</li><li><strong>建立人脉</strong> —— 弱关系，未来关键时刻能帮上你</li></ul><h4 id="面试复盘"><a href="#面试复盘" class="headerlink" title="面试复盘"></a>面试复盘</h4><ul><li><strong>复盘结果</strong> —— 梳理答的好/不好的知识点，记录，找差距，反复实践</li><li><strong>复盘情绪</strong> —— 回忆面试那种情绪占比多，紧张、开始、严肃、调整心态</li></ul><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020060400334394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="「二」面试官视角说招聘"><a href="#「二」面试官视角说招聘" class="headerlink" title="「二」面试官视角说招聘"></a>「二」面试官视角说招聘</h1><p>站在候选人（面试者）的视角，我们总是会去思考面试官会怎么面试我们，需要我们具备什么技能和能力，拥有哪些人格魅力与高光点。这一次大会有一半讲师都是从面试官的视角来讲招聘。我们一起来学习，会对我们求职的过程中有很大的帮助。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="「1-」简历来源渠道"><a href="#「1-」简历来源渠道" class="headerlink" title="「1.」简历来源渠道"></a>「1.」简历来源渠道</h2><p><img src="https://img-blog.csdnimg.cn/20200604003358706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><ul><li>熟人内推 （推荐 👍👍👍）</li><li>猎头（推荐 👍）</li><li>招聘平台 - BOSS 直聘，拉钩等</li><li>技术大会 - （推荐 👍👍）各类技术大会，会在现场互相认识加微信获得机会</li><li>社区 - 通过朋友圈或者其他活动社交</li><li>自主投递 - 邮箱投递</li></ul><blockquote><p>虽然说每个大公司和团队都有在各个渠道上去招聘。但是<strong>占比最大还是内推</strong>，毕竟是熟人内推，比其他渠道更可靠，加上有内部朋友背书，TL 会更加认真对待。所以“<strong>推荐简历投递渠道：熟人内推、猎头、技术大会和社区</strong>”。</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="「2-」对候选人的要求"><a href="#「2-」对候选人的要求" class="headerlink" title="「2.」对候选人的要求"></a>「2.」对候选人的要求</h2><blockquote><p>大会上几个讲师都有讲到这个，优秀的团队都会看重候选人身上是否拥有以下特征。</p></blockquote><h3 id="「2-1」优势特征-能通过的候选人"><a href="#「2-1」优势特征-能通过的候选人" class="headerlink" title="「2.1」优势特征 - 能通过的候选人"></a>「2.1」优势特征 - 能通过的候选人</h3><ul><li>基本功扎实<ul><li>良好的技术基本功（计算机基础，前端基础，框架应用与底层原理等等）</li><li>良好的开发流程理解</li><li>对既往负责业务的理解</li><li>Api 外对原理的一定探究</li></ul></li><li>要性强<ul><li>良好的主动性</li><li>能主动探索更多可能性</li><li>对平庸的低忍耐</li><li>抓机会及落地能力</li></ul></li><li>证明自己<ul><li>主导过的业务</li><li>推动过的建设</li><li>解决过的复杂度</li><li>个人作品</li></ul></li><li>较好的认知<ul><li>非被动执行思维</li><li>对技术的嗅觉</li><li>非二元论认知</li><li>良好的合作性格</li></ul></li></ul><h3 id="「2-2」共性问题-未通过的候选人"><a href="#「2-2」共性问题-未通过的候选人" class="headerlink" title="「2.2」共性问题 - 未通过的候选人"></a>「2.2」共性问题 - 未通过的候选人</h3><ul><li>专业能力的问题<ul><li>相关基本工不行</li><li>7 年时间 2 年工作经验</li><li>4 年销售自学前端 2 年 - 基本不是热爱前端知识为了分工作的</li><li>面试沟通一直外围绕圈子</li></ul></li><li>职业能力问题<ul><li>3 年 4 条（稳定性）</li><li>基本的沟通能力堪忧</li><li>业务经验差，被动执行</li><li>综合深度浅，做完而已</li></ul></li><li>性格问题<ul><li>二元轮认知 - 解决问题的态度要正面，找到成功的可能，不是对立项目的问题；</li><li>偏执型人格</li></ul></li><li>匹配度问题<ul><li>简历造假（诚信是红线）</li><li>匹配度（双向阶段匹配）</li><li>背调，口碑</li><li>背面经，过度包装自己</li></ul></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="「3-」岗位剖析"><a href="#「3-」岗位剖析" class="headerlink" title="「3.」岗位剖析"></a>「3.」岗位剖析</h2><p><strong>层级关键能力</strong>：</p><ul><li>P4 - 前端工程师（做完）<ul><li>独立承担，独立执行</li></ul></li><li>P5 - 高级前端工程师（做好）<ul><li>能思考并践行如何能做得更好</li></ul></li><li>P6 - 资深前端工程师（影响）<ul><li>通过影响和带动他人，帮助业务和团队拿到更好的结果</li></ul></li><li>P7 - 前端技术专家（改变）<ul><li>前瞻性、目标感、主导性、整合力</li><li>推动力、拿结果、影响力、领导力</li></ul></li></ul><p><strong>P6 为例，P6 的关键能力拆解</strong>：</p><ul><li><strong>专业能力</strong>：<ul><li>良好的基础知识及运用能力</li><li>熟悉常用规范、类库及周边应用</li><li>能完成相对复杂前端技术方案设计</li><li>快速定位及解决疑难杂症的能力</li><li>一定的 Node.js 或其他服务端语言能力</li></ul></li><li><strong>职业能力</strong>：<ul><li>良好的沟通，沟通及时有效</li><li>独立的前端业务接口能力</li><li>领导跨部门项目的 PM 能力</li><li>理解业务优先级，有效管理业务预期</li><li>跳出前端看问题，寻找最优解方案</li></ul></li><li><strong>场景方案</strong>：<ul><li>业务场景的有效方案沉淀</li><li>能承担团队体系内某专项的建设突破</li><li>思考处理业务场景/问题的通用方式</li><li>通过处理一个问题，解决一类问题</li><li>考虑必要的投入产出比</li></ul></li><li><strong>推动及落地能力</strong>：<ul><li>抓住工作重点，解决关键问题</li><li>主导职能领域某一方面的建设</li><li>有效利用团队的力量获取最大的结果</li><li>规划路径，落地既定目标，永不放弃</li></ul></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="「4-」面试必要准备"><a href="#「4-」面试必要准备" class="headerlink" title="「4.」面试必要准备"></a>「4.」面试必要准备</h2><ul><li><strong>表述清晰的简历 （10%）</strong><ul><li>真实陈述，勿造假</li><li>避免关键词堆砌，空洞</li><li>倒序，提炼，避免“万字文”</li><li>PDF 格式优先</li></ul></li><li><strong>必要的基本功复习（30%）</strong><ul><li>前端三件套</li><li>基础的算法</li><li>常见的业务场景方案</li><li>别背概念，有价值的是如何应用</li></ul></li><li><strong>复盘既往工作中的价值（50%）</strong><ul><li>背景、角色、过程、结果</li><li>重点要体现个人生产的影响</li><li>减少执行性陈述的堆砌</li><li>结构性认知、体系化思维（如有）</li><li>过去一段时间最大的成长</li></ul></li><li><strong>自己后续的职业规划（10%）</strong><ul><li>目前的成长短板</li><li>后续的职业成长方向</li><li>这个方向需要什么样的空间</li><li>为新团队带来的价值是什么</li><li>什么能放大你的价值</li></ul></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="「5-」面试官的面试方法"><a href="#「5-」面试官的面试方法" class="headerlink" title="「5.」面试官的面试方法"></a>「5.」面试官的面试方法</h2><p>一般都会从“<strong>聊聊最深刻的项目</strong>”开始，在深入到以下点：</p><ul><li><strong>业务目标</strong> - 对业务了解是否清楚</li><li><strong>方案选型</strong> - 有没有符合逻辑的思考</li><li><strong>技术细节</strong> - 了解是不是比较深入，基础知识的考查</li><li><strong>最终结果</strong> - 拿结果的能力，是不是可量化的，比如性能优化，最后有没有一些明确数据来证明</li><li><strong>学习思辨</strong> - 思维，思考，思辨，学习的能力，是否有潜力</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="「6-」应聘建议"><a href="#「6-」应聘建议" class="headerlink" title="「6.」应聘建议"></a>「6.」应聘建议</h2><ul><li><strong>第一印象</strong>：<ul><li>一份有诚意的简历</li><li>👍 项目罗列要突显项目的亮点和思考</li><li>👎 如果以流水账的形式列举就会有不好的印象了</li></ul></li><li><strong>明确意向</strong>：<ul><li>明确个人诉求，确定目标团队</li><li>👍 懂得自己想要什么，确定自己的目标团队</li><li>👎 不希望是大海捞针，随便乱头，碰碰运气</li></ul></li><li><strong>回顾总结</strong>：<ul><li>过去的工作经历、沉淀、成长、收获</li><li>面试之前需要提前准备好</li></ul></li><li><strong>自我认知</strong>：<ul><li>给自己的定位</li><li>有哪些核心竞争力和不足</li></ul></li><li><strong>面谈技巧</strong>：<ul><li>STAR （SITUATION / TARGET / ACTION / RESULT）</li><li>根据 STAR 原则来应对和面对问题</li></ul></li><li><strong>面试复盘</strong>：<ul><li>不管成功还是失败</li><li>总结自己面试中的表现、经验教训</li></ul></li><li><strong>面试中的误区</strong>：<ul><li>不要死记硬背概念、知识速成、海量刷题<ul><li>可做适量的准备，但是不要为了面试而面试</li></ul></li><li>不要一问一答、不问不答、话唠、东扯西扯<ul><li>找到自己答案中的明确目标和中心点，讲重点，不要跑题</li><li>勿辩解，忌装懂</li><li>可以从中心点扩张，不止于现状，寻求更优方案</li></ul></li><li>不知道自己是谁、自己有什么、自己要什么、该去往何处<ul><li>目前定位是什么</li><li>核心竞争力是什么</li><li>自己未来的规划是什么）</li></ul></li><li>诚信问题！不要造假，不要造假，不要造假<ul><li>出现诚信问题，以后就与面试的公司说 88 了</li></ul></li><li>尾声时没有问问题<ul><li>这个时候可以补充自己的一些亮点</li><li>别错过咨询面试官的机会</li><li>主动加面试官微信，可以继续练习加深第二印象</li></ul></li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://img-blog.csdnimg.cn/20200604003421789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="「三」Q-amp-A-问答环节"><a href="#「三」Q-amp-A-问答环节" class="headerlink" title="「三」Q&amp;A - 问答环节"></a>「三」Q&amp;A - 问答环节</h1><p><strong>问：如何看懂源码？</strong></p><ul><li>先从使用场景开始深挖源码；</li><li>了解在这个场景下的实现逻辑；</li><li>然后再从大局的原理来理解；</li><li>不要焦急一下子了解全部源码；</li></ul><p><strong>问：工作中项目没有亮点？</strong></p><ul><li>跟面试官反馈让自己负责更难更大的事情；</li><li>归纳总结，有自我思考那些简单的业务有什么提升点，用什么技术点可以更好的提高；</li><li>提出自己的优化方案，和提高项目技术的方案；</li></ul><p><strong>问：怎么克服业务代码的瓶颈？</strong></p><ul><li>只有做业务才能成为专家</li><li>还在执行认知，还在想着怎么做完，没有思考怎么才能做的更好</li><li>代码的分层架构，组件化，设计合理性等方面</li><li>如何跟业务方保持好良好的沟通</li><li>通过定义一个问题来定义一种问题，解决一个问题，解决一种问题。</li></ul><p><strong>问：业务执行转架构师怎么做？</strong></p><ul><li>用通用方式来解决问题</li><li>架构师不能脱离业务，要深度了解业务</li><li>业务的玩法，运作方式，前端开发中遇到的问题，找落地方案</li><li>落地方案：面线业务的整个闭环 - 团队最大的痛点（人效，成本，体验）</li><li>深入了解业务，再开始深入开始架构</li><li>尝新最新的技术架构选型要优先考虑团队</li></ul><p><strong>问：跳槽太平凡可以进入大厂吗？（在小公司）</strong></p><ul><li>你女朋友过去两年换了 5 个男朋友你会怎么想？</li><li>公司都是看长期受益的，跳的太平凡都是影响你的稳定性和信誉的。</li><li>有人给你做背书能为你争取；（内推，有朋友在内部）</li><li>先降低你的预期，下一个工作挑一个好的公司稳定一下，沉淀一下；</li></ul><p><strong>问：如何控制面试阿里的面试频率？一次面试简历会锁多久？</strong></p><ul><li>按照我自己的经历来说，并没有锁的概念</li><li>我失败过一次之后，我还是会被其他面试官撩起来邀请过来面试</li><li>如果同学想要去阿里的话，还是建议好好复习</li></ul><p><strong>问： 请问蚂蚁金服招人是否有年龄上的限制？或者有更细的年龄分成？比如：30 岁只有 P7 才能进入</strong></p><ul><li>确实是不能很详细说的，年龄不是最重要的考核标准</li><li>在 P6 这样一个起步的职位要求，是希望有独当一面，辅助团队的能力</li><li>比如说应届生或者工作 1 年左右经验的是不太有这些沉淀（一般情况来说，但是也有个别的）</li><li>所以更看重的是有一些 2-3 年工作经验以上的沉淀的，这样会更合适</li><li>像 P7 需要有一写领域深入的理解，一般没有长期的沉淀是不可能符合的（也有同学工作 1-2 年就沉淀了很多很多，所以一加入进来就 P7 了）</li><li>总的来说我们都建议不同的层级有一定时间的沉淀，但是这个是建议不是要求</li></ul><p><strong>问： 在前端打磨了 9 年，目前技术专家级别刚入职，但是心里有一个阿里梦，再过两年阿里还要我这样的人么？请问阿里对学历有什么要求？</strong></p><ul><li>不管是几年，只要你的能力能达到你的发展的状况，比如说工作了 9 年，你是的能力是否能与你的工龄相匹配，能在一个领域里面成为一个专家。然后通过这些年的沉淀，在各个方面都有全面的知识沉淀和成长。只要是能够有对应这个能力的成长的话，都是能够进入到面试，也可能会成功。</li><li>重点是自己技术的成长，能对的起自己那么多年的沉淀和学习。</li><li>学历来说，举个例子，我团队这里也有专科学历毕业的，重点还是能力和亮点，能搞证明自己的技术实力，这些不是学历能够达到的。（但是也要看团队，像钉钉就不接受专科）</li></ul><p><strong>问：工作了 2 年不是主动的情况下换了 3 加公司，如果这种情况想进大厂的话，会不会经历太平凡受到影响呢？</strong></p><ul><li>分两个层面，主动和被动跳槽，不会一刀切</li><li>我们都会详细了解跳槽背后的原因是什么</li><li>但是经常换公司会对自己沉淀和成长有一定的影响的</li><li>所以频繁跳槽还是会有一定影响，但是不绝对，还是要看个人实力和沉淀</li></ul><p><strong>问：是什么帮助你在技术上和认识上的到一个很好的修炼呢？</strong></p><ul><li>技术上更多是兴趣吧，因为接触的比较早，在技术上就是要不断的去尝试和不同的方面，一定要找自己感兴趣的方向，因为兴趣还是一个重要的老师，让自己去探索技术里面的价值和潜力所在。</li><li>认知的话更多的是数学思维，数学对我的帮助是非常大的。它能让我去理解一些从代码角度很难理解的事情，也让我能更好的理解需求和代码上的解耦。</li></ul><p><strong>问：平时是如何学习新东西的呢？</strong></p><ul><li>这个我也会问候选人这个问题。一般来说每天开始，到公司之前我都会浏览一下科技型的网站。一方面拓宽自己的视野，慢慢这些知识会形成你自己的一个理解之后，就可以分析自己需要深挖的领域或者感兴趣的领域。</li><li>这个前提是非常重要的，如果我们盲目去接触新的领域和框架，自己的精力会非常分散。所以我一般都会经常去听一些业界的声音，大家对这些事情的评论。先从对方的一个主管角度去接收到这些信息，这个可以帮助自己有一个大局观，了解到业界在做一些什么，大家对某一些事情的理解是怎么样的。慢慢变成自己的理解以后你就知道应该去学一些什么知识了</li><li>到了想如何去学习这个知识的时候，那就相对比较简单，因为肯定有很多人，或者某一个知识领域推荐有哪些书籍是最佳实践，最后去找这些书籍去看就好了。</li><li>重点是在这个过程你要非常明确你想要的是什么，千万不要今天出了几个知识点或者框架，我先去把它吃透了，我们要把精力集中在一个你希望深入的领域去探索。忌“什么我都要”，“什么我都会”，这个样是不可取的。</li></ul><p><strong>问：你是怎么成长起来的呢？你是怎么安排自己的时间管理？</strong></p><ul><li>在业务中多思考，在工作中时间太精凑无法思考，所以这个时候可以考虑在业务中提升自己的能力。站在业务的指点上去学习新的技能和知识。然后在日常积累和封装成论证，放到 GitHub 上，让更多的人给你建议，这样也能提升自己的能力。</li><li>算法上必须每天去 LeetCode 进行练习，每天抽半个小时去刷题，对自己不熟悉的题要反复的去练习。慢慢自己就会慢慢好起来了。算法这一块知识会对你学习新知识会有很大的帮助。</li><li>现在新技术勤出不穷，你要学会在一些网站上去关注一下这些新技术，用自己以往的经历来去对这些新技术的原理有基本的认识，考虑为什么要出这个技术，这个技术给我带来的技术方向是什么，我以后要朝着什么方向学习。</li><li>最后尽量去大厂吧，大厂的话像阿里巴巴这样的平台，学习资源有很多。会发现以前你花很多时间解决的问题，在内网看一篇文章就能解决了。</li></ul><p><strong>问：你负责那么多方向，你是怎么兼备的呢？</strong></p><ul><li>作为一个 Leader 你要为你的团队找到方向，打开更多的空间。只有帮你的团队往上打开的空间足够大之后，你团队下的小伙伴才能朝着这个方向有足够的发展。</li><li>让团队每一个同学找到位子，能好好的做事，做的事情能得到公平公正的回报。</li><li>根据发展来设计团队的方向。</li><li>更空闲之后就会关注技术方向和落地。</li><li>如何兼备其实重点在于更具事情和阶段来动态调配。</li></ul><p><strong>问：阿里 P7 有哪些具象的要求？要做一些什么事情？</strong></p><ul><li>技术开发的核心骨干，写代码写的好写的快是基本要求。</li><li>在本专业的技术深度和广度要足够。</li><li>懂如何分析综合性问题的能力。</li><li>技术选型方案，并且与其他团队做到更好的落地。</li><li>技术量级应该如何应对。</li></ul><p><strong>问：腾讯与阿里那个更适合上升期的发展？</strong></p><ul><li>前端时间我和腾讯的一些朋友聚在一起讨论我应该去那种公司/团队呢？技术好的？还是钱多的？其实都不对，应该加入成长性更大的团队。</li><li>主要看这个部门和团队的业务成长性暴发性更大的。无乱是阿里巴巴还是腾讯都在众多的领域中有他的规划，重点还是业务和成长性更高的团队。</li></ul><p><strong>问：候选人面试的准备，阅读源码是不是重要的一项？</strong></p><ul><li>有源码阅读经验的同学是非常喜欢的，比如说度过 React，Vue，webpack 的源码等，我们就能判断这个小伙伴对于这一块技术有浓厚的兴趣和专研。</li></ul><p><strong>问：前端有没有遇到过瓶颈期，是怎么突破的呢？</strong></p><ul><li>当时在创业公司待了三年，一个小团队，没有什么学习氛围。如果当时我停下来拿肯定就废了。</li><li>那那时候是怎么做的呢？持续关注行业的动态，注意最流行的技术趋势是什么，我们的业务可能会需要什么。当时创业的时候还写了 node.js 的书。</li><li>当时也是很累的，晚上 12 点回到家继续看博客总结继续输出。</li><li>当时团队需要我做什么我就去接什么，当时做的最杂的时候，前端，PHP，nodejs，甚至最后 C++，IOS 都会接触到。</li><li>遇到瓶颈的时候问自己一个事情<ul><li>现在自己想往那个方面去发展？</li><li>当前业务，团队甚至是集团需要你去做什么？</li><li>回答以上两个问题，基本上你就可以知道一个答案了</li></ul></li></ul><p><strong>问：跨行业面试有什么要求（转行的）？</strong></p><ul><li>这个同学应该说是之前做的是两外一个行业，然后对前端特别热爱。</li><li>面试这种跨行业的话，一般来说都会看这个同学的潜力。</li><li>重点看有没有什么 demo 或者业余参与过开源项目，甚至是一些分享或者看源码。还有是怎么学习的。</li><li>做过的一些项目，小 demo 是有深度的，这样话还是可以进来。</li><li>在团队中也有不是科班出生的，具体看硬实力如何，还是可以接受的。</li></ul><p><strong>问：面试过程中，面试者提出哪些问题能带来好感？</strong></p><ul><li>在面试过程中，有一些同学会问我一些技术点，但是我不推荐问这个，因为技术点都是可以查到的。</li><li>最好是问一些开放性的问题，团队负责的业务时什么？然后团队未来的发展方向是什么？</li><li>或者问面试官一些给自己的建议。</li></ul><p><strong>问：新进的团队 Leader 可以如何做好团队管理？</strong></p><ul><li>第一点尽快和团队的同学建立连接，产生彼此的信任。</li><li>明确这个团队的一些规则，就是这个团队的要和不要。</li><li>帮助这个团队找到明确方向，获取更多的业务输入，知道团队现状，然后定制团队日后的方向。</li><li>给团队中的每一个人找到自己的赛道，然后让每个人在业务支撑的过程中拿到业务结果和技术的积累，然后可以阶段性的到回报，可以是技术提升，绩效上的，或者是综合能力的提升。</li></ul><p><strong>问：你在研究自己性格探索自己的时候是怎么改变的？去挑战自己最大的恐惧，想问问你是怎么克服的？</strong></p><ul><li>当你真正意思到你自己必须去改变了，如果不改变未来就只有一个结果了，碌碌无为。</li><li>内心信念感和目标感有没有？如果你有一个去阿里的目标，那就从一个想法落实到行为这样一个改变。</li></ul><p><strong>问：多次听到需要 Github 的积累，一般是哪一些方面的积累呢？</strong></p><ul><li>文章和项目都是一部分</li><li>比如说 Github 上有很多一些面试的面经，大家都可以去刷一刷</li><li>但是上面的内容都是比较浅显的，都是需要我们在这个基础上做一些扩张和加上自己的思考</li><li>然后在项目中沉淀下来变成自己的东西，在通过自己的话说出来让别人你是真的有去实现过的</li></ul><p><strong>问：技术产出方面有没有自己的日计划，周计划或者月计划？怎么督促自己去学习的？</strong></p><ul><li>我自己的技术产出计划是跟着项目走的，比如说一个项目它的周期是一个月或者一个季度的情况下，那我就会在项目的最后的复盘阶段去做一些梳理，包括我在这个项目当中经历了一些什么，当初遇到的困难和一些知识点。最后以文档的形式记录下来。</li></ul><p><strong>问：女性开发者想转管理岗位，那么日常需要培养哪些方面，或者说有哪些一职业规划上的知道意见？</strong></p><ul><li>这个问题背后是女性比起男生的优势在哪里呢？女生是心更细的，女生在人上的感觉是更好的，在现在社会上没有绝对的男女之间的差异性哈。</li><li>如果说女性网管理岗位走，你要在管理岗位上解决什么问题？是带着这个团队去把商业行为给做好，首先你需要对这个业务的理解能力，需要做什么事情能让这个业务更好，走的更远，你需要一个什么样的团队，给团队提要求，需要什么人，这些人大概要什么样的水平。需要构建什么能力，搭建一个什么系统，最后能把这个业务描述出来。</li><li>这个只是当下的一个切面哈，然后长期往前走的时候，怎么把这个团队的人的战斗力提升起来，团队的技术选型是什么？团队成长空间在哪里？才能留得住人，或者才能招更多的人进来。</li><li>在事情上，切面后往前推进了，人往前推进，事也要往前推进。今天这个事情做的好不好，线上监控，反馈渠道，数据化，产品化的东西都要往前推进。</li><li>综合来看的话，我们发现往管理岗走，技术就可以放下了，这个其实是有个误区的。如果今天你的技术这块放下了，对业务的判断，对技术的判断，对团队成长的建议就可能会更不上。做管理也有阶段性的时候自己要针对性的去补知识。所以不建议做管理时过早的去放弃技术的。</li><li>今天在技术的基础上，要求做管理有更多的人上和横向的能力，像沟通能力，项目能力，对业务的认知能力等等。</li></ul><p><strong>问：现在前端技术日新月异，有很多知识学过之后又没有怎么使用，过了一两个月就基本上忘了，针对这种情况有没有什么好的建议？</strong></p><ul><li>这个是一个很好的问题，不只是对你们，甚至对我自己也是这样子的。</li><li>有的时候前端还是挺残忍的，发展那么快，学的东西那么多。</li><li>其实这个就有点像一个武器库一样，各式各样好的武器都有。今天一个好的前端工程师是不见的要把所有武器都需要会用的。</li><li>有几个建议：<ul><li>当下你的业务，你的团队需要你拥有什么样的能力，那就先去练这一部分能力。为什么呢？因为这个能力不是空学的，因为空学太难了，是学了之后就能用的，可以投入实战的，通过实战结合业务去加强，很多项目中就可以用了，知识就真的变成自己的了。就不会学会了不能用，过一段时间就忘了。</li><li>结合兴趣和目标，比如说今天在做 React 的一些事情，但是我以后就一定要做游戏，我一定要去做 Node。如果今天你有带着这种目标感，带着这种个人兴趣去做想做的事情，那就做做开源项目，或者做做私人项目模仿着去做项目。肯定是需要去做去用的，不能只是理论。今天我们不能够什么都想学，或者贪多。最后发现什么都没有学好，我们一定要学好了就能用，结合着业务或者自己的兴趣去做的。</li><li>时间轴上的，一个人的精力是非常有限的，不可能什么都能做的很好。那是一定有取舍的，那么取舍就是当下阶段做什么，第二个阶段做什么，第三个阶段做什么，要这样一个方式去学。然后需要阶段性进行总结，看看最近学习的效果怎么样，如果有效果就坚持，如果没有效果就要复盘，找到为什么没有效果，一定要找问题。通过反思和总结才能知道从我强力意愿去学习到落地到行动，中间有没有变形，自己有没有真的去做到。</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="「四」推荐书籍"><a href="#「四」推荐书籍" class="headerlink" title="「四」推荐书籍"></a>「四」推荐书籍</h1><center><img src="https://img-blog.csdnimg.cn/20200604101431255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" width="50%"></center><center><strong>《JavaScript设计模式》</strong></center><br><ul><li><strong>出版社</strong>：人民邮电出版社</li><li><strong>作者</strong>：张容铭</li><li><strong>推荐理由</strong>：此书以一个小白为视角，通过各种场景引出设计模式的使用，比较舍和刚接触设计模式的小伙伴。</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><center><img src="https://img-blog.csdnimg.cn/20200604084910775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" width="50%"></center><center><strong>《超越CSS》—— Web 设计艺术精髓</strong></center><br><ul><li><strong>出版社</strong>：人民邮电出版社</li><li><strong>作者</strong>：Andy Clarke</li><li><strong>推荐理由</strong>：“人会失败，会死去，但思想会永远留下来。”<br>“时间的流逝，并不影响本书对 HTML 结构、CSS 样式深刻理解和优雅应用的智慧高光。本书在代码的艺术思维及审美高度，并非 Well Done 而是更高阶的 Beyond。”</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><center><img src="https://img-blog.csdnimg.cn/2020060410123224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" width="50%"></center><center><strong>《重构》—— 改善既有代码的设计</strong></center><br><ul><li><strong>出版社</strong>：人民邮电出版社</li><li><strong>作者</strong>：马丁·福勒（Martin Fowler）</li><li><strong>推荐理由</strong>：“必须谨记，为代码建立必要的单元测试，怎么强调都不过分。 在提取方法时，对变量的处理需要慎之又慎，特别当方法体中存在多个变量，且需要改变其值时。 自以为是的技术高手常喜欢改动大段代码，而不是审慎地按照小步骤进行，这总是会给他们带来麻烦。”</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><center><img src="https://img-blog.csdnimg.cn/20200604101139961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" width="50%"></center><center><strong>《贝叶斯思维》—— 统计建模的Python学习法</strong></center><br><ul><li><strong>出版社</strong>：人民邮电出版社</li><li><strong>作者</strong>：[美] Allen B. Downey（艾伦·唐尼）</li><li><strong>推荐理由</strong>：“贝叶斯思维让我们在开发或者思考为题上有更好的思维逻辑方式，学习统计方法能够让我们对问题/需求解耦，去整理思路是一个非常有帮助。”</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><center><img src="https://img-blog.csdnimg.cn/20200604102938520.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" width="50%"></center><center><strong>《为什么》—— 关于因果关系的新科学</strong></center><br><ul><li><strong>出版社</strong>：中信出版集团股份有限公司</li><li><strong>作者</strong>：[美] 朱迪亚·珀尔(Judea Pearl) / [美] 达纳·麦肯齐(Dana Mackenzie)</li><li><strong>推荐理由</strong>：“是一本非常有价值和融合了非常多学科的书，从生物学到则学到计算机科学到人工资能都包含。锻炼我们的思维方式的。”</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><center><img src="https://img-blog.csdnimg.cn/20200604133925566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" width="50%"></center><center><strong>《系统之美》—— 决策者的系统思考</strong></center><br><ul><li><strong>出版社</strong>：浙江人民出版社</li><li><strong>作者</strong>：[美] 德内拉·梅多斯</li><li><strong>推荐理由</strong>：“一本大智慧的书，教你用系统理论思考和分析问题。我很多年前度过一遍，虽然已经忘记了内容，但已永远改变了我。”</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><center><img src="https://img-blog.csdnimg.cn/20200604134343260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" width="50%"></center><center>《影响力》—— INFLUENCE</center><ul><li><strong>出版社</strong>：万卷出版公司</li><li><strong>作者</strong>：罗伯特•B•西奥迪尼 (Robert B. Cialdini)</li><li><strong>推荐理由</strong>：“不管是在生活还是工作当中，影响力的作用无处不在。合理地运用影响力，能够有效地促成合作，减少冲突，从而顺利高效地达到目标。《影响力》总结了打造影响力的几个关键因素，如互惠、承诺与一致、权威、短缺、喜好等。如果你在思索如何提升自己的技术影响力、团队影响力、组织影响力，那么，在本书中可能有你想要的答案。”</li></ul><p><img src="" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><center><img src="https://img-blog.csdnimg.cn/20200604134939372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" width="50%"></center><center><strong>《深入理解计算机系统》—— 原书第3版</strong></center><br><ul><li><strong>出版社</strong>：机械工业出版社</li><li><strong>作者</strong>：Randal E.Bryant / David O’Hallaron</li><li><strong>推荐理由</strong>：“前端是一个技能，不要把他当做一个角色，希望前端同学能够多掌握一些计算机系统知识，做一专多能的人才！”</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><center><img src="https://img-blog.csdnimg.cn/20200604135516304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" width="50%"></center><center><strong>《横向领导力》—— 不是主管，如何带人成事？</strong></center><br><ul><li><strong>出版社</strong>：北京联合出版公司·后浪出版公司</li><li><strong>作者</strong>：[美]罗杰·费希尔（Roger Fisher） / 艾伦·夏普（Alan Sharp）</li><li><strong>推荐理由</strong>：“只有“一把手”才能领导是职场最大的误区，只懂自己带人可以维持团队绩效，让每个员工都懂得带人才能成倍提升团队执行力！就算是神一样的管理者，也带不好猪一样的员工。培养员工的横向领导意识，促使员工主动参与团队建设，才能把整个团队拧成一股绳，爆发惊人的战斗力。”</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><center><img src="https://img-blog.csdnimg.cn/20200604140145152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" width="50%"></center><center><strong>《授权》—— 如何激发全员领导力</strong></center><br><ul><li><strong>出版社</strong>：中信出版社</li><li><strong>作者</strong>：[美] L.大卫·马凯特</li><li><strong>推荐理由</strong>：“领导力是一种释放人类才智和潜能的艺术。你也许可以通过金钱、职位、权力或胁迫获取某人的支持，但是才智、激情、忠诚和顽强拼搏的精神只能建立在个人意愿的前提下。无论你处于组织系统的哪个位置，你都需要阅读本书。”</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><center><img src="https://img-blog.csdnimg.cn/20200604140527716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" width="50%"></center><center><strong>《金字塔原理》—— 思考、表达和解决问题的逻辑</strong></center><br><ul><li><strong>出版社</strong>：南海出版公司</li><li><strong>作者</strong>：[美]芭芭拉•明托</li><li><strong>推荐理由</strong>：“介绍了一种能清晰地展现思路的高效方法，是训练思考、使表达呈现逻辑性的实用宝典。金字塔原理能将零散的观点有序组织起来，化繁为简，适合所有需要精进思考、分析、表达能力的读者。”</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><center><img src="https://img-blog.csdnimg.cn/20200604140801757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" width="50%"></center><center><strong>《金字塔原理》—— 心智成熟的旅程</strong></center><br><ul><li><strong>出版社</strong>：吉林文史出版社</li><li><strong>作者</strong>：[美] 斯科特·派克</li><li><strong>推荐理由</strong>：“人生会有很多磨砺，是一个不断修炼的过程。如果你是一个渴望成熟的人，或者正在遭遇人生的挫折，那么你可能会需要这本书。”</li></ul><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://img-blog.csdnimg.cn/20200604003442691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="「终」总结"><a href="#「终」总结" class="headerlink" title="「终」总结"></a>「终」总结</h1><p>编写这边文章的同时，我回去反复看了大会的所有录播和 PPT。发现看第二遍的时候获得了额外的收获和惊喜。有一些第一次听的时候没有 get 到的信息和知识，第二遍，第三遍的时候突然就浮现了。事实证明这次的 15 位讲师给我们带来的分享真的是有非常高的含金量。</p><h2 id="重新认识自己"><a href="#重新认识自己" class="headerlink" title="重新认识自己"></a>重新认识自己</h2><p>通过这次的大会，我明确找到了我和技术专家的知识和认知差距，也知道自己还有很多的不足，但是现在的我明确知道自己需要的是什么，想往哪里走。</p><p>之前的自己过<strong>于执着与学习</strong>，看到新的技术和东西就迫不及待的去挖掘和实现。往往就忽略了什么才是自己真正热爱和想深挖的领域。从中就很容易迷失了自己的方向和消磨了自己有限的精力。</p><p>甚至是技术以外的技能都是非常值得我们重视的，在这个大会中，“<strong>思辨</strong>”、“<strong>思维</strong>”、“<strong>思想</strong>”、“<strong>沟通</strong>”、“<strong>复盘</strong>”、“<strong>要性</strong>”、“<strong>原理</strong>”等知识都是被反复强调的。</p><p>我们日常中也要实时的与业界保持密切的关注与思考，不能随便追捧和跟风。建立独立的思辨能力，强大的独立思维模式和空间。知识吸收到自己的体内后需要有独特的输出才真的是学会了一样东西。</p><p>此刻的自己需要改变、坚持学习和沉淀自己。实力还需要继续稳步提升，让自己全速前进。望有一天能变得更优秀并且拥抱更大的挑战！</p><blockquote><p>我是<font color="#60AAF8"><b>三钻</b></font>，一个在<font color="#60AAF8"><b>技术银河</b></font>中等你们一起来终身漂泊学习。<br>点赞是力量，关注是认可，评论是关爱！下期再见 👋！</p></blockquote><h2 id="推荐专栏"><a href="#推荐专栏" class="headerlink" title="推荐专栏"></a>推荐专栏</h2><p>小伙伴们可以<strong>查看或者订阅相关的专栏</strong>，从而集中阅读相关知识的文章哦。</p><ul><li><p>📖 <a href="https://blog.csdn.net/tridiamond6/category_10036942.html" target="_blank" rel="noopener">《据结构与算法》</a> — 到了如今，如果想成为一个高级开发工程师或者进入大厂，不论岗位是前端、后端还是 AI，算法都是重中之重。也无论我们需要进入的公司的岗位是否最后是做算法工程师，前提面试就需要考算法。</p></li><li><p>📖 <a href="https://blog.csdn.net/tridiamond6/category_9782493.html" target="_blank" rel="noopener">《FCC 前端集训营》</a> — 根据 FreeCodeCamp 的学习课程，一起深入浅出学习前端。稳固前端知识，一起在 FreeCodeCamp 获得证书</p></li><li><p>📖 <a href="https://blog.csdn.net/tridiamond6/category_9782493.html" target="_blank" rel="noopener">《前端星球》</a> — 以实战为线索，深入浅出前端多维度的知识点。内含有多方面的前端知识文章，带领不懂前端的童鞋一起学习前端，在前端开发路上童鞋一起燃起心中那团火 🔥</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分析时间复杂度与空间复杂度</title>
      <link href="/2020/05/30/algorithm/algorithm-time-space-complexity.html"/>
      <url>/2020/05/30/algorithm/algorithm-time-space-complexity.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是覃超老师的《算法训练营》的学习笔记，此笔记的内容包含了学习后的个人记录、个人总结、理解和思想。从而更好的学习算法。</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习任何一门知识的时候，我们需要分析清楚这门知识的核心是什么，从而在这个核心中我们可以得到什么。如果我们是盲目的吸收知识，其实很多知识我们都是在目前场景、工作、生活中无法使用的。也是因为学习之后无法运用，所以我们很快就会遗忘，或者是在学习的过程中很容易就会放弃。</p><blockquote><p>在一生的学习的过程中，发现学习我们急需使用或者能给我们及时带来价值的知识，我们会学的更加牢固，更加能坚持学习。</p></blockquote><p><strong>学习《数据结构与算法》这门知识的核心是什么？又能得到什么呢？</strong></p><ol><li>弄懂编程的底层逻辑；</li><li>在编程的过程中，拥有一个哆啦 A 梦一样百宝工具袋；</li><li>在遇到性能问题的时候，有算法的思维逻辑和规则来解决问题；</li><li>提高编程思维；</li></ol><p>这篇笔记记录了算法的核心<code>时间和空间复杂度</code>，《数据结构与算法》都是围绕着这个核心开展的。它的存在也是为了解决我们在编程的过程中性能问题，同时也让我们有更高级的思维和思路，写出更优质的程序。</p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="复杂度指标-Big-O-Notation"><a href="#复杂度指标-Big-O-Notation" class="headerlink" title="复杂度指标 Big O Notation"></a>复杂度指标 Big O Notation</h1><ul><li><strong>O (1):</strong> 常数复杂度 - Constant Complexity</li><li><strong>O (log n):</strong> 对数复杂度 - Logarithmic Complexity</li><li><strong>O (n):</strong> 线性复杂度 - Linear Complexity</li><li><strong>O (n^2):</strong> 平方复杂度 - N square Complexity</li><li><strong>O (2^n):</strong> 指数 - Exponential Growth</li><li><strong>O (n!):</strong> 阶乘 - Factorial</li></ul><h2 id="如何看时间复杂度"><a href="#如何看时间复杂度" class="headerlink" title="如何看时间复杂度"></a>如何看时间复杂度</h2><ul><li>分析函数；</li><li>根据 n 的不同情况会运行多少次；</li><li>最后得出一个平均的运行次数的量级；</li></ul><h2 id="Complexity-例子"><a href="#Complexity-例子" class="headerlink" title="Complexity 例子"></a>Complexity 例子</h2><p><strong>O (1)</strong> - 常数复杂度</p><pre><code class="javascript">let n = 1000;console.log(&#39;Hello - your input is: &#39; + n);</code></pre><p><strong>O (N)</strong> - 线性复杂度</p><pre><code class="javascript">for (let i = 1; i &lt;= n; i++) {  console.log(&#39;Hello world - your input is: &#39; + i);}</code></pre><p><strong>O (N^2)</strong></p><pre><code class="javascript">for (let i = 1; i &lt;= n; i++) {  for (let j = 1; j &lt;= n; j++) {    console.log(&#39;Hello world - your input is: &#39; + i + &#39; and &#39; + j);  }}</code></pre><blockquote><p>那如果我们不是嵌套两层<code>for</code>循环，是把两个循环分开来存放呢？这种方式时间复杂度是？</p></blockquote><pre><code class="javascript">for (let i = 1; i &lt;= n; i++) {  console.log(&#39;Hello world - your i input is: &#39; + i);}for (let j = 1; j &lt;= n; j++) {  console.log(&#39;Hello world - your j input is: &#39; + j);}</code></pre><p>很多小伙伴应该猜到了，就是<strong>2* n</strong>次的复杂度，那就是<strong>O(2n)</strong>。其实还是<code>O(n)</code>的时间复杂度。</p><p><strong>O(log(n))</strong></p><pre><code class="javascript">for (let i = 1; i &lt; n; i = i * 2) {  console.log(&#39;Hello world - your input is: &#39; + i);}</code></pre><p><strong>O(k^n)</strong></p><pre><code class="javascript">// Fibonacci递归function fib(n) {  if (n &lt;= 2) return n;  return fib(n - 1) + fib(n - 2);}</code></pre><p><img src="https://img-blog.csdnimg.cn/20200529135532302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="时间复杂度曲线"><a href="#时间复杂度曲线" class="headerlink" title="时间复杂度曲线"></a>时间复杂度曲线</h2><ul><li><code>y</code>轴是<code>Operations</code>就是操作复杂度的指数；</li><li><code>x</code>轴是<code>Elements</code>就是<code>n</code>我们的循环次数 ；</li><li>这里我们可以看到在<code>n</code>比较小的时候，复杂度是相对稳定的；</li><li>但是当<code>n</code>越来越大时，Big-O 复杂度就会急速飙升；</li></ul><blockquote><p>所以在我们写程序的时候，如果能把时间和空间复杂度从<code>O(n^2)</code>降到<code>O(n)</code>或者<code>O(1)</code>后，我们得到的优化收益是非常高的！</p></blockquote><ul><li>在编写程序的时候一定要注意到它的时间和空间复杂度，这样编写的时候就能预测出这段代码的性能级别；</li><li>用最简洁的时间和空间复杂度完成这段程序；</li><li>这样就是最顶尖的职业编程选手了；</li><li>因为复杂度越高，程序损耗的时间（处理时间）和资源（内存）就越大；</li></ul><h3 id="降低时间和空间复杂度"><a href="#降低时间和空间复杂度" class="headerlink" title="降低时间和空间复杂度"></a>降低时间和空间复杂度</h3><p><strong>我们用个例子就可以看到如何在编程中降低复杂度：</strong></p><blockquote><p>计算：1 + 2 + 3 + … + n</p></blockquote><p>方法一： 循环 1 到 n 然后累加 (时间复杂度 <code>O(n)</code>)</p><pre><code class="javascript">let sum = 0;for (let i = 1; i &lt; n; i++) {  sum += i;}console.log(sum);</code></pre><p>方法二： 求和公式 <code>sum = n(n+1)/2</code> (时间复杂度 <code>O(1)</code>)</p><pre><code class="javascript">let sum = (n * (n + 1)) / 2;console.log(sum);</code></pre><blockquote><p>注意：</p><ol><li>在做题或者面试的时候先<code>确认题目</code>，确保一切的条件和题目的理解无误；</li><li><code>想出所有可能</code>的解决方案；</li><li>同时<code>比较每个方法</code>的时间和空间复杂度；</li><li>接下来<code>找出最优</code>的解决方案（时间最快，内存使用最少）</li></ol></blockquote><h3 id="判断时间和空间复杂度"><a href="#判断时间和空间复杂度" class="headerlink" title="判断时间和空间复杂度"></a>判断时间和空间复杂度</h3><p><strong>斐波那契（Fibonacci）例子</strong></p><blockquote><p>公式：F(n) = F(n - 1) + F(n - 2)</p></blockquote><p>我们可以直接使用递归来解题：</p><pre><code class="javascript">function fib(n) {  if (n &lt;= 2) return n;  return fib(n - 1) + fib(n - 2);}</code></pre><ul><li>这个<code>fib</code>斐波那契函数中是一个<code>递归</code>；</li><li>每一次传入一个<code>n</code>值时，都会循环递归<code>fib</code>方法来一层一层往下计算；</li><li>最后到达<code>n</code>小于 2，返回最后的<code>n</code>值；</li></ul><blockquote><p>那针对这个递归，我们怎么计算它的时间复杂度呢？</p></blockquote><ul><li>要推断出这个程序的<code>复杂度</code>，首先我们要知道具体在这个函数中程序做了什么；</li><li>我们距离现在传入<code>n</code>为<code>6</code>，那就是运行<code>fib(6)</code></li><li>这个时候<code>6</code>被传入这个方法，然后返回的就是<code>fib(5)</code>+<code>fib(4)</code>，这时<code>fib(5)</code>和<code>fib(4)</code>就会再进入<code>fib</code>函数，这里就分开了两个分支了。以此类推我们就会出现以下一个树状过程：</li></ul><p><img src="https://img-blog.csdnimg.cn/20200529135500244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><ul><li>通过上图展开来的树，我们可以看到每一层是上一层的 2 倍：<code>fib(6)</code>展开为<code>fib(5)</code>+<code>fib(4)</code>，然后<code>fib(5)</code>和<code>fib(4)</code>又展开了两个。</li><li>所以<code>fibonacci</code>的执行次数就是一个<code>指数级 - O(2^n)</code></li><li>这里我们也可以看到<code>fib(3)</code>、<code>fib(4)</code>等等，都被重复计算了多次，所以这个计算的<strong>复杂度高达 2 的 6 次方</strong>；</li><li>所以在做题和面试的时候就<strong>不要运用上面的代码实例</strong>，我们要加入缓存机制，<strong>缓存重复计算的结果</strong>或者用<strong>一个循环来写</strong>，从而降低这个程序的复杂度。</li></ul><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="主定理-Master-Theorem"><a href="#主定理-Master-Theorem" class="headerlink" title="主定理 Master Theorem"></a>主定理 Master Theorem</h1><blockquote><p>任何一个<strong>分治</strong>或者<strong>递归函数</strong>都可以通过这个定理来算出它们的<strong>时间复杂度</strong>。这个定理里面有 4 种最常用的，只要记住这 4 种就可以了。</p></blockquote><table><thead><tr><th><strong>算法 (Algorithm)</strong></th><th><strong>时间复杂度 (Run time)</strong></th></tr></thead><tbody><tr><td>二分查找 (Binary search)</td><td>O(log n)</td></tr><tr><td>二叉树遍历 (Binary tree traversal)</td><td>O(n)</td></tr><tr><td>排序二维矩阵 (Optimal sorted matrix search)</td><td>O(n)</td></tr><tr><td>归并排序 (Merge sort)</td><td>O(n log n)</td></tr></tbody></table><h1 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h1><ul><li><strong>二叉树遍历中的前序、中序、后序：时间复杂度是多少？</strong><ul><li>时间复杂度是 <code>O(n)</code>，无论是前序、中序或者后序每一个节点都会访问一次，并且仅访问一次；</li><li>所以就是二叉树的节点总数，也就是<code>O(n)</code>的线性时间复杂度；</li></ul></li><li><strong>图的遍历：时间复杂度是多少？</strong><ul><li>时间复杂也是<code>O(n)</code>, 这里的<code>n</code>就是图里面的节点总数；</li></ul></li><li><strong>搜索算法：DFS、BFS 时间复杂度是多少？</strong><ul><li>DFS 是深度优先，BFS 是广度优先算法。</li><li>不管是深度优先还是广度优先，因为访问的节点只访问一次，所以时间复杂度也是<code>O(n)</code>的。（<code>n</code>指的是搜索空间里面的节点总数）</li></ul></li><li><strong>二分查找：时间复杂度是多少？</strong><ul><li>答案是<code>O(log n)</code></li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><strong>程序复杂度：Big O Notation</strong><ul><li><strong>O (1)</strong>，<strong>O(log n)</strong>， <strong>O(n)</strong>，<strong>O(n^2)</strong>, … 等等，越复杂程序性能越差；</li><li>分析复杂度法则：分析代码的逻辑，找到程序中运行的次数；</li><li>降低程序时间和空间复杂度可以提升代码的质量，同时优化程序的性能；</li></ul></li><li><strong>主定理：</strong><ul><li>所有的<strong>分治</strong>或者<strong>递归函数</strong>都可以通过<strong>主定理</strong>来分析出它的<strong>时间复杂度</strong>；</li></ul></li><li><strong>常见面试题：</strong><ul><li><strong>二叉树遍历中的前序、中序、后序：时间复杂度是多少？</strong> - <code>O(n)</code></li><li><strong>图的遍历：时间复杂度是多少？</strong> - <code>O(n)</code></li><li><strong>搜索算法：DFS、BFS 时间复杂度是多少？</strong> - <code>O(n)</code></li><li><strong>二分查找：时间复杂度是多少？</strong> - <code>O(log n)</code></li></ul></li></ul><blockquote><p>我是<font color="#60AAF8"><b>三钻</b></font>，一个在<font color="#60AAF8"><b>技术银河</b></font>中等你们一起来终身漂泊学习。<br>点赞是力量，关注是认可，评论是关爱！下期再见 👋！</p></blockquote><blockquote><p>公众号《<strong>技术银河</strong>》回复”算法资料”，可以获得这个系列文章的<strong>PDF 版</strong>和<strong>其他资料</strong>！</p></blockquote><h2 id="推荐专栏"><a href="#推荐专栏" class="headerlink" title="推荐专栏"></a>推荐专栏</h2><p>小伙伴们可以<strong>查看或者订阅相关的专栏</strong>，从而集中阅读相关知识的文章哦。</p><ul><li><p>📖 <a href="https://blog.csdn.net/tridiamond6/category_10036942.html" target="_blank" rel="noopener">《据结构与算法》</a> — 到了如今，如果想成为一个高级开发工程师或者进入大厂，不论岗位是前端、后端还是 AI，算法都是重中之重。也无论我们需要进入的公司的岗位是否最后是做算法工程师，前提面试就需要考算法。</p></li><li><p>📖 <a href="https://blog.csdn.net/tridiamond6/category_9782493.html" target="_blank" rel="noopener">《FCC 前端集训营》</a> — 根据 FreeCodeCamp 的学习课程，一起深入浅出学习前端。稳固前端知识，一起在 FreeCodeCamp 获得证书</p></li><li><p>📖 <a href="https://blog.csdn.net/tridiamond6/category_9782493.html" target="_blank" rel="noopener">《前端星球》</a> — 以实战为线索，深入浅出前端多维度的知识点。内含有多方面的前端知识文章，带领不懂前端的童鞋一起学习前端，在前端开发路上童鞋一起燃起心中那团火 🔥</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Time Complexity </tag>
            
            <tag> Space Complexity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何高效学习数据结构与算法</title>
      <link href="/2020/05/23/algorithm/algorithm-intro.html"/>
      <url>/2020/05/23/algorithm/algorithm-intro.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>本文是个人基于覃超老师的《算法训练营》的学习笔记，此笔记的内容都是学习后的个人记录、个人总结、理解和思想。仅供参考学习。</p></blockquote><p>很多同学在大学的时候会觉得数据结构与算法很枯燥，很多小伙伴都不愿意听这门课程。甚至以前还觉得能开发一个项目就能成为一个合格的程序员。但是学会算法，或者接触过数据结构与算法后，发现懂这门知识的程序员编写出来的代码相对有更高的质量。代码的性能、写法、底层逻辑和解决问题的能力都会高于不懂数据结构与算法的程序员。</p><p>到了如今，如果想成为一个高级开发工程师或者进入大厂，不论岗位是前端、后端还是 AI，算法都是重中之重。也无论我们需要进入的公司的岗位是否最后是做算法工程师，前提面试就需要考算法。所以<code>小时不学算法，长大掉头发</code>。</p><p>这系列的《<strong>算法学习笔记</strong>》，与大家一起重温或者学习数据结构与算法。</p><blockquote><p>这里也赠送大家一句话：</p><p>“<code>好记性不如烂笔头，好记性更不如好笔记</code>“</p><p>愿大家在技术银河中终身漂泊学习时，习惯编写自己的笔记，以后这些笔记必定成为我们最珍贵的宝藏！✨</p></blockquote><h1 id="如何系统化学习算法"><a href="#如何系统化学习算法" class="headerlink" title="如何系统化学习算法"></a>如何系统化学习算法</h1><p>深入到精通一门知识的我们都需要一个系统化的学习方法，如果这门知识越是有难度，前期就越是枯燥无味，或者甚至觉得很困难。所以学习算法也是一样的：</p><ul><li><strong>枯燥无味</strong><ul><li>所以需要系统化学习；</li><li>小步快跑的方式进行学习；</li><li>不懂就找答案不要埋头苦学；</li></ul></li><li><strong>不牢固</strong><ul><li>越是庞大的知识，越学就会越觉得之前学到的知识忘的差不多了；</li><li>其实就是缺乏知识的稳固性；</li></ul></li><li><strong>预习</strong><ul><li>学习任何一门知识，都要先了解和预习这门知识；</li><li>同理，在学习一门新的开发语言时，我们都会先来一个<code>hello world</code>；</li></ul></li><li><strong>坚持 leetcode 刷题</strong><ul><li>要学会算法，并且稳固这一门知识，不断的<strong>刻意练习</strong>是重中之重；</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="系统化的效果"><a href="#系统化的效果" class="headerlink" title="系统化的效果"></a>系统化的效果</h1><p>系统化学习和拿起一本书最终的效果是不一样的。很多时候我们开始学习一门知识，我们都会看：《xxx 深入浅出》、《xxx 指南》和《从 0 到 1 学会 xxx》，其实里面的知识是很庞大的。只靠知识是无法支撑我们的实战和经验的，所以我们需要<strong>系统化的学习方法</strong>最终达到的目标也是不一样的，例如：</p><ul><li>提升到职业顶尖水平</li><li>通过一线互联网大厂的面试</li><li>要有 Leetcode 300+ 刷题量</li></ul><blockquote><p>推荐阅读《Outliner》这本书中的<strong>学习方法</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="精通一个领域"><a href="#精通一个领域" class="headerlink" title="精通一个领域"></a>精通一个领域</h1><p>前面说到，任何一个领域的知识都是很庞大的。而且只靠看书，看文章学习都是不够的。所以一套好的学习方法，可以为我们打开一扇大门。而且在打开这扇大门的同时不会因为艰苦、困难、煎熬或者是枯燥而最后放弃。</p><ul><li>切碎知识点 Chunk it up<ul><li>庖丁解牛</li><li>脉络相连 - 从根部开始学习，到分支，再到树叶。让每一个知识点都有关联关系</li></ul></li><li>刻意练习 Deliberate Practicing</li><li>反馈 Feedback</li></ul><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="数据结构有什么？"><a href="#数据结构有什么？" class="headerlink" title="数据结构有什么？"></a>数据结构有什么？</h1><ul><li>一维：<ul><li>基础： 数组 array (string)，链表 linked list</li><li>高级：栈 stack，队列 queue， 双端队列 duque，集合 set，映射 map (hash or map)，等等</li></ul></li><li>二维：<ul><li>基础：树 tree, 图 graph</li><li>高级：二叉搜索树 binary search tree（红黑树 red-black tree, AVL），堆 heap，并查集 disjoint set，字典树 Trie</li></ul></li><li>特殊：<ul><li>位运算 Bitwise，步隆过滤器 BloomFilter</li><li>LRU Cache (缓存)</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20200523211014620.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><center>参考：覃超老师的《数据库脑图》</center><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="算法有什么？"><a href="#算法有什么？" class="headerlink" title="算法有什么？"></a>算法有什么？</h1><p>任何的高级算法与数据结构都会转换成 If Else，for 循环，其实也是最朴素的计算机的知识，没有什么 AI，人工智能的知识。高级算法重点是找到<code>重复单元</code>。</p><ul><li>跳转语句 (Branch) ：If-else，switch</li><li>循环 (Iteration) ：for, which，while loop</li><li>递归 (Recursion) ： Divide &amp; Conquer, Backtrace</li><li>搜索 (Search) ：深度优先搜索 Depth first search，广度优先搜索 Breadth first search，启发式搜索 A*</li><li>动态规划 (Dynamic Programming)</li><li>二分查找 (Binary Search)</li><li>贪心 (Greedy)</li><li>数学 (Math)，几何 (Geometry)</li></ul><p><img src="https://img-blog.csdnimg.cn/20200523211749822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><center>参考：覃超老师的《算法脑图》</center><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="刻意练习-Deliberate-practice"><a href="#刻意练习-Deliberate-practice" class="headerlink" title="刻意练习 - Deliberate practice"></a>刻意练习 - Deliberate practice</h1><p>无论是科学家、国家运动员、技术专家还是游戏职业选手，他们的优秀的背后都有一个共同点：<code>刻意练习</code>。</p><p><strong>什么是刻意练习？</strong></p><ul><li>刻意练习 - 过遍数，持续多边形的练习，用数遍达到质变！（五毒神掌）；</li><li>练习不擅长的地方；</li><li>如果感到不舒服、不爽、枯燥的话，那证明我们正在爬坡，正在提升！</li></ul><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="反馈-Feedback"><a href="#反馈-Feedback" class="headerlink" title="反馈 - Feedback"></a>反馈 - Feedback</h1><p>很多时候在学习中，特别是在自学的过程，我们永远不知道自己的学习的成果是怎么样的。或者我们有时候会遇到难点但是无法突破，甚至有时候我们以为自己很努力，或者已经很强了。但是其实还只是坐井观天而已。所以我们在学习的时候需要<code>反馈</code>。所谓的反馈有几种：</p><ul><li>即时反馈<ul><li>学会使用一门语言；</li><li>能写出能执行的代码；</li><li>能写出一个项目；</li><li>能实现一个功能；</li></ul></li><li>主动型反馈<ul><li>高手代码（Github、LeetCode）；</li><li>第一视角止步（看视频，看高手写的代码，学习思路）；</li></ul></li><li>被动式反馈（高手指点）<ul><li>代码审查 code review；</li><li>例如：教练看你打，给你反馈；</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="切题四件套"><a href="#切题四件套" class="headerlink" title="切题四件套"></a>切题四件套</h1><p>我个人认为也可以叫<code>解题四大法则</code>：</p><ul><li>理解题目（Clarification）<ul><li>在 LeetCode 看题后，先思考，认真确认和理解题目；</li><li>避免忽略了一些条件或者是误解题目；</li><li>面试的时候更加应该跟面试官确认清楚题目、条件、场景等；</li></ul></li><li>多种解题方案（Possible solutions）<ul><li>对比时间和空间复杂度 compare (time/spaace)</li><li>最优解 optimal (加强)</li></ul></li><li>多编写（Coding）<ul><li>代码反复练习和编写；</li><li>每一种解法都反复练习和编写；</li></ul></li><li>多测试案例（Test cases）<ul><li>在 LeetCode 上可以改变测试案例；</li><li>多测试几种案例，确保自己的代码可以适应各种特殊情况；</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="刷题方式（五毒神掌）"><a href="#刷题方式（五毒神掌）" class="headerlink" title="刷题方式（五毒神掌）"></a>刷题方式（五毒神掌）</h1><h2 id="第一遍"><a href="#第一遍" class="headerlink" title="第一遍"></a>第一遍</h2><ul><li>5 分钟：读题 + 思考；</li><li>5 分钟过后，没有思路就直接看解法；</li><li>记录多个解题方法，比较解题方法的优弊；</li><li>尝试默写代码，训练刻意手写代码；</li></ul><h2 id="第二遍"><a href="#第二遍" class="headerlink" title="第二遍"></a>第二遍</h2><ul><li>自己编写，这时候就不要再看题解了；</li><li>LeetCode 提交代码，确保能通过；</li><li>有 Bug 没有关系，重复 debug 到通过为止；</li><li>编写出多种解题方法；</li><li>持续优化 - 重点是 <code>执行时间</code> （可参考 LeetCode 中打败了多少的人，也可以点击比较优秀的人，学习更好的写法）；</li></ul><h2 id="第三遍"><a href="#第三遍" class="headerlink" title="第三遍"></a>第三遍</h2><ul><li>过了一天后，再重复做题；</li><li>根据自己不熟悉的题目与程度做专项练习；</li><li>专项练习就是针对自己不熟悉的种类的题，从而刻意练习哪一种题；</li></ul><h2 id="第四篇"><a href="#第四篇" class="headerlink" title="第四篇"></a>第四篇</h2><ul><li>过了一周后，再反复练习；</li></ul><h2 id="第五遍"><a href="#第五遍" class="headerlink" title="第五遍"></a>第五遍</h2><ul><li>面试前，提前 2-3 周开始重复练习；</li></ul><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这篇笔记中，我们记录了一下关键知识重点点：</p><ul><li><strong>如何深入学习一门知识</strong><ul><li>通过系统化学习一门知识；</li><li>最高效和持续的学习算法就是通过系统化的学习；</li><li>这里推荐大家，真的想学好一个技术，最好的方法就是找对老师，找对课程，找对人；</li></ul></li><li><strong>如何攻破庞大的知识体系变成编程职业高手</strong><ul><li>切碎知识点与建立脉络</li><li>刻意练习</li><li>反馈</li></ul></li><li><strong>数据结构中有什么？</strong> - 看脑图</li><li><strong>算法中有什么？</strong>- 看脑图</li><li><strong>算法练习方法</strong><ul><li>切题四件套</li><li>五毒神掌</li></ul></li></ul><blockquote><p>我是<font color="#60AAF8"><b>三钻</b></font>，一个在<font color="#60AAF8"><b>技术银河</b></font>中和你们一起来终身漂泊学习。<br>点赞是力量，关注是认可，评论是关爱！下期再见 👋！</p></blockquote><blockquote><p>公众号《技术银河》回复”算法资料”可以获得 PDF 版和脑图资料！</p></blockquote><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><p>📖<a href="https://blog.csdn.net/TriDiamond6/article/details/106424061" target="_blank" rel="noopener">《分析时间与空间复杂度《三钻数据结构与算法笔记》》</a> — 算法的核心时间和空间复杂度，《数据结构与算法》都是围绕着这个核心开展的。它的存在也是为了解决我们在编程的过程中性能问题，同时也让我们有更高级的思维和思路，写出更优质的程序。</p></li><li><p>📖<a href="https://blog.csdn.net/TriDiamond6/article/details/105915758" target="_blank" rel="noopener">《28 关学会 HTML 与 HTML5 基础》</a> — 一个系列的文章和大家一起闯关进攻前端全方位知识点。没有闯过这些关卡的童鞋，无论前端能力如何，这个可以锻炼我们自己，也可以深入知道我们自己的前端水平和差距。想学习前端的童鞋可以从零开始学习，一起排除困难共同打开前端大门！</p></li><li><p>📖<a href="https://blog.csdn.net/TriDiamond6/article/details/106048140" target="_blank" rel="noopener">《44 关深入浅出 CSS 基础之第一篇》</a> — 这周我们一起闯过了 22 关，下一期我们会一起把剩余的 22 关完成。学习是一种像爬山一样的过程，要经历过漫长的上坡路，一步一个脚印。“路漫漫其修远兮，吾将上下而求索。”， 在追寻知识的道路上，前方的道路还很漫长，但我们将百折不挠，不遗余力地，上天下地的去追求和探索。让我们继续坚持学习，终身学习成长。在大前端的时代爬到技术的巅峰，做一个有深度的技术人员。</p></li><li><p>🔥<a href="https://blog.csdn.net/TriDiamond6/article/details/105131371" target="_blank" rel="noopener">《前端必看的 8 个 HTML+CSS 技巧》</a> — CSS 是一个很独特的语言。看起来非常简单，但是某种特殊效果看似简单，实现起来就颇有难度。这篇文章主要是给在学习前端的童鞋分享一些新的 CSS 技巧，一些在前端教程和培训课堂中不会讲到的知识。第二就是让还在前端开发这条道路上的童鞋们，重新燃起对前端排版和特效的热爱和热情！🔥</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>44关学习CSS与CSS3基础「一」</title>
      <link href="/2020/05/17/frontend/fcc-css3-basics-1.html"/>
      <url>/2020/05/17/frontend/fcc-css3-basics-1.html</url>
      
        <content type="html"><![CDATA[<h1 id="「前言」"><a href="#「前言」" class="headerlink" title="「前言」"></a>「前言」</h1><p>欢迎回来三钻的<code>FCC前端教程</code>，<a href="https://tridiamond.blog.csdn.net/article/details/105915758" target="_blank" rel="noopener">上一篇文章</a>我们通过 28 关学会了 HTML 与 HTML5 网页开发基础。这一期我们一起攻破前端第二大知识点《CSS 基础入门》。因为这一课一共有 44 关，我把文章分成两期更新。敬请期待！</p><h1 id="「CSS-基础知识」"><a href="#「CSS-基础知识」" class="headerlink" title="「CSS 基础知识」"></a>「CSS 基础知识」</h1><p><code>Cascading Style Sheet</code>缩写为 CSS，顾名思义就是<code>层叠样式表</code>的意思。CSS 是 HTML 中的一个样式表，告诉浏览器网页上的文字和其他内容是如何展示的。</p><h2 id="理解-CSS"><a href="#理解-CSS" class="headerlink" title="理解 CSS"></a>理解 CSS</h2><p>以上是一个官方的定义。我们用一个更简单的方式理解 CSS 到底是一个什么东东：</p><blockquote><p>如果 HTML 是骨架，那 CSS 就是装饰这个骨架的一层皮和身上的装饰品。我们可以通过 CSS 控制皮肤的颜色，毛孔的粗细。甚至还可以控制我们装饰品上的特效，动效等等（有 LED 灯的口罩也是一种特效）。</p></blockquote><p>回归 HTML 中的 CSS，我们可以使用 CSS 控制哪些东西呢？</p><ul><li><strong>color</strong>：颜色</li><li><strong>fonts</strong>：字体</li><li><strong>positioning</strong>：定位</li><li><strong>spacing</strong>：间隙</li><li><strong>sizing</strong>：大小</li><li><strong>decoration</strong>：装饰</li><li><strong>transition</strong>：过渡/特效/动效</li></ul><h2 id="应用方式"><a href="#应用方式" class="headerlink" title="应用方式"></a>应用方式</h2><blockquote><p>我们一共有 3 种应用 CSS 样式的方法。</p><ol><li>我们可以在 HTML 元素行内的<code>style</code>中编写样式；</li><li>在 HTML 文档中添加<code>&lt;style&gt;</code>标签，然后在标签内编写 CSS 代码；</li><li>把 CSS 样式单独写入一个<code>CSS</code>样式文件，然后在需要使用的 HTML 文档中使用<code>&lt;link&gt;</code>引入。</li></ol></blockquote><p>一般项目中都会选择使用第三种方式，因为比较大型的前端页面，很多样式都是<strong>有重复性的</strong>，应用引入型的 CSS 样式，我们就可以把通用的写在一起然后在所有 HTML 中引入即可，不需要重复编写。并且可以把 CSS<strong>分类存放</strong>，<strong>提高可读性</strong>和<strong>可维护性</strong>。</p><h2 id="CSS-原理"><a href="#CSS-原理" class="headerlink" title="CSS 原理"></a>CSS 原理</h2><p>CSS 背后的原理是，使用 CSS 选择器选中 DOM（文档对象模型）里面的某个 HTML 元素。然后将各种 CSS 样式和属性应用到该元素中，从而改变元素在页面中的展现方式或者样式。</p><blockquote><p>在本节中，我们将学会如何应用 CSS 样式到 CatPhotoApp 的元素中，从而将它从简单的文本装修成一个页面。让我们立即开始吧！</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第一关」改变文字颜色"><a href="#「第一关」改变文字颜色" class="headerlink" title="「第一关」改变文字颜色"></a>「第一关」改变文字颜色</h1><blockquote><p>关卡名：<code>Change the Color of Text</code></p></blockquote><h5 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h5><ul><li>我们这一关来尝试改变文本中一些文字的颜色；</li><li>我们可以给<code>h2</code>元素添加<code>style</code>属性，然后使用样式属性改变文字颜色；</li><li><code>color</code>就是用来定义文字颜色的样式属性；</li></ul><p>以下例子演示如何给<code>h2</code>应用一个蓝色字体颜色的代码：</p><pre><code class="html">&lt;h2 style=&quot;color: blue;&quot;&gt;CatPhotoApp&lt;/h2&gt;</code></pre><blockquote><p><strong>注意：</strong> 在行内样式中，所有样式属性结束后需要加上一个<code>;</code>符号，代表这一个样式属性定义结束。然后后面还可以加入更多的样式属性。</p></blockquote><h5 id="过关目标"><a href="#过关目标" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>改变<code>h2</code>的文字颜色为红色(<code>red</code>)；</li></ul><h5 id="过关条件"><a href="#过关条件" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>h2</code>元素中需要有<code>style</code>属性；</li><li><code>h2</code>元素的<code>color</code>样式属性应该赋予<code>red</code>这个值；</li><li><code>style</code>属性值里的样式属性应该以<code>;</code>符号结束；</li></ul><h5 id="学会了什么？"><a href="#学会了什么？" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>行内添加<code>style</code>样式属性;</li><li>字体颜色样式属性<code>color</code>;</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200514110356406.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第二关」使用-CSS-选择器改变元素样式"><a href="#「第二关」使用-CSS-选择器改变元素样式" class="headerlink" title="「第二关」使用 CSS 选择器改变元素样式"></a>「第二关」使用 CSS 选择器改变元素样式</h1><blockquote><p>关卡名：<code>Change the Color of Text</code></p></blockquote><h5 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h5><ul><li>CSS 有几百种样式属性可应用到一个 HTML 元素中，来改变它在页面中的显示方式。</li><li>上一关编写的<code>&lt;h2 style=&quot;color: red;&quot;&gt;CatPhotoApp&lt;/h2&gt;</code>，这里我们使用行内样式，使用了文字颜色样式来单独改变<code>h2</code>元素中的文字。</li><li>这种应用方式只能单独针对 HTML 中某一个元素进行样式影响，但是更好的方式是使用 CSS 样式表。</li></ul><p>在代码的最顶端加入<code>style</code>标签：</p><pre><code class="html">&lt;style&gt;&lt;/style&gt;</code></pre><p>在<code>style</code>中，使用<strong>CSS 选择器</strong>选中所有<code>h2</code>标签，并且给所有<code>h2</code>标签加入字体颜色样式属性<code>color: red</code>：</p><pre><code class="html">&lt;style&gt;  h2 {    color: red;  }&lt;/style&gt;</code></pre><blockquote><p><strong>注意：</strong> 选择器名中的样式元素必须用两个大括号包裹着 (开始<code>{</code>与结束<code>}</code>)。在样式属性的最后必须加入一个分号<code>;</code>来结束。</p></blockquote><h5 id="过关目标-1"><a href="#过关目标-1" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>删除<code>h2</code>行内样式;</li><li>在代码顶部加入<code>style</code>样式表代码区;</li><li>在样式代码区使用 CSS 选择器把所有<code>h2</code>元素内的字体改变为蓝色<code>blue</code>;</li></ul><h5 id="过关条件-1"><a href="#过关条件-1" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>h2</code>元素中的<code>style</code>属性需要被移除；</li><li>需要创建一个<code>style</code>元素；</li><li><code>h2</code>元素中的文字应该是蓝色<code>blue</code>的；</li><li>样式表中的样式属性都应该遵循规范，有<strong>大括号</strong>和结束时的<strong>分号</strong>；</li><li><code>style</code>元素有接受标签；</li></ul><h5 id="学会了什么？-1"><a href="#学会了什么？-1" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>使用<code>style</code>元素</li><li>CSS 样式元素规范</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-1"><a href="#答案-1" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/2020051414272899.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第三关」使用-CSS-类"><a href="#「第三关」使用-CSS-类" class="headerlink" title="「第三关」使用 CSS 类"></a>「第三关」使用 CSS 类</h1><blockquote><p>关卡名：<code>Use a CSS Class to Style an Element</code></p></blockquote><h5 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h5><ul><li>CSS 中的类是为了解决服用样式的问题；</li></ul><p><strong>类声明例子：</strong></p><pre><code class="html">&lt;style&gt;  .blue-text {    color: blue;  }&lt;/style&gt;</code></pre><ul><li>在<code>style</code>元素中我们编写了一个<code>.blue-text</code>CSS 类（CSS 类需要在我们的名字前加入<code>.</code>符号, 然后 CSS 类的命名规范必须使用<code>-</code>分割）；</li><li>接着我们可以把这个类加入 HTML 元素中，比如：<code>&lt;h2 class=&quot;blue-text&quot;&gt;CatPhotoApp&lt;/h2&gt;</code>；</li><li>只要给我们需要应用字体颜色为蓝色的 HTML 元素上加入<code>class=&quot;blue-text&quot;</code>，即可获得该 CSS 类的样式属性。</li><li>记住在 HTML 中加入类，是不需要<code>.</code>这个符号在最前面的。</li></ul><h5 id="过关目标-2"><a href="#过关目标-2" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>在<code>style</code>元素中，把<code>h2</code>CSS 选择器改为<code>.red-text</code>；</li><li>并且把颜色值从<code>blue</code>改为<code>red</code>;</li></ul><h5 id="过关条件-2"><a href="#过关条件-2" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>h2</code>元素的问题应该是红色的；</li><li><code>h2</code>元素应该拥有一个<code>red-text</code>的类；</li><li><code>style</code>样式表中有定义一个<code>.red-text</code>，并且样式属性<code>color</code>的值为<code>red</code>;</li><li>不允许在<code>h2</code>中使用行内<code>style</code>属性来改变元素的字体颜色；</li></ul><h5 id="学会了什么？-2"><a href="#学会了什么？-2" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>在 CSS 样式表中定义类；</li><li>在 HTML 元素中加入类；</li><li>用类改变 HTML 元素的样式；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-2"><a href="#答案-2" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200514145149216.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第四关」使用-CSS-类改变多个元素样式"><a href="#「第四关」使用-CSS-类改变多个元素样式" class="headerlink" title="「第四关」使用 CSS 类改变多个元素样式"></a>「第四关」使用 CSS 类改变多个元素样式</h1><blockquote><p>关卡名：<code>Change the Color of Text</code></p></blockquote><h5 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h5><ul><li>一个类可以赋予给多个元素，让所有被赋予同一个类的元素拥有同一套样式；</li></ul><blockquote><p>几年前<code>twitter</code>公司很火的前端框架<code>bootstrap</code>，就是结合很多这种分类好的的类，让我们在 HTML 元素中组合使用就可以快速布局网页。所以合理的分类好不同种类的类，然后给他们一种特定用途，有利于 CSS 开发时提高代码复用性，提高可读性和可维护性。</p></blockquote><h5 id="过关目标-3"><a href="#过关目标-3" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>给代码中第一个<code>p</code>元素也加入<code>red-text</code>类;</li></ul><h5 id="过关条件-3"><a href="#过关条件-3" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>h2</code>元素的文字应该是红色；</li><li><code>h2</code>元素应该拥有一个<code>red-text</code>类属性；</li><li>第一个<code>p</code>元素的内容应该是红色；</li><li>第二和第三个<code>p</code>元素的内容颜色应该不是红色；</li><li>第一个<code>p</code>元素应该拥有一个<code>red-text</code>类属性；</li></ul><h5 id="学会了什么？-3"><a href="#学会了什么？-3" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>用类名对多个 HTML 元素赋予同一个样式；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-3"><a href="#答案-3" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200514150120127.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第五关」改变文字大小"><a href="#「第五关」改变文字大小" class="headerlink" title="「第五关」改变文字大小"></a>「第五关」改变文字大小</h1><blockquote><p>关卡名：<code>Change the Color of Text</code></p></blockquote><h5 id="知识点-4"><a href="#知识点-4" class="headerlink" title="知识点"></a>知识点</h5><ul><li>字体大小是<code>font-size</code>样式属性控制的；</li></ul><pre><code class="css">h1 {  font-size: 30px;}</code></pre><h5 id="过关目标-4"><a href="#过关目标-4" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>在<code>style</code>元素中，<code>.red-text</code>下方加入<code>p</code>元素选择器；</li><li>在<code>p</code>选择器中加入<code>font-size</code>样式属性，并且把值设置为<code>16px</code>（16 像素）；</li></ul><h5 id="过关条件-4"><a href="#过关条件-4" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>在<code>style</code>元素中为<code>p</code>元素的内容的字体改为<code>16px</code>的大小；</li></ul><h5 id="学会了什么？-4"><a href="#学会了什么？-4" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>改变元素字体大小；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-4"><a href="#答案-4" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200514153424512.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第六关」改变元素字体"><a href="#「第六关」改变元素字体" class="headerlink" title="「第六关」改变元素字体"></a>「第六关」改变元素字体</h1><blockquote><p>关卡名：<code>Set the Font Family of an Element</code></p></blockquote><h5 id="知识点-5"><a href="#知识点-5" class="headerlink" title="知识点"></a>知识点</h5><ul><li>使用<code>font-family</code>样式属性，我们可以定义一个元素所使用的字体；</li><li>举例，如果我们想<code>h2</code>元素使用<code>sans-serif</code>字体，在 CSS 中需要这么些：</li></ul><pre><code class="css">h2 {  font-family: sans-serif;}</code></pre><h5 id="过关目标-5"><a href="#过关目标-5" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>让所有<code>p</code>元素使用<code>monospace</code>字体；</li></ul><h5 id="过关条件-5"><a href="#过关条件-5" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>所有<code>p</code>元素都使用<code>monospace</code>字体；</li></ul><h5 id="学会了什么？-5"><a href="#学会了什么？-5" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>使用 CSS 样式属性制定元素使用的字体；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-5"><a href="#答案-5" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/2020051415471048.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第七关」引入-Google-字体"><a href="#「第七关」引入-Google-字体" class="headerlink" title="「第七关」引入 Google 字体"></a>「第七关」引入 Google 字体</h1><blockquote><p>关卡名：<code>Import a Google Font</code></p></blockquote><h5 id="知识点-6"><a href="#知识点-6" class="headerlink" title="知识点"></a>知识点</h5><ul><li>在我们的操作系统中，会有很多通用的字体可以使用。但是除了这些字体之外我们还可以引入自定义字体，也叫<code>web fonts</code>网页字体。</li><li>在项目中，有一些设计师会使用一些特殊的字体，主要是为了提高整体页面的美观和协调，这种也是非常常见的。</li><li>这个时候我们就需要在 HTML 中引入字体了。</li><li>这个关卡我们使用了<code>Google Fonts</code>库（顾名思义，就是使用谷歌公司提供的公开字体库 - 也就是免费使用的）</li></ul><blockquote><p><strong>注意：</strong> 如果我们无法访问谷歌字体的话，这一关是无法过的，只能跳过。但是作为开发人员，我们是有办法的。（你们懂的 😂）</p></blockquote><ul><li>要引入谷歌字体，我们只需要在 HTML 中加入谷歌字体的 URL；</li><li>这个关卡中我们需要引入谷歌字体库中的<code>Lobster</code>字体；</li><li>我们只需要复制黏贴以下代码，加入到我们代码的顶端即可（如果是在正常的 HTML 文件格式中，就是加入到<code>&lt;meta&gt;&lt;/meta&gt;</code>标签之中）；</li></ul><pre><code class="html">&lt;link href=&quot;https://fonts.googleapis.com/css?family=Lobster&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</code></pre><ul><li>现在我们可以在 CSS 中使用<code>font-family: Lobster;</code>, <code>font-family</code>字体属性值的格式是: <code>font-family: FAMILY_NAME, GENERIC_NAME;</code>;</li><li>里面的<code>FAMILY_NAME</code>就是指定的字体名，如果这个字体找不到，或者语言不适应的话，就会往后面定义的字体进行应用；</li><li>换言之<code>GENERIC_NAME</code>就是后备字体，可以用<code>,</code>分割输入多个，这个也会在下一关详细解说；</li><li>如果我们的字体名中含有空格，那我们就需要用<strong>双引号</strong>包裹着，例如：<code>&quot;Open Sans&quot;</code>。因为<code>Lobster</code>这个字体不存在这种情况，所以不需要使用双引号；</li></ul><h5 id="过关目标-6"><a href="#过关目标-6" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>创建一个<code>font-family</code>CSS 规则，并且使用<code>Lobster</code>字体。必须保证我们的<code>h2</code>元素应用了这个字体定义。</li></ul><h5 id="过关条件-6"><a href="#过关条件-6" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>引入了谷歌字体库中的<code>Lobster</code>字体；</li><li><code>h2</code>元素中的字体使用了<code>Lobster</code>字体；</li><li>使用<code>h2</code>CSS 选择器的来改变字体；</li><li>其他<code>p</code>元素应该保持原来的<code>monospace</code>字体；</li></ul><h5 id="学会了什么？-6"><a href="#学会了什么？-6" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>引入谷歌字体;</li><li>使用谷歌字体;</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-6"><a href="#答案-6" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200514162145246.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第八关」定义字体如何往后取用"><a href="#「第八关」定义字体如何往后取用" class="headerlink" title="「第八关」定义字体如何往后取用"></a>「第八关」定义字体如何往后取用</h1><blockquote><p>关卡名：<code>Specify How Fonts Should Degrade</code></p></blockquote><h5 id="知识点-7"><a href="#知识点-7" class="headerlink" title="知识点"></a>知识点</h5><ul><li>浏览器中有好几个可用的默认的字体，最普通的字体有：<code>monospace</code>, <code>serif</code> 和 <code>sans-serif</code>；</li><li>当一个字体不存在或者无法使用时，我们可以告诉浏览器<strong>“往后取用”</strong>下一个指定的字体；</li><li>举例：如果<code>Helvetic</code>作为我们的默认字体，当这个字体无法使用的时候自动往后选择使用<code>sans-serif</code>字体，这种场景我们就需要用以下方式：</li></ul><pre><code class="css">p {  font-family: Helvetica, sans-serif;}</code></pre><p><code>Generic font family</code>的字体名是没有大小写限制的，只要名字正确就可以了。并且不需要双引号，因为它们是 CSS 关键词而已。</p><h5 id="过关目标-7"><a href="#过关目标-7" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>首先给<code>h2</code>追加<code>monospace</code>字体，让<code>h2</code>元素拥有默认字体为<code>Lobster</code>，备用自己为<code>monospace</code>；</li><li>上一关卡，我们使用<code>link</code>标签引入了谷歌字体库中的<code>Lobster</code>字体。这里我们注释掉这个引用，从而<code>Lobster</code>这个字体就变成无法使用了，所以<code>h2</code>元素中就会往后取用<code>monospcae</code>字体；</li></ul><blockquote><p><strong>注意</strong>： 如果我们的电脑中安装了<code>Lobster</code>字体，那这个例子中的<code>Lobster</code>字体是可用的，自然就无法看到浏览器往后取用的效果了。</p></blockquote><h5 id="过关条件-7"><a href="#过关条件-7" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>h2</code>元素使用<code>Lobster</code>字体；</li><li>当<code>Lobster</code>字体无法使用时，<code>h2</code>元素应该往后取用<code>monospace</code>字体；</li><li>注释掉谷歌字体库的引用，在<code>link</code>标签的签名加入<code>&lt;!--</code>和在结尾加入<code>--&gt;</code>；</li><li>注释的结尾必须有<code>--&gt;</code>；</li></ul><h5 id="学会了什么？-7"><a href="#学会了什么？-7" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>给 HTML 元素追加后备字体；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-7"><a href="#答案-7" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200514174718492.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第九关」控制图片大小"><a href="#「第九关」控制图片大小" class="headerlink" title="「第九关」控制图片大小"></a>「第九关」控制图片大小</h1><blockquote><p>关卡名：<code>Size Your Images</code></p></blockquote><h5 id="知识点-8"><a href="#知识点-8" class="headerlink" title="知识点"></a>知识点</h5><ul><li>CSS 中有一个样式属性叫<code>width</code>（宽度），顾名思义这个元素是用来控制元素的宽度的；</li><li>与字体大小一样，我们使用<code>px</code>（像素）为单位来定义图片的宽度</li><li>举例：如果我们创建一个 CSS 类<code>larger-image</code>，并且使用这个类来把 HTML 元素的宽度定义为 500 像素，我们就用以下写法：</li></ul><pre><code class="css">&lt;style&gt;  .larger-image {    width: 500px;  }&lt;/style&gt;</code></pre><h5 id="过关目标-8"><a href="#过关目标-8" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>创建一个<code>smaller-image</code>的 CSS 类，并且用这个类来缩小一个图片的大小为 100 像素宽；</li></ul><blockquote><p><strong>注意</strong>：因为浏览器的设置，有一些用户会默认把网页放大缩小了，不是默认的 100%。如果是的话，请还原 100%伸缩值后才能正常通过此关哦！</p></blockquote><h5 id="过关条件-8"><a href="#过关条件-8" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>img</code>元素需要有<code>smaller-imge</code>类；</li><li><code>img</code>元素应该是<code>100px</code>宽，并且浏览器缩放是在 100%；</li></ul><h5 id="学会了什么？-8"><a href="#学会了什么？-8" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>控制元素宽度</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-8"><a href="#答案-8" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200515085031226.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第十关」添加元素边框"><a href="#「第十关」添加元素边框" class="headerlink" title="「第十关」添加元素边框"></a>「第十关」添加元素边框</h1><blockquote><p>关卡名：<code>Add Borders Around Your Elements</code></p></blockquote><h5 id="知识点-9"><a href="#知识点-9" class="headerlink" title="知识点"></a>知识点</h5><ul><li>CSS 边框有这些属性：<code>style</code>, <code>color</code> 和 <code>width</code>；</li><li>举例：如果我们想给一个 HTML 元素创建一个红色的，5 像素边框，我们就需要用这样一个 CSS 类来实现；</li></ul><pre><code class="css">&lt;style&gt;  .thin-red-border {    border-color: red;    border-width: 5px;    border-style: solid;  }&lt;/style&gt;</code></pre><p>还有一种更简单快捷的写法：</p><pre><code class="css">&lt;style&gt;.thin-red-border {  border: 5px red solid;}&lt;/style&gt;</code></pre><h5 id="过关目标-9"><a href="#过关目标-9" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>创建一个类叫<code>thick-green-border</code>；</li><li>这个 CSS 类给 HTML 元素加入一个 10px，实线（solid）和绿色（green）的边框；</li><li>给我们的猫咪图片加入这个类；</li></ul><blockquote><p><strong>记住</strong>：我们是可以给 HTML 元素中的<code>class</code>属性添加多个类，只要使用空格分隔即可。如：<br><code>&lt;img class=&quot;class1 class2&quot;&gt;</code></p></blockquote><h5 id="过关条件-9"><a href="#过关条件-9" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>img</code>元素需要有<code>smaller-imge</code>类；</li><li><code>img</code>元素需要有<code>thick-green-border</code>类；</li><li>图片应有一个 10px 宽的边框；</li><li>图片应有一个实线的边框样式；</li><li>图片应有一个绿色的边框样式；</li></ul><h5 id="学会了什么？-9"><a href="#学会了什么？-9" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>给元素添加边框；</li><li>给边框加入宽度，线的样式和颜色；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-9"><a href="#答案-9" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200515103353182.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第十一关」使用-border-radius-实现圆边"><a href="#「第十一关」使用-border-radius-实现圆边" class="headerlink" title="「第十一关」使用 border-radius 实现圆边"></a>「第十一关」使用 border-radius 实现圆边</h1><blockquote><p>关卡名：<code>Add Rounded Corners with border-radius</code></p></blockquote><h5 id="知识点-10"><a href="#知识点-10" class="headerlink" title="知识点"></a>知识点</h5><ul><li>我们的喵咪图片现在是直角边的；</li><li>我们可以使用<code>border-radius</code>把图片的四个角改圆边；</li></ul><h5 id="过关目标-10"><a href="#过关目标-10" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>我们可以给<code>border-radius</code>一个弧度像素值；</li><li>现在给我们的猫咪图片一个<code>10px</code>的<code>border-radius</code>；</li></ul><blockquote><p><strong>注意</strong>：这一关中，是有多个接单方案的：</p><ol><li>在<code>.thick-green-border</code>中添加<code>border-radius</code>；</li><li>在<code>.smaller-image</code>中添加<code>border-radius</code>；</li></ol></blockquote><h5 id="过关条件-10"><a href="#过关条件-10" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>img</code>元素需要有<code>thick-green-border</code>类；</li><li>图片应有一个 10px 的边框弧度；</li></ul><h5 id="学会了什么？-10"><a href="#学会了什么？-10" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>给属性边框弧度；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-10"><a href="#答案-10" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200515110109963.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第十二关」实现圆形图片"><a href="#「第十二关」实现圆形图片" class="headerlink" title="「第十二关」实现圆形图片"></a>「第十二关」实现圆形图片</h1><blockquote><p>关卡名：<code>Make Circular Images with a border-radius</code></p></blockquote><h5 id="知识点-11"><a href="#知识点-11" class="headerlink" title="知识点"></a>知识点</h5><ul><li>CSS 的<code>border-radius</code>属性不止可以使用像素为单位，我们还可以使用百分比；</li></ul><h5 id="过关目标-11"><a href="#过关目标-11" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>给我们的猫咪图片一个<code>50%</code>的<code>border-radius</code>；</li></ul><h5 id="过关条件-11"><a href="#过关条件-11" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>图片应有一个<code>50%</code>的边框弧度；</li><li>图片的边框弧度必须是一个百分比值<code>50%</code>；</li></ul><h5 id="学会了什么？-11"><a href="#学会了什么？-11" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>给元素添加百分比弧度值；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-11"><a href="#答案-11" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200515110600282.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第十三关」给元素一个背景颜色"><a href="#「第十三关」给元素一个背景颜色" class="headerlink" title="「第十三关」给元素一个背景颜色"></a>「第十三关」给元素一个背景颜色</h1><blockquote><p>关卡名：<code>Give a Background Color to a div Element</code></p></blockquote><h5 id="知识点-12"><a href="#知识点-12" class="headerlink" title="知识点"></a>知识点</h5><ul><li>我们可以使用<code>background-color</code>属性来设置一个元素的背景颜色；</li><li>举例：如果我们想给一个元素绿色（<code>green</code>）的背景，我们就要给予这个元素一个<code>background-color</code>属性；</li></ul><pre><code class="css">.green-background {  background-color: green;}</code></pre><h5 id="过关目标-12"><a href="#过关目标-12" class="headerlink" title="过关目标"></a>过关目标</h5><p>Create a class called <code>silver-background</code> with the <code>background-color</code> of silver. Assign this class to your <code>div</code> element.</p><ul><li>创建一个 CSS 类<code>silver-background</code>，其中加入<code>background-color</code>属性和属性值为<code>silver</code>；</li><li>然后把这个类加入到<code>div</code>元素的<code>class</code>属性中；</li></ul><h5 id="过关条件-12"><a href="#过关条件-12" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>div</code>元素应有一个<code>silver-background</code>类；</li><li><code>div</code>元素应有银色（silver）背景颜色；</li><li><code>style</code>标签中应该有一个<code>.silver-background</code>类选择器，并且有<code>background-color</code>属性和属性值为<code>silver</code>；</li></ul><h5 id="学会了什么？-12"><a href="#学会了什么？-12" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>给元素添加背景颜色；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-12"><a href="#答案-12" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200515111343722.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第十四关」给元素-ID-值"><a href="#「第十四关」给元素-ID-值" class="headerlink" title="「第十四关」给元素 ID 值"></a>「第十四关」给元素 ID 值</h1><blockquote><p>关卡名：<code>Set the id of an Element</code></p></blockquote><h5 id="知识点-13"><a href="#知识点-13" class="headerlink" title="知识点"></a>知识点</h5><ul><li>除了<code>class</code>CSS 类属性，我们还可以给每一个 HTML 元素一个<code>id</code>属性；</li><li><code>id</code>属性是有好几个实用的用途的：我们可以用<code>id</code>选择器来给一个元素 CSS 样式属性，同时也可以让 JavaScript 找到指定<code>id</code>的元素，并且对此进行修改等；</li><li>记住，<code>id</code>属性的属性值应该是唯一的；</li><li>浏览器不会强制要求<code>id</code>的唯一性，但是在实践中被广大认可<code>id</code>是需要唯一的，所以不要在多个一个元素中赋予同一个<code>id</code>属性；</li></ul><p>举例：在我们的<code>h2</code>元素中添加一个<code>id</code>属性<code>cat-photo-app</code>：</p><pre><code class="html">&lt;h2 id=&quot;cat-photo-app&quot;&gt;&lt;/h2&gt;</code></pre><h5 id="过关目标-13"><a href="#过关目标-13" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>给<code>form</code>元素添加一个<code>id</code>属性值<code>cat-photo-form</code>；</li></ul><h5 id="过关条件-13"><a href="#过关条件-13" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>表格元素中需要有个<code>id</code>属性值为<code>cat-photo-form</code>；</li></ul><h5 id="学会了什么？-13"><a href="#学会了什么？-13" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>给元素添加<code>id</code>属性；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-13"><a href="#答案-13" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200515113512927.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第十五关」使用-ID-更改元素样式"><a href="#「第十五关」使用-ID-更改元素样式" class="headerlink" title="「第十五关」使用 ID 更改元素样式"></a>「第十五关」使用 ID 更改元素样式</h1><blockquote><p>关卡名：<code>Use an id Attribute to Style an Element</code></p></blockquote><h5 id="知识点-14"><a href="#知识点-14" class="headerlink" title="知识点"></a>知识点</h5><ul><li><code>id</code>属性与 CSS 类一样可以为他们绑上 CSS 样式；</li><li>但是区别是<code>id</code>是无法复用，只能给予一个元素（源自于我们上一关所说的原因）；</li><li>在权重之中<code>id</code>在样式表中相对比 CSS 类，它有更好的权重，如果<code>class</code>和<code>id</code>的样式同时给予一个元素，那<code>id</code>的样式会覆盖类的样式；</li></ul><p>举例：我们现在给一个<code>id</code>属性为<code>cat-photo-element</code>，然后给这个<code>id</code>属性在样式表中绑定一个背景颜色<code>background-color</code>为绿色<code>green</code>。</p><pre><code class="css">#cat-photo-element {  background-color: green;}</code></pre><blockquote><p><strong>注意</strong>：在我们的样式表<code>&lt;style&gt;</code>中，我们用<code>. + 类</code>名来声明类的样式，但是如果是<code>id</code>的话我们会用<code># + id名</code>来声明<code>id</code>的样式。</p></blockquote><h5 id="过关目标-14"><a href="#过关目标-14" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>现在尝试给我们的<code>form</code>元素一个<code>id</code>属性，属性值为<code>cat-photo-form</code>；</li><li>并且在样式表中给予这个<code>id</code>一个绿色（<code>green</code>）的背景颜色；</li></ul><h5 id="过关条件-14"><a href="#过关条件-14" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>form</code>元素中应有一个<code>id</code>属性为<code>cat-photo-form</code>；</li><li><code>form</code>元素的背景颜色应该是绿色的；</li><li><code>form</code>元素应有<code>id</code>属性；</li><li><code>form</code>元素中不能有<code>class</code>或者<code>style</code>；</li></ul><h5 id="学会了什么？-14"><a href="#学会了什么？-14" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>使用<code>id</code>属性；</li><li>在样式表中声明<code>id</code>属性的样式；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-14"><a href="#答案-14" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200515141645329.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第十六关」给元素添加内边距"><a href="#「第十六关」给元素添加内边距" class="headerlink" title="「第十六关」给元素添加内边距"></a>「第十六关」给元素添加内边距</h1><blockquote><p>关卡名：<code>Adjust the Padding of an Element</code></p></blockquote><h5 id="知识点-15"><a href="#知识点-15" class="headerlink" title="知识点"></a>知识点</h5><ul><li>我们把 Cat Photo App 放一边，先来学习更多的 HTML 样式；</li><li>可能大家都注意到了，HTML 的元素基本上都是一个个像积木一样的正方形盒子组成的；</li><li>在排版中最常用的三大属性，它们是用来控制 HTML 元素之间的空隙的：<code>padding</code>（内边距），<code>margin</code>（外边距）和<code>border</code>（ 边框）；</li><li>一个元素的<code>padding</code>，控制一个元素内容四边的空间，还有内容与<code>border</code>边框的距离；</li><li>在预览区中的蓝色与红色盒子被包裹在一个黄色盒子之中，我们应该注意到，红色盒子的<code>padding</code>比蓝色盒子的边距要宽；</li></ul><p>如果想更深入的理解内容与<code>margin</code>，<code>padding</code>和<code>border</code>之间距离，我们需要一个更好的图解方式，请看下图：</p><p><img src="https://img-blog.csdnimg.cn/20200515153110673.png#pic_center" alt=""></p><p>上图中有 3 组颜色，从内到外：<font color="blue">蓝色</font>是<code>content</code>(内容部分)，<font color="green">绿色</font>部分是<code>padding</code>(内边距)，<font color="#FFC300">黄色</font>部分是<code>border</code>(边框)，最外面的<font color="#FF5733">橙色</font>部分是<code>margin</code>(外边距)。通过这个图，我们就能清晰理解这些边距的实际产生的距离的效果。</p><ul><li>这里我们可以看到，当我们加大蓝色盒子的<code>padding</code>，盒子内容里面的字体与边框的距离就越远；</li></ul><h5 id="过关目标-15"><a href="#过关目标-15" class="headerlink" title="过关目标"></a>过关目标</h5><p>Change the <code>padding</code> of your blue box to match that of your red box.</p><ul><li>改变蓝色盒子的<code>padding</code>，从而让蓝色盒子与红色盒子的<code>padding</code>一致；</li></ul><h5 id="过关条件-15"><a href="#过关条件-15" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>蓝色盒子的<code>padding</code>应改为<code>20px</code>；</li></ul><h5 id="学会了什么？-15"><a href="#学会了什么？-15" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>使用<code>padding</code>（内边距），<code>margin</code>（外边距）和<code>border</code>(边框)；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-15"><a href="#答案-15" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/2020051516424180.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第十七关」调整元素外边距"><a href="#「第十七关」调整元素外边距" class="headerlink" title="「第十七关」调整元素外边距"></a>「第十七关」调整元素外边距</h1><blockquote><p>关卡名：<code>Adjust the Margin of an Element</code></p></blockquote><h5 id="知识点-16"><a href="#知识点-16" class="headerlink" title="知识点"></a>知识点</h5><ul><li>一个元素的<code>margin</code>(外边距)，控制这个元素与周围元素之间的空间；</li><li>所以我们可以看到黄色盒子内的蓝色盒子与红色盒子，红色盒子拥有一个更大的<code>margin</code>，同时让红色盒子看起来更小了；</li><li>当我们加大蓝色盒子的<code>margin</code>的时候，也会看到同等的变化。因为蓝色盒子与周边元素的间距会加大，同时蓝色盒子的<code>content</code>内容可以用的空间就需要伸缩适应。最后蓝色盒子就会变小了；</li></ul><p>为了更好的理解为什么内容区域宽高会变动，我们先来看看红色盒子的空间信息：</p><p><img src="https://img-blog.csdnimg.cn/20200515170336559.png#pic_center" alt=""></p><p>首先这个例子中，红色盒子的<code>content</code>内容区域是没有给宽高的，所以会根据浏览器窗口大小适应。也就是说，内容区域是一个弹性宽高盒子。这个时候我们给了<code>20px</code>的<code>padding</code>，<code>5px</code>的<code>border</code>，<code>20px</code>的<code>margin</code>。那盒子的总宽高是多少？</p><p>这个时候盒子的总宽高 = <code>content宽高</code> + <code>padding</code> + <code>border</code> + <code>margin</code> 对吧？</p><p>假设现在浏览器窗口的宽度是<code>1000px</code>，这里我们先假设外层没有一个黄色盒子，这个红色盒子可以填满这个浏览器宽度。这个时候红色盒子的<code>content</code>宽度就是:</p><blockquote><p>1000 - 20*2 (左右的<code>margin</code>外边距) - 5*2(左右的<code>border</code>边框) - 20*2(左右的<code>padding</code>内边距) = 910px。</p></blockquote><p>如果现在我把浏览器窗口变成 800px 呢？安装刚刚的公式我们会得出 710px，对内容部分少了 200px。</p><p>好了按照我们刚刚的公式，现在浏览器窗口宽度不变，只把<code>margin</code>外边距加大，这个时候内容是不是也会变？因为最终内容区域的大小都是受到<code>margin</code>，<code>border</code>和<code>padding</code>的总额所影响的？所以在上面的例子里面我们发现加大了蓝色盒子的<code>margin</code>后，蓝色盒子显然是变小了。因为我们加大了<code>margin</code>。</p><p>同时也是因为我们看到的盒子大小是基于盒子的边框，不是真的在看盒子的<code>content</code>内容部分。</p><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><p>如果我们给盒子一个宽高后，我们加大<code>padding</code>时盒子就会变大。甚至有时候在排版的过程中，使用<code>padding</code>就会发现盒子会超出了父级的元素盒子。这里我们可以深入解说一下<strong>CSS 中的两种<code>盒模型</code></strong>：</p><p><strong>盒模型</strong>：<code>标准盒模型</code></p><ul><li>盒子宽度 = 内容的宽度</li><li>盒子高度 = 内容的高度</li></ul><blockquote><p>其他间距都是额外加入的，会影响盒子总体呈现的宽高</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200515172457162.png#pic_center" alt=""></p><blockquote><p>如果不希望使用盒子的<code>padding</code>的时候影响盒子总体大小，我们就要把盒子变成<code>IE盒模型</code></p><p>在盒子的 CSS 中添加<code>box-sizing: border-box</code></p></blockquote><p><strong>盒模型</strong>：<code>IE盒模型</code></p><ul><li>盒子宽度 = border + padding + 内容的宽度</li><li>盒子高度 = border + padding + 内容的高度</li></ul><blockquote><p>盒子的框高包含了边框和内边距，所以整体的盒子高度不受<code>padding</code>和<code>border</code>影响。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200515172930443.png#pic_center" alt=""></p><h5 id="过关目标-16"><a href="#过关目标-16" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>改变蓝色盒子的<code>margin</code>，从而让蓝色盒子和红色盒子又一样的展示效果；</li></ul><h5 id="过关条件-16"><a href="#过关条件-16" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>blue-box</code>类应有<code>20px</code>的<code>margin</code>；</li></ul><h5 id="学会了什么？-16"><a href="#学会了什么？-16" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li><code>margin</code>的使用；</li><li><code>padding</code>对盒子的宽高的影响；</li><li><code>标准盒模型</code>和<code>IE盒模型</code>；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-16"><a href="#答案-16" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200516212158648.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第十八关」给元素负外边框"><a href="#「第十八关」给元素负外边框" class="headerlink" title="「第十八关」给元素负外边框"></a>「第十八关」给元素负外边框</h1><blockquote><p>关卡名：<code>Add a Negative Margin to an Element</code></p></blockquote><h5 id="知识点-17"><a href="#知识点-17" class="headerlink" title="知识点"></a>知识点</h5><ul><li>一个元素的<code>margin</code>控制它的周边与它的边框之间的空隙；</li><li>如果我们给一个元素一个负数的<code>margin</code>，这个元素会变大；</li></ul><blockquote><p>所以给一个元素负<code>margin</code>就会变大？是，也不是！<strong>但是为什么呢？<code>margin</code>是外边框，不应该会对元素的内容产生大小变动呀？</strong></p></blockquote><p>要回答这个疑问，我们首先来看看改为负<code>margin</code>之前和之后是怎么样的：</p><p><img src="https://img-blog.csdnimg.cn/2020051700262255.png#pic_center" alt=""></p><p><img src="https://img-blog.csdnimg.cn/20200517002916282.png#pic_center" alt=""></p><ul><li>首先第一最外层的<strong>黄色盒子</strong>没有定义宽高，所以它是<strong>自适应浏览器窗口宽高</strong>；</li><li>第二我们没有给<strong>蓝色盒子</strong>定义宽高，所以它的内容宽高也是<strong>跟随着父级宽高</strong>；</li><li>蓝色盒子原本的<code>margin</code>是<code>20px</code>，那盒子的宽度就是<code>149 (内容)</code> + <code>20+20 (左右内边距)</code> + <code>5+5 (左右边框)</code> = <code>199px</code>，最后还有左右的<code>20px</code>的<code>margin</code>；</li><li>蓝色黑子换成了<code>margin</code>为<code>-15px</code>后，这时宽度就是 <code>219 (内容)</code> + <code>20+20 (左右内边距)</code> + <code>5+5 (左右边框)</code> = <code>269px</code>，最后左右的<code>-15px</code>的<code>margin</code>；</li><li>以上就是最后在浏览器的盒子属性的区别，这两个之中哪个的数值变了呢？对内容的宽度变了！为什么呢？</li><li><code>219</code> - <code>149</code> = <code>70px</code>，那这 70 像素的增加是从哪里来的呢？</li><li>对的！就是<code>-15px</code>和<code>20px</code>的区别。因为蓝色盒子没有定义宽度，所以宽度是自适应的。从左右负 15 来算一共给这个盒子左右各增加了 15 像素的空间。然后原本是 20 像素的边框现在没有了，所以另外再加了左右 20 像素的距离。一共就是<code>15+15+20+20</code> = <code>70</code>。就是这样我们的内容就多了<code>70px</code>的宽度，所以蓝色盒子总体来说是不是宽度扩大了<code>70px</code>呢？懂了！</li></ul><blockquote><p>问题来了，为什么刚刚说给一个元素的<code>margin</code>变化时，<code>会，也不会</code>导致元素放大呢？主要原因是因为我们这个例子中的蓝色盒子没有给宽度。如果给了宽度，盒子正数的<code>margin</code>和负数<code>margin</code>都不会影响这个盒子的宽的。所以<strong>只有当这个盒子的宽度是自适应的时候才会导致盒子变大变小</strong>哦。</p></blockquote><h5 id="过关目标-17"><a href="#过关目标-17" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>给蓝色盒子一个负<code>margin</code>，让它与红色盒子的呈现样式一样；</li><li>把蓝色盒子的<code>margin</code>改为<code>-15px</code>，从而让蓝色盒子与红色盒子一样占了黄色盒子的总宽度；</li></ul><h5 id="过关条件-17"><a href="#过关条件-17" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>blue-gox</code>的类应有一个<code>-15px</code>的<code>margin</code>；</li></ul><h5 id="学会了什么？-17"><a href="#学会了什么？-17" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>给元素负<code>margin</code>；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-17"><a href="#答案-17" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200517010824638.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第十九关」给元素每个边缘不同的内边距"><a href="#「第十九关」给元素每个边缘不同的内边距" class="headerlink" title="「第十九关」给元素每个边缘不同的内边距"></a>「第十九关」给元素每个边缘不同的内边距</h1><blockquote><p>关卡名：<code>Add Different Padding to Each Side of an Element</code></p></blockquote><h5 id="知识点-18"><a href="#知识点-18" class="headerlink" title="知识点"></a>知识点</h5><ul><li>有时候我们需要自定义一个元素，并且要给一个元素每个边缘一个不同的<code>padding</code>；</li><li>CSS 让我们可以控制一个元素 4 个边的内边距，控制的属性分别是：<code>padding-top (上)</code>、<code>padding-right (右)</code>、<code>padding-bottom (下)</code>和<code>padding-left (左)</code>；</li></ul><h5 id="过关目标-18"><a href="#过关目标-18" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>给予我们蓝色盒子的<strong>顶部</strong>与<strong>左边</strong><code>40px</code>的<code>padding</code>, 然后<strong>底部</strong>和<strong>右边</strong><code>20px</code>；</li></ul><h5 id="过关条件-18"><a href="#过关条件-18" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>blue-box</code>类中应有<code>40px</code>的<code>padding-top</code>；</li><li><code>blue-box</code>类中应有<code>20px</code>的<code>padding-right</code>；</li><li><code>blue-box</code>类中应有<code>20px</code>的<code>padding-bottom</code>；</li><li><code>blue-box</code>类中应有<code>40px</code>的<code>padding-left</code>；</li></ul><h5 id="学会了什么？-18"><a href="#学会了什么？-18" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>单独给每一个边缘不同的内边距；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-18"><a href="#答案-18" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200517014532808.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第二十关」给元素每个边缘不同的外边距"><a href="#「第二十关」给元素每个边缘不同的外边距" class="headerlink" title="「第二十关」给元素每个边缘不同的外边距"></a>「第二十关」给元素每个边缘不同的外边距</h1><blockquote><p>关卡名：<code>Add Different Margins to Each Side of an Element</code></p></blockquote><h5 id="知识点-19"><a href="#知识点-19" class="headerlink" title="知识点"></a>知识点</h5><ul><li>有时候我们需要自定义一个元素，并且要给一个元素每个边缘一个不同的<code>margin</code>；</li><li>CSS 让我们可以控制一个元素 4 个边的外边距，控制的属性分别是：<code>margin-top (上)</code>、<code>margin-right (右)</code>、<code>margin-bottom (下)</code>和<code>margin-left (左)</code>；</li></ul><h5 id="过关目标-19"><a href="#过关目标-19" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>给予我们蓝色盒子的<strong>顶部</strong>与<strong>左边</strong><code>40px</code>的<code>margin</code>, 然后<strong>底部</strong>和<strong>右边</strong><code>20px</code>；</li></ul><h5 id="过关条件-19"><a href="#过关条件-19" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>blue-box</code>类中应有<code>40px</code>的<code>margin-top</code>；</li><li><code>blue-box</code>类中应有<code>20px</code>的<code>margin-right</code>；</li><li><code>blue-box</code>类中应有<code>20px</code>的<code>margin-bottom</code>；</li><li><code>blue-box</code>类中应有<code>40px</code>的<code>margin-left</code>；</li></ul><h5 id="学会了什么？-19"><a href="#学会了什么？-19" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>单独给每一个边缘不同的外边距；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-19"><a href="#答案-19" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200517125928189.png#pic_center" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第二十一关」使用顺时针语法指定元素内边距"><a href="#「第二十一关」使用顺时针语法指定元素内边距" class="headerlink" title="「第二十一关」使用顺时针语法指定元素内边距"></a>「第二十一关」使用顺时针语法指定元素内边距</h1><blockquote><p>关卡名：<code>Use Clockwise Notation to Specify the Padding of an Element</code></p></blockquote><h5 id="知识点-20"><a href="#知识点-20" class="headerlink" title="知识点"></a>知识点</h5><ul><li>除了使用<code>padding-top (上)</code>、<code>padding-right (右)</code>、<code>padding-bottom (下)</code>和<code>padding-left (左)</code>来给一个元素特定的内边距；</li><li>我们还可以在一行内写完一个元素的出内边距：<code>padding: 10px 20px 10px 20px;</code>；</li><li>这里面的四个数值顺时针的从上到左旋转来分配的：上，右，下，左；</li></ul><p><strong>其他语法：</strong></p><pre><code class="css">/* 应用于四个边 */padding: 1em;/* 垂直方向| 水平方向*/padding: 5% 10%;/* 顶部| 水平方向| 底部*/padding: 1em 2em 2em;/* 顶部| 右边| 底部| 左边*/padding: 2px 1em 0 1em;</code></pre><h5 id="过关目标-20"><a href="#过关目标-20" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>顺时针语法指定<code>.blue-box</code>类的顶部和左边<code>padding</code>为<code>40px</code>，然后底部和右边<code>padding</code>为<code>20px</code>；</li></ul><h5 id="过关条件-20"><a href="#过关条件-20" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>blue-box</code>类中应有<code>40px</code>的顶部<code>padding</code>；</li><li><code>blue-box</code>类中应有<code>20px</code>的右边<code>padding</code>；</li><li><code>blue-box</code>类中应有<code>20px</code>的底部<code>padding</code>；</li><li><code>blue-box</code>类中应有<code>40px</code>的左边<code>padding</code>；</li><li>使用顺时针语法来分配<code>padding</code>；</li></ul><h5 id="学会了什么？-20"><a href="#学会了什么？-20" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>使用顺时针语法给元素分配内边距；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-20"><a href="#答案-20" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/2020051713245681.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第二十二关」使用顺时针语法指定元素外边距"><a href="#「第二十二关」使用顺时针语法指定元素外边距" class="headerlink" title="「第二十二关」使用顺时针语法指定元素外边距"></a>「第二十二关」使用顺时针语法指定元素外边距</h1><blockquote><p>关卡名：<code>Use Clockwise Notation to Specify the Margin of an Element</code></p></blockquote><h5 id="知识点-21"><a href="#知识点-21" class="headerlink" title="知识点"></a>知识点</h5><ul><li>除了<code>padding</code>可以使用顺时针语法，<code>margin</code>也一样可以；</li><li>除了使用<code>margin-top (上)</code>、<code>margin-right (右)</code>、<code>margin-bottom (下)</code>和<code>margin-left (左)</code>来给一个元素特定的外边距；</li><li>我们还可以在一行内写完一个元素的出外边距：<code>margin: 10px 20px 10px 20px;</code>；</li><li>这里面的四个数值顺时针的从上到左旋转来分配的：上，右，下，左；</li></ul><p><strong>其他语法：</strong></p><pre><code class="css">margin: 5%; /* 所有的边都是 5% 的边距 */margin: 10px; /* 所有的边都是 10像素 的边距 */margin: 1.6em 20px; /* 上和下边是 1.6字距, 左和右是 20像素 边距 */margin: 10px 3% 1em; /* 上边 10像素, 左和右 3%, 下边 1字距 边距 */margin: 10px 3px 30px 5px; /* 上边 10像素, 右边 3像素, bottom 30px, left 5px margin */margin: 1em auto; /* 上和下边 1字距 边距, 该盒子是水平居中的 */margin: auto; /* 该盒子是水平居中的, 上下边距为0 */</code></pre><blockquote><p>在现代浏览器中，如果要把一些东西水平居中，使用 <code>display:flex; justify-content: center;</code> .</p><p>然而, 在一些老的浏览器，如 IE8-9, 这些是不可用的. 想要把一个元素在其父元素中居中, 使用 <code>margin: 0 auto;</code></p></blockquote><h5 id="过关目标-21"><a href="#过关目标-21" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>顺时针语法指定<code>.blue-box</code>类的顶部和左边<code>margin</code>为<code>40px</code>，然后底部和右边<code>margin</code>为<code>20px</code>；</li></ul><h5 id="过关条件-21"><a href="#过关条件-21" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>blue-box</code>类中应有<code>40px</code>的顶部<code>margin</code>；</li><li><code>blue-box</code>类中应有<code>20px</code>的右边<code>margin</code>；</li><li><code>blue-box</code>类中应有<code>20px</code>的底部<code>margin</code>；</li><li><code>blue-box</code>类中应有<code>40px</code>的左边<code>margin</code>；</li><li>使用顺时针语法来分配<code>margin</code>；</li></ul><h5 id="学会了什么？-21"><a href="#学会了什么？-21" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>使用顺时针语法给元素分配外边距；</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-21"><a href="#答案-21" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200517133101287.png#pic_center" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「待续」总结"><a href="#「待续」总结" class="headerlink" title="「待续」总结"></a>「待续」总结</h1><p><img src="https://img-blog.csdnimg.cn/20200517140828852.png" alt=""></p><p>这周我们一起闯过了 22 关，下一期我们会一起把剩余的 22 关完成。学习是一种像爬山一样的过程，要经历过漫长的上坡路，一步一个脚印。“<strong>路漫漫其修远兮，吾将上下而求索。</strong>”， 在追寻知识的道路上，前方的道路还很漫长，但我们将百折不挠，不遗余力地，上天下地的去追求和探索。让我们继续坚持学习，终身学习成长。在大前端的时代爬到技术的巅峰，做一个有深度的技术人员。</p><blockquote><p>我是<font color="#60AAF8"><b>三钻</b></font>，一个在<font color="#60AAF8"><b>技术银河</b></font>中等和你们一起来终身漂泊学习。<br>点赞是力量，关注是认可，评论是关爱！下期再见 👋！</p></blockquote><h2 id="系列阅读"><a href="#系列阅读" class="headerlink" title="系列阅读"></a>系列阅读</h2><ol><li>🔥<a href="https://blog.csdn.net/TriDiamond6/article/details/105915758" target="_blank" rel="noopener">《勇闯 28 个关卡学会 HTML 与 HTML5 基础》</a> — 这周我们一起闯过了 22 关，下一期我们会一起把剩余的 22 关完成。学习是一种像爬山一样的过程，要经历过漫长的上坡路，一步一个脚印。“路漫漫其修远兮，吾将上下而求索。”， 在追寻知识的道路上，前方的道路还很漫长，但我们将百折不挠，不遗余力地，上天下地的去追求和探索。让我们继续坚持学习，终身学习成长。在大前端的时代爬到技术的巅峰，做一个有深度的技术人员。</li></ol><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li>🔥<a href="https://blog.csdn.net/TriDiamond6/article/details/105131371" target="_blank" rel="noopener">《前端必看的 8 个 HTML+CSS 技巧》</a> — CSS 是一个很独特的语言。看起来非常简单，但是某种特殊效果看似简单，实现起来就颇有难度。这篇文章主要是给在学习前端的童鞋分享一些新的 CSS 技巧，一些在前端教程和培训课堂中不会讲到的知识。第二就是让还在前端开发这条道路上的童鞋们，重新燃起对前端排版和特效的热爱和热情！</li><li>🔥<a href="https://blog.csdn.net/TriDiamond6/article/details/105131371" target="_blank" rel="noopener">《带你体验 Vue2 和 Vue3 开发组件有什么区别》</a> — 使用 Vue2 和 Vue3 开发一个简单的表格组件来展示一下 Vue2 和 Vue3 开发组件的区别。看完这文章后，你将会有一个概念 Vue2 和 Vue3 开发组件时的区别，并且为 Vue3 的开发之路做好准备。</li></ul>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML&amp;CSS </tag>
            
            <tag> Free Code Camp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>28关学会HTML与HTML5基础</title>
      <link href="/2020/05/09/frontend/fcc-html5-basics.html"/>
      <url>/2020/05/09/frontend/fcc-html5-basics.html</url>
      
        <content type="html"><![CDATA[<h1 id="「经历」"><a href="#「经历」" class="headerlink" title="「经历」"></a>「经历」</h1><p>我自学前端已经有 6 年多了，自问当时学前端是没有系统化学习的。一开始边看文档，连滚带爬学 HTML 和 CSS 排版，然后深入研究 JavaScript，因为当时最火的就是 JQuery，所以用了很长一段时间的 JQ。</p><p>到了后面遇到有一个项目需要我做 APP 开发，但是不可能去学 IOS 开发和安卓开发，因为项目时间也不可能给我们这么充裕的学习时间。所以当时的我深入分析了几个混合 APP 开发的框架。分析对象包括当时基于 AngularJs 的 Ionic 框架和 React Native。综合考虑最后选择了 Ionic，然后自学了 Angular2。（过程也是踩过成千上万的坑学会的）</p><p>APP 开发的这个过程让我深入感觉到那时候前端的革命性变化。庞大的前端知识扑面而来，也没有想到前端已经发展到这样一个地步。这段时间让我深刻领会到前端的博大精深，并且被前端这个技术领域深深的吸引住了。</p><p>到了后面 Vue 突然开始火了，各大技术公司都开始使用 Vue+Cli 脚手架搭建前端应用。越来越多的企业要求使用 Vue 开发前端应用和 WebAPP。热爱前端的我从来不畏惧需要学更多的知识，既然 Vue 来势汹汹，我也开始深入研究和学习 Vue 开发前端。经过一番折腾 Vue 也上手了。</p><p>至今我依然在不停的学习前端无边无际的知识和技术。</p><p>最近我发现，现在学习技术容易了很多。有各种技术文章、手摸手教学、线上培训课程和视频，甚至还有全免费的线上学习课程和练习。相比以前从看文档，连滚带爬的在项目中试错式的学习真的是容易多了。</p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「前言」"><a href="#「前言」" class="headerlink" title="「前言」"></a>「前言」</h1><p>我们都深刻知道，如果想在前端走的更远更久，基础知识必须是要牢固的。最近发现一个免费学习编程的网站 <code>freeCodeCamp(🔥)</code> - <a href="https://www.freecodecamp.org" target="_blank" rel="noopener"><code>官方版（英文）</code></a> ｜ <a href="https://www.freecodecamp.one" target="_blank" rel="noopener"><code>中文社区版</code></a> 。我好学的性格牵动着我的灵魂，忍不住就去研究了一下。我发现里面的课程确实很全面，而且还有实时和实战编程练习。就算是对于零基础的童鞋，也是可以开始学习编程的。</p><p>在一个夜深人静的夜晚，我看着电脑思考人生的时候，我灵机一动，要不我开始写一个系列的文章和大家一起闯关进攻前端全方位知识点。没有闯过这些关卡的童鞋，无论前端能力如何，这个可以锻炼我们自己，也可以深入知道我们自己的前端水平和差距。想学习前端的童鞋可以从零开始学习，一起排除困难共同打开前端大门！</p><p>使用这个免费网站学习编程，每一个知识学习完成后会给大家发放一个证书，然后每一个关键学习点之后，还有项目实战。自从 2014 年，有超过 4 万个<code>freeCodeCamp</code>毕业的童鞋获得了大企业工作机会。（里面有提到谷歌，苹果，微软，亚马逊，Spotify 等公司）</p><p>还有看到一些学员的评价：</p><blockquote><ul><li>“我在实习的时候，导师就叮嘱我在 freeCodeCamp 上做题闯关。技术的精进不仅给了我强大的自信，也让我得以进入大厂 ThoughtWorks。” — 姜玉珍</li><li>“对于还没有形成编程思维的新人，即使是 leetcode 上面 easy 级别的算法题目都感到非常有难度，而 freeCodeCamp 的算法题恰好是一个良好的过渡。” — 魏朝欣</li></ul></blockquote><p>无论这些证书是否对我们在中国的企业有一定的价值。但是能获得多一个证书，没有什么不好的呀。废话不多说了，我们这里就开始勇闯第一课《基础 HTML 与 HTML5 入门》！</p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「规则」如何一起闯关"><a href="#「规则」如何一起闯关" class="headerlink" title="「规则」如何一起闯关"></a>「规则」如何一起闯关</h1><p>在开始这个闯关的系列之前，讲一下我们具体怎么一起闯关。</p><blockquote><p><strong>首先</strong>，如果我是单纯在这里给大家发布答案，我觉得这些文章就没有太大意义了。所以我希望在闯关的过程中一起学习到更多的知识，弄懂更深层的技术和用我的相关经验讲说这些知识在工作中的使用场景和小技巧。</p><hr><p>个人觉得英文版本的操作和体验都更好，加上英文版本的课题会更新。所以我会在英文版中与大家一起闯关。但是喜欢用中文社区版本也是可以的哦。酸甜苦辣各有所爱，但是效果和课题基本都是一样的哈。</p></blockquote><p><strong>每一篇文章的大概内容：</strong></p><ol><li>首先我们每一篇文章会尽量包含一个大知识点中的 N 个关卡。每一个知识点的关卡数量不一，所以有时候可能会拆分成几篇文章来讲说。</li><li>每一个关卡当中的知识点在 freeCodeCamp 中有一定的知识材料。但是在一起闯关的文章当中也会做一些详细的知识补充和一些有趣的理解方式。</li><li>每一个较难的关卡，都会在文章当中做详细的思路，多种实现方式等等的讲说，让我们在每一个关卡中能带走更多深层的知识点。</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h2 id="freeCodeCamp-使用教程"><a href="#freeCodeCamp-使用教程" class="headerlink" title="freeCodeCamp 使用教程"></a>freeCodeCamp 使用教程</h2><hr><h3 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h3><p>FCC 一共有 6 大课程，一共大约 1800 个小时的内容和练习。如果是新人，推荐从第一个开始一个一个闯关学习。如果是老司机，是来这里学习你需要的知识，那可以随意选择你需要的课程开始学习。</p><ul><li>响应式 Web 设计（300 个小时）</li><li>算法和数据结构（300 个小时）</li><li>前端库和框架（300 个小时）</li><li>数据可视化（300 个小时）</li><li>API 和微服务（300 个小时）</li><li>信息安全和质量保证（300 个小时）</li></ul><p>最后还有一个是数千个小时的面试题可以提供给我们使劲的刷哦！</p><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h3 id="进入关卡"><a href="#进入关卡" class="headerlink" title="进入关卡"></a>进入关卡</h3><p>首先我们展开第一课看一下：</p><p><img src="https://img-blog.csdnimg.cn/20200508151501995.png" alt=""></p><ol><li>第 1 点这里是基础知识的文章，可以点击查看。看完基础知识之后可以点击下方的<code>回到第一小节</code>开始闯关！</li><li>第 2 点这里下面所有的都是练习题，一个一个顺着闯关即可。</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h3 id="关卡教程"><a href="#关卡教程" class="headerlink" title="关卡教程"></a>关卡教程</h3><blockquote><p>⚠️ 注意：<br>大家闯关之前，推荐大家都先使用 GitHub 登陆，到时候颁发的证书和闯关进度才能得到保存和跟踪哦！！！</p></blockquote><p>我们先从左边 👈 部分的内容开始说明：</p><ol><li>简单讲说了这个关卡涉及的知识点</li><li>描述关卡的挑战内容</li><li>本关卡的所有目标，点击测试代码的时候，完成的会出现 ✅，没有全部 ✅ 那就是还有部分我们没有实现哦。所有 ✅ 才能通关。</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504234332698.png" alt=""></p><p>接下来就是说明中间的代码区：</p><ol><li>代码区，用于编写我们这个关卡的代码。</li><li>错误输出区域，当我们点击<code>测试代码</code>后，如果有错误就会显示在这里。</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504234641496.png" alt=""></p><p>最后，最右边的部分是代码被编译后的效果，也就是我们在代码去编写的代码最终会在浏览器呈现出来的效果哦。（这里的效果会在我们编写代码的同时触发变化哦！）</p><p><img src="https://img-blog.csdnimg.cn/2020050423175522.png" alt=""></p><p>提交代码/测试成功后：</p><p><img src="https://img-blog.csdnimg.cn/20200504234802981.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「知识」闯关基础知识点"><a href="#「知识」闯关基础知识点" class="headerlink" title="「知识」闯关基础知识点"></a>「知识」闯关基础知识点</h1><blockquote><p><strong>HTML 是什么？</strong><br>HTML 的全称是 HyperText Markup Language（超文本标签语言），它是一种用来描述网页结构的标签语言。<br>它采用一种特殊的语法或符号来组织网页的内容，元素通常都有开始标签和结束标签，例如标题、段落、列表。</p></blockquote><h2 id="更好的理解-HTML"><a href="#更好的理解-HTML" class="headerlink" title="更好的理解 HTML"></a>更好的理解 HTML</h2><p>对于没有计算机基础的童鞋（就算是有）都会觉得有点抽象，不太好理解。我们换一个说法来理解一下：</p><blockquote><p>HTML 就等同于我们人体里面的骨架，一块一块骨头（标签）组装起来建立起一个人的骨架和结构。比如说经常可以见到的<code>head</code>，<code>body</code>，<code>footer</code>等标签，就等同于一个人的<code>头</code>，<code>身体</code>和<code>脚</code>。那其他的标签比如<code>h1</code>，<code>h2</code>，<code>div</code>，<code>section</code>和<code>ul</code>，<code>li</code>等标签就是用来组建我们人体每一个部位的小骨头。</p></blockquote><center><img src="https://img-blog.csdnimg.cn/2020050417151024.png" width="200" /></center><p>如果 HTML 加上了 JavaScript（人体中的大脑和肌肉）就可以操控整个人的动作，让一个人活起来了。但是只有骨头和肌肉，这个也太难看了吧？想想都觉得吓人。所以我们会有皮肤来把这些不太好看的东西藏起来，这个时候就需要在 HTML 中使用 CSS（人体的皮肤）。这样子我们有好的皮肤加上衣服和化妆品的打扮，这样才可以貌美如花嘛对吧？</p><center><img src="https://img-blog.csdnimg.cn/20200504165855630.png" width="400" /></center><p>如果我们上面说的骨头和骨架，在代码中又是什么样子的呢？我们一起来看看：</p><pre><code class="html">&lt;h1&gt;Top level heading: Maybe a page title&lt;/h1&gt;&lt;p&gt;  A paragraph of text. Some information we would like to communicate to the viewer. This can be as  long or short as we would like.&lt;/p&gt;&lt;ol&gt;  &lt;li&gt;Number one on the list&lt;/li&gt;  &lt;li&gt;Number two&lt;/li&gt;  &lt;li&gt;A third item&lt;/li&gt;&lt;/ol&gt;</code></pre><p>这段代码被编译后就会在浏览器呈现出这个样子：</p><p><img src="https://img-blog.csdnimg.cn/20200504180352518.png" alt=""></p><h2 id="HTML5-又是什么？"><a href="#HTML5-又是什么？" class="headerlink" title="HTML5 又是什么？"></a>HTML5 又是什么？</h2><p>HTML 这种超文本源自于 Web 早期和最初的用例。当时页面都是静态文档，并且文档中也有连接和引用到其他的文档。通过浏览器中的 hypertext links（超文本链接）在文档之中跳转与导航。这样用户就可以自由的在文档之中翱翔，不用在文档直接搜索查看。</p><p>后期 web 页面和 web 应用渐渐变得越来越复杂，W3C 更新了 HTML 的规范来让所有的浏览器更加兼容彼此。为什么呢？大家应该都知道市面上有五花八门的各种浏览器，如果每一个浏览器都对 HTML 有不同的写法，不同的规范，那我们做前端开发的，有多少的浏览器规范我们就需要学会多少种写法。不用后浪推上来，已经累死在沙滩上了。</p><p>那 HTML5 其实就是第五版的 HTML 规范，也是目前最新的版本。</p><p>基础知识弄懂了，我们马上就来开始闯关吧！GO GO GO！</p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第一关」用-HTML-元素与世界问好"><a href="#「第一关」用-HTML-元素与世界问好" class="headerlink" title="「第一关」用 HTML 元素与世界问好"></a>「第一关」用 HTML 元素与世界问好</h1><blockquote><p>关卡名：<code>Say Hello to HTML Elements</code></p></blockquote><p>身在技术领域的童鞋们都知道，入门任何语言的开头都是先与世界问个好（所谓的输出一个”Hello World”）。所以第一关当然是用 HTML 元素与世界问好啦！😂</p><h5 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h5><ul><li>这一关我们看到代码区域有<code>&lt;h1&gt;hello&lt;/h1&gt;</code>这一段代码，这个就是所谓的 HTML 元素了！也就是人体中的一小块骨头 🦴！。</li><li>HTML 中每一个标签都需要开始与结束标签：<code>&lt;h1&gt;</code> 为开始，<code>&lt;/h1&gt;</code> 为结束。</li><li>开始与结束标签的区别，就是结束标签多了<code>/</code>（斜杠）。</li></ul><h5 id="过关目标"><a href="#过关目标" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>修改开始标签<code>&lt;h1&gt;</code>与关闭标签<code>&lt;/h1&gt;</code>之间的内容。</li><li>把内容从<code>Hello</code>改为<code>Hello World</code>。</li></ul><h5 id="学会了什么？"><a href="#学会了什么？" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>HTML 中的开始与结束标签的格式与规范</li><li>标签的内容是什么</li><li>如何修改标签内容</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200508232647107.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第二关」使用-H2-元素加入副标题"><a href="#「第二关」使用-H2-元素加入副标题" class="headerlink" title="「第二关」使用 H2 元素加入副标题"></a>「第二关」使用 H2 元素加入副标题</h1><blockquote><p>关卡名：<code>Headline with the h2 Element</code></p></blockquote><p>接下来的几个关卡中，我们会慢慢的一步一步的搭建一个 HTML5 的 <strong>“猫星人图片的网页应用”</strong>。</p><h5 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h5><ul><li><code>h2</code>元素是常用的副标题，其实就是比<code>h1</code>字体要小的标题，用过<code>WPS</code>或者<code>word</code>文档的童鞋应该秒懂了。</li><li>这些标题标签会告诉浏览器去显示一些默认的标题样式</li><li><code>h1</code>一般用于网页大标题，而<code>h2</code>就是用于副标题。</li><li>其实在 HTML 当中还有很多自带的标题元素，例如<code>h3</code>，<code>h4</code>，<code>h5</code>和<code>h6</code>，每一个代码一个等级的副标题，这里数字越大，标题的大小就越小哦。</li></ul><h5 id="过关目标-1"><a href="#过关目标-1" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>在<code>h1</code>标签后面（第二行）加入一个<code>h2</code>标签。</li><li>并且在<code>h2</code>元素中加入<code>CatPhotoApp</code>的文字内容。</li></ul><h5 id="过关条件"><a href="#过关条件" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>创建一个<code>h2</code>元素</li><li><code>h2</code>元素必须有一个结束标签</li><li><code>h2</code>元素必须含有”<strong>CatPhotoApp</strong>“的文字内容</li><li><code>h1</code>元素必须含有”<strong>Hello World</strong>“的文字内容</li></ul><h5 id="学会了什么？-1"><a href="#学会了什么？-1" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>什么是副标题</li><li>HTML 有哪些副标题</li><li>如何加入副标题</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-1"><a href="#答案-1" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200508232620883.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第三关」段落元素加入信息内容"><a href="#「第三关」段落元素加入信息内容" class="headerlink" title="「第三关」段落元素加入信息内容"></a>「第三关」段落元素加入信息内容</h1><blockquote><p>关卡名：<code>Inform with the Paragraph Element</code></p></blockquote><h5 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h5><ul><li><code>p</code>是<code>paragragh</code>（段落）的缩写，就是我们在写文章中的段落一样，一般都是用来放信息内容的。</li><li>我们可以用<code>&lt;p&gt;我是一个p标签&lt;/p&gt;</code>，这样的方式来加入段落元素。</li></ul><h5 id="过关目标-2"><a href="#过关目标-2" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>在我们的<code>h2</code>元素下方加入<code>p</code>元素。</li><li>在<code>p</code>元素的内容中加入文字”<strong>Hello Paragraph</strong>“。</li><li>注意：HTML 的规范中说明，<strong>所有标签的英文字母都必须使用小写！</strong></li></ul><h5 id="过关条件-1"><a href="#过关条件-1" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>代码中必须有一个规范的<code>p</code>元素。</li><li><code>p</code>元素中必须含有文字”<strong>Hello Paragraph</strong>“。</li><li><code>p</code>元素必须有一个结束标签。</li></ul><h5 id="学会了什么？-2"><a href="#学会了什么？-2" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li><code>p</code>元素是什么</li><li>如何加入信息内容段落</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-2"><a href="#答案-2" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200508232551519.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第四关」加入“占位”文字"><a href="#「第四关」加入“占位”文字" class="headerlink" title="「第四关」加入“占位”文字"></a>「第四关」加入“占位”文字</h1><blockquote><p>关卡名：<code>Fill in the Blank with Placeholder Text</code></p></blockquote><h5 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h5><ul><li>开发者们用一个传统，就是在没有内容的时候，排版时都会用统一的占位文字“<strong>lorem ipsum text</strong>”。很多人很好奇，为什么都用这个？</li></ul><blockquote><p>Lorem ipsum 从 15 世纪开始就被广泛地使用在西方的印刷、设计领域中，在电脑排版盛行之后，这段被传统印刷产业使用几百年的无意义文字又再度流行。由于这段文字以“Lorem ipsum”起头，并且常被用于标题的测试中，所以一般称为 Lorem ipsum，简称为 Lipsum。</p><hr><p>原先大家以为这段拉丁文只是没有意义的组合，目的是让阅读者不要被文章内容所影响，而只专注于观察字型或版型，并借此填满空间。但根据美国拉丁学者 Richard McClintock 的研究，Lorem ipsum 原来起源于西赛罗《善恶之尽》（De finibus bonorum et malorum）第一章（Liber Primus）的 32、33 两节。</p></blockquote><ul><li>这段占位文字用了 5 个世纪也是够长情的了，既然我们这些关卡是在搭建一个“猫星人”的应用，那么我们改为“<strong>kitty ipsum text</strong>”。😁</li></ul><h5 id="过关目标-3"><a href="#过关目标-3" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>把<code>p</code>元素的内容替换成这一段占位文字：“<strong>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</strong>”</li></ul><h5 id="过关条件-2"><a href="#过关条件-2" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>p</code>元素需要含有“<strong>kitty ipsum text</strong>”的首几个单词。</li></ul><h5 id="学会了什么？-3"><a href="#学会了什么？-3" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>什么是“<strong>lorem ipsum text</strong>”</li><li>为什么“<strong>lorem ipsum text</strong>”经常用于设计和排版的占位文案</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-3"><a href="#答案-3" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200508232456551.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第五关」清除-HTML-代码注释"><a href="#「第五关」清除-HTML-代码注释" class="headerlink" title="「第五关」清除 HTML 代码注释"></a>「第五关」清除 HTML 代码注释</h1><blockquote><p>关卡名：<code>Uncomment HTML</code></p></blockquote><h5 id="知识点-4"><a href="#知识点-4" class="headerlink" title="知识点"></a>知识点</h5><ul><li>代码注释是为了在代码中留下备注的一种常用写法。通常为了给自己和其他开发者留下有意义的备注，让大家可以更容易的懂得代码的作用或者含义。代码注释是不会影响代码的运行，或者是显示出来给到用户看到的。</li><li>代码注释还有一个非常使用的目的，就是屏蔽代码。被注释的代码就不会被编译器运行，这样被注释的代码就不会生效了。</li><li>不同语言有不同的注释写法，HTML 的注释写法开始是<code>&lt;!--</code>，结束使用<code>--&gt;</code>。例如：<code>&lt;!-- &lt;p&gt; abc &lt;/p&gt; --&gt;</code>。</li></ul><h5 id="过关目标-4"><a href="#过关目标-4" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>此关卡的代码都被注释掉了，所以所有的代码都没有生效。（预览区可以看到是空白的）</li><li>我们需要清除掉这里的注释，让<code>h1</code>，<code>h2</code>和<code>p</code>元素生效。</li></ul><h5 id="过关条件-3"><a href="#过关条件-3" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>页面预览区需要可以看到<code>h1</code>元素内容</li><li>页面预览区需要可以看到<code>h2</code>元素内容</li><li>页面预览区需要可以看到<code>p</code>元素内容</li><li>页面中没有遗漏结束注释标签<code>--&gt;</code></li></ul><h5 id="学会了什么？-4"><a href="#学会了什么？-4" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>什么是代码注释</li><li>代码注释有什么作用</li><li>如何清除代码注释</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-4"><a href="#答案-4" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200508232414817.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第六关」局部-HTML-代码注释"><a href="#「第六关」局部-HTML-代码注释" class="headerlink" title="「第六关」局部 HTML 代码注释"></a>「第六关」局部 HTML 代码注释</h1><blockquote><p>关卡名：<code>Comment out HTML</code></p></blockquote><h5 id="知识点-5"><a href="#知识点-5" class="headerlink" title="知识点"></a>知识点</h5><ul><li>上一关我们看到可以把整个代码注释掉，但是其实很多时候我们可能需要注释掉局部的代码，或者是多段代码。</li><li>使用方式也是一样的，在想开始注释的地方加入<code>&lt;!---</code>，然后结束的地方加入<code>--&gt;</code>。</li></ul><blockquote><p>⚠️ 注意：<br>在注释代码的时候要注意的一个点，HTML 的元素都是有开始与结束标签的，注释的过程中如果我们注释掉半个元素，那代码就会有结束没有开头了。这样是会报错的哦。同等概念，后面我们会学到，HTML 元素是可以加入属性的，属性也是无法单独注释的。</p></blockquote><h5 id="过关目标-5"><a href="#过关目标-5" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>注释掉整个<code>h1</code>元素和<code>p</code>元素，<code>h2</code>元素要生效。（也可以说页面上只能看到<code>h2</code>这个元素的效果）</li></ul><h5 id="过关条件-4"><a href="#过关条件-4" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>h1</code>元素应该被注释掉，页面看不到该元素效果</li><li><code>p</code>元素应该被注释掉，页面看不到该元素效果</li><li>页面预览区需要可以看到<code>h2</code>元素内容</li><li>每一段注释都应该有结束注释标签<code>--&gt;</code></li><li><code>h1</code>，<code>h2</code>和<code>p</code>元素在代码中的顺序不能变</li></ul><h5 id="学会了什么？-5"><a href="#学会了什么？-5" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>如何局部注释代码</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-5"><a href="#答案-5" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200508232349471.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第七关」删除-HTML-元素"><a href="#「第七关」删除-HTML-元素" class="headerlink" title="「第七关」删除 HTML 元素"></a>「第七关」删除 HTML 元素</h1><blockquote><p>关卡名：<code>Delete HTML Elements</code></p></blockquote><h5 id="知识点-6"><a href="#知识点-6" class="headerlink" title="知识点"></a>知识点</h5><ul><li>场景：因为手机的屏幕高度可呈现的空间不多，所以我们要把<code>h1</code>元素删除掉。</li></ul><blockquote><p>⚠️ 注意：<br>删除代码和注释代码都有一个一样的原则。就是开始与结束的标签不能缺了其中之一，要不代码就会报错。所以删除元素的时候也要注意元素的开始与结束标签的完整性。</p></blockquote><h5 id="过关目标-6"><a href="#过关目标-6" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>删除掉代码中的<code>h1</code>元素，让我们的页面更加整洁和更有空间感。</li></ul><h5 id="过关条件-5"><a href="#过关条件-5" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>h1</code>元素应该被完整的被删除</li><li>页面预览区需要可以看到<code>h2</code>元素内容</li><li>页面预览区需要可以看到<code>p</code>元素内容</li></ul><h5 id="学会了什么？-6"><a href="#学会了什么？-6" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>如何正确的删除元素</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-6"><a href="#答案-6" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200508232309358.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第八关」HTML5-元素"><a href="#「第八关」HTML5-元素" class="headerlink" title="「第八关」HTML5 元素"></a>「第八关」HTML5 元素</h1><blockquote><p>关卡名：<code>Introduction to HTML5 Elements</code></p></blockquote><h5 id="知识点-7"><a href="#知识点-7" class="headerlink" title="知识点"></a>知识点</h5><ul><li>HTML5 给我们带来了更多具备丰富代表性的 HTML 标签。这些标签包括<code>main</code>（主要内容）、<code>header</code>（头部）、<code>footer</code>（脚步）、<code>nav</code>（导航）、<code>video</code>（视频）、<code>article</code>（文章）、<code>section</code>（区域/分段内容）和更多。</li><li>这些标签给 HTML 的结构带来了更多可描述性的意义。就好像人体也有很多代表性的结构与区域名称，比如说：肱骨、股骨、腕骨、肩胛和不规则骨等等。</li><li>人体的骨头要分类，也是为了让医生更好的在大量的骨头中找到或者描述到具体的那种骨头。那 HTML5 中的这些丰富的标签也是一样的。他们可以更好的帮助<code>搜索引擎</code>找到对应的内容，加入这些标签也让我们的网页做到更好的<strong>搜索引擎优化（SEO）</strong>。</li></ul><blockquote><p><strong>什么是搜素引擎？</strong><br>我们可以把搜索引擎看作是一本很大很大的书中的目录。我们想想在现代的互联网中，全世界有多少个网站或者网页应用？如果没有一个目录让我们可以搜索，我们怎么可以找到我们想看的内容或者网站？可以说基本是不可能的！</p><hr><p><strong>搜索引擎怎么运作？</strong><br>那搜索引擎的目录是怎么生成的呢？这个世界有一种很厉害的虫，那就是”爬虫”。每天搜索引擎的公司会派出成千上万的爬虫军队出去，在互联网上到处找网站，然后进入每一个网站中阅读里面的内容。然后收集回来的内容会经过做过滤和分析，然后建立关键词等等，最后生成一个搜索目录。我们经常用的搜索引擎包括：百度搜索，谷歌搜索，搜狗搜素，360 搜素等等。</p></blockquote><p>用其中一个标签来举例，一个<code>main</code>元素中嵌套了两个子元素：</p><pre><code class="html">&lt;main&gt;  &lt;h1&gt;Hello World&lt;/h1&gt;  &lt;p&gt;Hello Paragraph&lt;/p&gt;&lt;/main&gt;</code></pre><blockquote><p>小贴士：这些 HTML5 的标签的作用和适用性会在后面的“Applied Accessibility（应用无障碍）”的课程中详细讲说。</p></blockquote><h5 id="过关目标-7"><a href="#过关目标-7" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>在原有的<code>p</code>元素下方添加一个新的<code>p</code>元素，并且加入这段内容<code>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</code></li><li>然后用一个<code>main</code>元素两个<code>p</code>元素包裹起来。</li></ul><h5 id="过关条件-6"><a href="#过关条件-6" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>应该有 2 个<code>p</code>元素，每个都有文字内容</li><li>每个<code>p</code>元素都有结束标签</li><li>第二个<code>p</code>元素的内容含有“Purr jump eat…”这段文字</li><li>代码中必须含有<code>main</code>元素</li><li><code>main</code>元素中必须含有两个<code>p</code>子元素</li><li><code>main</code>元素开始必须在第一个<code>p</code>元素之前</li><li><code>main</code>元素结束必须在第二个<code>p</code>元素之后</li></ul><h5 id="学会了什么？-7"><a href="#学会了什么？-7" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>学到了更多丰富的 HTML5 标签</li><li>学会使用<code>main</code>元素</li><li>学会嵌套元素</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-7"><a href="#答案-7" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/2020050823222173.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第九关」网站中插入图片"><a href="#「第九关」网站中插入图片" class="headerlink" title="「第九关」网站中插入图片"></a>「第九关」网站中插入图片</h1><blockquote><p>关卡名：<code>Add Images to Your Website</code></p></blockquote><h5 id="知识点-8"><a href="#知识点-8" class="headerlink" title="知识点"></a>知识点</h5><ul><li>我们可以通过使用<code>img</code>元素为我们的网页插入图片，然后使用元素中的<code>src</code>属性来指定图片地址。</li></ul><blockquote><p>⚠️ 注意：<code>img</code>元素是不需要结束标签的，它是属于自动关闭型元素。</p></blockquote><ul><li>W3C 规范中，所有<code>img</code>必须填写<code>alt</code>属性（alt 是“<strong>Alternative</strong>”的缩写，就是“<strong>替代</strong>”的意思）。当一个图片无法加载或者显示时，<code>alt</code>属性的值就会替代这个图片显示出来。</li><li>另外<code>alt</code>对于搜索引擎优化是有一定的帮助的，因为这个属性是用来描述一个图片的。如果这个图片是一只猫，对于搜索引擎的爬虫会针对图片的 Alt 取得关于这个图片的描述。这样搜索引擎才能知道这个图片大概是什么。</li></ul><blockquote><p>⚠️ 注意：</p><ul><li>如果图片是单纯为了装饰的，那<code>alt</code>就留空：<code>alt=&quot;&quot;</code></li><li>尽量不要在<code>alt</code>属性中加入特殊字符（或者符号），除非是必须的</li></ul></blockquote><p>一个完整的<code>img</code>元素例子如下：</p><pre><code class="html">&lt;img  src=&quot;https://www.your-image-source.com/your-image.jpg&quot;  alt=&quot;Author standing on a beach with two thumbs up.&quot;/&gt;</code></pre><h5 id="过关目标-8"><a href="#过关目标-8" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>在<code>main</code>元素中的<code>p</code>元素之前添加<code>img</code>元素。</li><li><code>img</code>元素的<code>src</code>属性的值指向<code>https://bit.ly/fcc-relaxing-cat</code></li><li>给予<code>img</code>元素的<code>alt</code>属性一个合适的名字：比如“Kitty” (小猫咪的意思)</li></ul><h5 id="过关条件-7"><a href="#过关条件-7" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>页面中必须有一个<code>img</code>元素。</li><li><code>img</code>元素中的<code>src</code>属性指向一个猫咪的图片地址。</li><li><code>img</code>元素中的<code>alt</code>属性值不能为空。</li></ul><h5 id="学会了什么？-8"><a href="#学会了什么？-8" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>如何使用<code>img</code>图片元素</li><li>懂得使用<code>src</code>属性</li><li>懂得使用<code>alt</code>属性</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-8"><a href="#答案-8" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200508232128378.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第十关」使用锚元素实现链接跳转"><a href="#「第十关」使用锚元素实现链接跳转" class="headerlink" title="「第十关」使用锚元素实现链接跳转"></a>「第十关」使用锚元素实现链接跳转</h1><blockquote><p>关卡名：<code>Link to External Pages with Anchor Elements</code></p></blockquote><h5 id="知识点-9"><a href="#知识点-9" class="headerlink" title="知识点"></a>知识点</h5><ul><li>在 HTML 当中，<code>a</code> (锚) 元素是用于跳转页面，可以是内部页面或者是外部页面。（内部指的是本网站内的页面，外部指的是本网站以外的其他网站的页面。）</li><li><code>a</code> 元素需要一个网页地址的属性叫<code>href</code>。也需要一个 anchor text（锚文字）：</li></ul><blockquote><p>例如：<br><code>&lt;a href=&quot;https://freecodecamp.org&quot;&gt;这个链接会跳转到 freecodecamp.org&lt;/a&gt;</code></p><ul><li>网页地址：<a href="https://freecodecamp.org" target="_blank" rel="noopener">https://freecodecamp.org</a></li><li>锚文字（其实就是跳转链接的文案）：这个链接会跳转到 freecodecamp.org</li></ul></blockquote><ul><li>使用以上例子，在浏览器中就会显示一段文字链接 “这个链接会跳转到 freecodecamp.org”，点击该链接就会跳转到<strong><a href="https://www.freecodecamp.org" target="_blank" rel="noopener">https://www.freecodecamp.org</a></strong>这个网址。</li></ul><blockquote><p>额外知识点：<br>以上例子讲说的是跳转外部链接，如果我想跳转当前网址的子页面呢？(所谓的内部跳转，但是其实还可以做到当前页面的位置跳转，这个下一个关卡就会学到咯！)</p><ul><li>比如现在我们当前的页面是”<a href="http://www.freecodecamp.org&quot;，我们的链接想跳转到“www.freecodecamp.org/learn”。" target="_blank" rel="noopener">www.freecodecamp.org&quot;，我们的链接想跳转到“www.freecodecamp.org/learn”。</a></li><li>这个时候我们的<code>a</code>元素的<code>href</code>属性可以这么写</li></ul></blockquote><pre><code class="html">&lt;a href=&quot;/learn&quot;&gt;这个链接会跳转到 freecodecamp.org/learn&lt;/a&gt;</code></pre><h5 id="过关目标-9"><a href="#过关目标-9" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>创建一个<code>a</code>元素，链接文案为“cat photos”，并且指定跳转到<code>http://freecatphotoapp.com</code></li></ul><h5 id="过关条件-8"><a href="#过关条件-8" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>a</code>元素的链接文案必须含有“cat photos”</li><li><code>a</code>元素的跳转地址必须是<code>http://freecatphotoapp.com</code>。</li><li><code>a</code>元素必须有结束标签。</li></ul><h5 id="学会了什么？-9"><a href="#学会了什么？-9" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>如何在网页中添加链接</li><li>懂得使用<code>href</code>属性</li><li>懂得如何添加链接文案</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-9"><a href="#答案-9" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200508232040589.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第十一关」使用锚元素跳转内部页面区域"><a href="#「第十一关」使用锚元素跳转内部页面区域" class="headerlink" title="「第十一关」使用锚元素跳转内部页面区域"></a>「第十一关」使用锚元素跳转内部页面区域</h1><blockquote><p>关卡名：<code>Link to Internal Sections of a Page with Anchor Elements</code></p></blockquote><h5 id="知识点-10"><a href="#知识点-10" class="headerlink" title="知识点"></a>知识点</h5><ul><li><code>a</code>（锚）元素还可以用于跳转页面内部的特定区域。</li><li>创建一个内部跳转链接，首先我们需要在<code>href</code>属性的值中绑定一个哈希符号<code>#</code>和一个唯一<code>id</code>属性。</li><li><code>id</code>属性是在 HTML 中任何一个元素都可以绑定的唯一标识。<code>id</code>属性可以给予一个元素一个唯一的识别名，让这个元素可以在 HTML 中被选择到。</li></ul><p>以下是一个内部跳转链接的例子，其中的<code>...</code>代表被省略的一段代码。</p><pre><code class="html">&lt;a href=&quot;#contacts-header&quot;&gt;Contacts&lt;/a&gt;...&lt;h2 id=&quot;contacts-header&quot;&gt;Contacts&lt;/h2&gt;</code></pre><blockquote><p><strong>我们来分析一下这个例子：</strong></p><ul><li>这里的<code>h2</code>元素被绑定了一个<code>id</code>属性，名字为“contacts-header”。</li><li>我们的<code>a</code>元素链接的指定<code>href</code>跳转地址为<code>#contacts-header</code>。</li><li>我们可以看到<code>#</code>后面的名字与<code>h2</code>的<code>id</code>值一致，就是这样点击这个链接的时候，页面就会移动到绑定了同一个名字的元素的位置。</li><li>我们要注意的是<code>id</code>属性的值，在当前页面中必须是唯一的。</li></ul></blockquote><blockquote><p>知识点：<br>在这个例子里面，我们可以看到<code>a</code>元素多了一个<code>target</code>属性。这个属性在链接中是非常常用的。我们经常用的各大电商平台，我们点击一个商品的链接都会打开一个新窗口，但是有一些链接就不会。这种就是用<code>target</code>属性控制的。</p><hr><p><code>target</code>属性的常用值有：</p><ul><li><strong>_blank</strong>：在新窗口中打开被链接文档。</li><li><strong>_self</strong>：默认。在相同的框架中打开被链接文档。</li><li><strong>_parent</strong>：在父框架集中打开被链接文档。</li><li><strong>_top</strong>：在整个窗口中打开被链接文档。</li><li>_framename_：在指定的框架中打开被链接文档。</li></ul></blockquote><h5 id="过关目标-10"><a href="#过关目标-10" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>修改我们的外部跳转链接的<code>href</code>属性为<code>#footer</code>，并且把链接的文案“cat photos”改为”Jump to Bottom”。</li><li>移除<code>target=&quot;_blank&quot;</code>属性，因为这个属性会让我们的链接在全新的窗口打开这个跳转链接。</li><li>最后在页面最底部的<code>footer</code>元素中添加<code>id</code>属性，属性值为”<strong>footer</strong>“。</li></ul><h5 id="过关条件-9"><a href="#过关条件-9" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>页面中必须含有一个锚元素</li><li>页面中只有一个 footer 标签</li><li><code>a</code>元素的<code>href</code>属性值必须是<code>#footer</code></li><li><code>a</code>元素必须没有<code>target</code>属性</li><li><code>a</code>元素的链接文章应该是“Jump to Bottom”</li><li><code>footer</code>元素的<code>id</code>属性值必须是”footer”</li></ul><h5 id="学会了什么？-10"><a href="#学会了什么？-10" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>如何在网页中添加内部链接</li><li>懂得使用<code>id</code>属性</li><li>懂得使用哈希符号链接跳转</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-10"><a href="#答案-10" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200508231953144.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第十二关」文章中嵌套锚元素"><a href="#「第十二关」文章中嵌套锚元素" class="headerlink" title="「第十二关」文章中嵌套锚元素"></a>「第十二关」文章中嵌套锚元素</h1><blockquote><p>关卡名：<code>Nest an Anchor Element within a Paragraph</code></p></blockquote><h5 id="知识点-11"><a href="#知识点-11" class="headerlink" title="知识点"></a>知识点</h5><ul><li>我们可以在文字中添加链接：</li></ul><pre><code class="html">&lt;p&gt;  Here&#39;s a  &lt;a target=&quot;_blank&quot; href=&quot;http://freecodecamp.org&quot;&gt;link to freecodecamp.org&lt;/a&gt;  for you to follow.&lt;/p&gt;</code></pre><blockquote><p><strong>分析一下这个例子的实现原理：</strong></p><ul><li>首先我们有一个文字段落<code>&lt;p&gt;Here&#39;s a ... for you to follow.&lt;/p&gt;</code></li><li>在这个文字段落中”<strong>…</strong>“的部分我们加入<code>a</code> (锚) 元素：<code>&lt;a href=&quot;http://freecodecamp.org&quot;&gt; ... &lt;/a&gt;</code>，这里我们用<code>a</code>元素包裹了”<strong>…</strong>“这个文字内容，这样这个文字内容就会变成一个链接，并且可点击跳转网页。（记住这里需要我们有开始<code>&lt;a&gt;</code>与结束<code>&lt;/a&gt;</code>标签，这样才能指定这个链接的开始与结束区域）</li><li>这里<code>a</code>元素中加入<code>target=&quot;_blank&quot;</code>可以让链接在新窗口打开，<code>href</code>属性指定了跳转链接。</li><li>最后”…”的内容在这个例子里面就是” link to freecodecamp.org”，也就是链接的文案（锚文字）。</li></ul></blockquote><h5 id="过关目标-11"><a href="#过关目标-11" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>首先在<code>main</code>元素中加入一个新的<code>p</code>元素。</li><li><code>p</code>元素中的文案写入”View more cat photos”。</li><li>使用我们原来的<code>a</code>元素替换这段文案中的“cat photos”，从而把这段文案中的”cat photos”改为一个链接。</li></ul><h5 id="过关条件-10"><a href="#过关条件-10" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>a</code>元素的链接需要指定跳转”<a href="http://freecatphotoapp.com&quot;" target="_blank" rel="noopener">http://freecatphotoapp.com&quot;</a></li><li><code>a</code>元素的链接文案应该是“cat photos”</li><li><code>a</code>元素需要被<code>p</code>元素包裹着，然后<code>main</code>元素中需要一共有 3 个<code>p</code>元素</li><li><code>a</code>元素需要被新的<code>p</code>元素包裹着，不能是其他的<code>p</code>元素</li><li><code>p</code>元素中必须含有“View more ” （more 后面需要含有一个空格）</li><li><code>a</code>元素中不能含有“View more”等文字</li><li>所有<code>p</code>元素必须有结束标签</li><li>所有<code>a</code>元素必须有结束标签</li></ul><h5 id="学会了什么？-11"><a href="#学会了什么？-11" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>在文章段落中添加链接</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-11"><a href="#答案-11" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200508231849358.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第十三关」使用哈希符号创建死链接"><a href="#「第十三关」使用哈希符号创建死链接" class="headerlink" title="「第十三关」使用哈希符号创建死链接"></a>「第十三关」使用哈希符号创建死链接</h1><blockquote><p>关卡名：<code>Make Dead Links Using the Hash Symbol</code></p></blockquote><h5 id="知识点-12"><a href="#知识点-12" class="headerlink" title="知识点"></a>知识点</h5><ul><li>有时候我们需要添加一个死链接（顾名思义，就是一个点击后无效的链接，不会触发页面跳转）</li><li>这种链接有几个用途，第一种在排版的过程中还不知道需要链接哪里，第二种就是后面这个链接交给 JavaScript 处理。（后面的 JavaScript 关卡中会讲到哦）</li></ul><p><strong>代码例子：</strong></p><pre><code class="html">&lt;a href=&quot;#&quot;&gt;死链接&lt;/a&gt;</code></pre><h5 id="过关目标-12"><a href="#过关目标-12" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>当前的<code>a</code>元素中的<code>href</code>是指向一个链接地址”<a href="http://freecatphotoapp.com&quot;" target="_blank" rel="noopener">http://freecatphotoapp.com&quot;</a></li><li>把<code>href</code>属性值改为<code>#</code>，就可以把这个锚元素变成一个死链接</li><li>这里还需要把<code>target</code>属性移除掉，要不还是会跳转页面的</li></ul><h5 id="过关条件-11"><a href="#过关条件-11" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>a</code>元素的<code>href</code>属性值是<code>#</code>，是一个死链接</li></ul><h5 id="学会了什么？-12"><a href="#学会了什么？-12" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>用哈希符号创建死链接</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-12"><a href="#答案-12" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200508231802953.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第十四关」把图片变成链接"><a href="#「第十四关」把图片变成链接" class="headerlink" title="「第十四关」把图片变成链接"></a>「第十四关」把图片变成链接</h1><blockquote><p>关卡名：<code>Turn an Image into a Link</code></p></blockquote><h5 id="知识点-13"><a href="#知识点-13" class="headerlink" title="知识点"></a>知识点</h5><ul><li>我们可以通过用<code>a</code>元素包裹一个元素，让这个元素变成一个链接</li><li>比较常用的一个例子就是使用<code>a</code>元素包裹一个<code>img</code>元素，这样就可以把一个图片变成一个链接。（也就是说，点击这个图片就可以跳转页面了）</li></ul><p><strong>代码例子：</strong></p><pre><code class="html">&lt;a href=&quot;#&quot;&gt;  &lt;img src=&quot;https://bit.ly/fcc-running-cats&quot; alt=&quot;Three kittens running towards the camera.&quot; /&gt;&lt;/a&gt;</code></pre><blockquote><p>这个例子中，我们希望这个图片的链接是一个”死链接”，所以<code>href</code>属性的值需要使用<code>#</code>。</p></blockquote><h5 id="过关目标-13"><a href="#过关目标-13" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>用<code>a</code>元素包裹页面中的<code>img</code>元素</li><li>改变后，我们在最右边的预览区把鼠标放到图片上方，我们可以看到我们的鼠标从一个“<strong>普通鼠标志</strong>”变成一个“<strong>点击手指的标志</strong>”</li></ul><h5 id="过关条件-12"><a href="#过关条件-12" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>img</code>元素需要包裹在<code>a</code>元素之中</li><li>图片的链接必须是一个死链接</li><li>所有的<code>a</code>元素必须有结束标签</li></ul><h5 id="学会了什么？-13"><a href="#学会了什么？-13" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>给图片添加链接</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-13"><a href="#答案-13" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200508231725267.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第十五关」创建无序列表"><a href="#「第十五关」创建无序列表" class="headerlink" title="「第十五关」创建无序列表"></a>「第十五关」创建无序列表</h1><blockquote><p>关卡名：<code>Create a Bulleted Unordered List</code></p></blockquote><h5 id="知识点-14"><a href="#知识点-14" class="headerlink" title="知识点"></a>知识点</h5><ul><li>HTML 当中有特殊的元素用于创建无序列表。</li><li>无序列表需要使用<code>ul</code>元素包裹着多个<code>li</code>元素，开始标签为<code>&lt;ul&gt;</code>，结束标签为<code>&lt;/ul&gt;</code>。</li></ul><p>*代码例子：**</p><pre><code class="html">&lt;ul&gt;  &lt;li&gt;牛奶&lt;/li&gt;  &lt;li&gt;芝士&lt;/li&gt;&lt;/ul&gt;</code></pre><p>这段代码就会创建一个无序列表，列表内容有“牛奶”与“芝士”。</p><h5 id="过关目标-14"><a href="#过关目标-14" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>移除代码中最后两个<code>p</code>元素。</li><li>然后添加一个<strong>无序列表</strong>，列出 3 个喵咪喜爱的东西。</li></ul><h5 id="过关条件-13"><a href="#过关条件-13" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>创建一个<code>ul</code>元素</li><li><code>ul</code>元素应该包裹着 3 个<code>li</code>元素</li><li><code>ul</code>元素必须有结束标签</li><li>所有<code>li</code>元素必须有结束标签</li><li><code>li</code>元素中必须有内容，也不能是只有空格</li></ul><h5 id="学会了什么？-14"><a href="#学会了什么？-14" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>使用<code>ul</code>元素</li><li>使用<code>li</code>元素</li><li>创建无序列表</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-14"><a href="#答案-14" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200508231648984.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第十六关」创建有序列表"><a href="#「第十六关」创建有序列表" class="headerlink" title="「第十六关」创建有序列表"></a>「第十六关」创建有序列表</h1><blockquote><p>关卡名：<code>Create an Ordered List</code></p></blockquote><h5 id="知识点-15"><a href="#知识点-15" class="headerlink" title="知识点"></a>知识点</h5><ul><li>HTML 当中还有一种叫有序列表（就是前面会按照 1，2，3，4… 以此类推）</li><li>需要使用<code>ol</code>元素包裹着多个<code>li</code>元素，开始标签为<code>&lt;ol&gt;</code>，结束标签为<code>&lt;/ol&gt;</code></li></ul><p><strong>代码例子：</strong></p><pre><code class="html">&lt;ol&gt;  &lt;li&gt;肥猪&lt;/li&gt;  &lt;li&gt;肥牛&lt;/li&gt;&lt;/ol&gt;</code></pre><p>以上这段代码会创建一个有序列表，有序的列出“肥猪”和“肥牛”。</p><h5 id="过关目标-15"><a href="#过关目标-15" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>在“<strong>Top 3 things cat hate:</strong>”的<code>p</code>元素下方加入一个有序列表</li><li>有序列表中列出 3 样喵咪讨厌的东西</li></ul><h5 id="过关条件-14"><a href="#过关条件-14" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>有一个有序列表列出 3 样喵咪讨厌的东西</li><li>有一个无序列表列出 3 样喵咪喜欢的东西</li><li>只有一个<code>ul</code>元素</li><li>只有一个<code>ol</code>元素</li><li><code>ul</code>元素中有 3 个<code>li</code>元素</li><li><code>ol</code>元素中有 3 个<code>li</code>元素</li><li>所有<code>li</code>元素必须有结束标签</li><li>所有<code>li</code>元素的内容不能为空或者只有空格</li></ul><h5 id="学会了什么？-15"><a href="#学会了什么？-15" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>使用<code>ol</code>元素</li><li>创建有序列表</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-15"><a href="#答案-15" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200508231613451.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第十七关」创建文本输入框"><a href="#「第十七关」创建文本输入框" class="headerlink" title="「第十七关」创建文本输入框"></a>「第十七关」创建文本输入框</h1><blockquote><p>关卡名：<code>Create a Text Field</code></p></blockquote><h5 id="知识点-16"><a href="#知识点-16" class="headerlink" title="知识点"></a>知识点</h5><p>接下来的几个关卡，我们一起来创建一个表单。</p><blockquote><p><strong>什么是表单？</strong></p><p>表单就是一个网页端的表格，让用户在其中填写信息提交给我们保存起来。在办理事情的时候，我们经常会需要填写表格，然后提交给工作人员。在网络上填写表格也是一样的。用户在表单中填写表格，然后提交给我们保存起来，工作人员在后台管理系统就可以对这些表格进行处理了。</p></blockquote><ul><li>一个表单就必定会有文字填写的地方，在 HTML 中我们会使用<code>input</code>元素来创建一个文本输入框，给到用户填写文字。</li></ul><p><strong>代码例子：</strong></p><pre><code class="html">&lt;input type=&quot;text&quot; /&gt;</code></pre><blockquote><p>知识点：</p><ul><li><code>input</code>元素是一个自我关闭型标签，所以不需要结束标签的。</li><li><code>input</code>元素中有一个<code>type</code>属性，这个是用来定义这个输入框的类型，这里因为我们需要文本类型，所以就是<code>text</code>。那其他类型有什么呢？其他的类型在后面的关卡中会讲到哦。</li><li><code>input</code>元素中的<code>name</code>属性也是非常重要的，后端接受表单的输入框数据时，用的就是<code>name</code>属性值来获取数据的。</li></ul></blockquote><h5 id="过关目标-16"><a href="#过关目标-16" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>在有序列表的<code>ol</code>元素下方创建一个<code>input</code>元素，<code>type</code>元素值使用“<strong>text</strong>”</li></ul><h5 id="过关条件-15"><a href="#过关条件-15" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>需要有一个<code>input</code>元素，<code>type</code>属性值为<code>text</code></li></ul><h5 id="学会了什么？-16"><a href="#学会了什么？-16" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>使用<code>input</code>元素创建文本输入框</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-16"><a href="#答案-16" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/2020050823152167.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第十八关」文本输入框中添加占位文本"><a href="#「第十八关」文本输入框中添加占位文本" class="headerlink" title="「第十八关」文本输入框中添加占位文本"></a>「第十八关」文本输入框中添加占位文本</h1><blockquote><p>关卡名：<code>Add Placeholder Text to a Text Field</code></p></blockquote><h5 id="知识点-17"><a href="#知识点-17" class="headerlink" title="知识点"></a>知识点</h5><ul><li>占位文本（Placeholder）也叫输入框提示语，这段文字会在用户为输入前在输入框中显示。</li></ul><p><strong>我们可以用以下方式加入占位文本：</strong></p><pre><code class="html">&lt;input type=&quot;text&quot; placeholder=&quot;这个是占位文本/提示语&quot; /&gt;</code></pre><blockquote><p>⚠️ 记住：</p><p><code>input</code>元素是自我结束型元素，不需要结束标签哦！</p></blockquote><h5 id="过关目标-17"><a href="#过关目标-17" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>在<code>input</code>元素当中添加<code>placeholder</code>属性，属性值为”cat photo URL”</li></ul><h5 id="过关条件-16"><a href="#过关条件-16" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>input</code>元素中有<code>placeholder</code>属性</li><li><code>placeholder</code>的属性值必须为“<strong>cat photo URL</strong>”</li><li><code>input</code>元素不需要有结束标签</li><li><code>input</code>元素语法不能有误</li></ul><h5 id="学会了什么？-17"><a href="#学会了什么？-17" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>在<code>input</code>元素中添加<code>placeholder</code>属性</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-17"><a href="#答案-17" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/2020050823143732.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第十九关」创建一个表单元素"><a href="#「第十九关」创建一个表单元素" class="headerlink" title="「第十九关」创建一个表单元素"></a>「第十九关」创建一个表单元素</h1><blockquote><p>关卡名：<code>Create a Form Element</code></p></blockquote><h5 id="知识点-18"><a href="#知识点-18" class="headerlink" title="知识点"></a>知识点</h5><ul><li>我们知道在现实生活中，提交一个表单/表格，只需要填写好后递交给一个人就可以了。但是在网页中的表单是怎么提交让我们保存起来的呢？</li><li>其实也很简单，我们首先创建一个<code>form</code>元素来建立一个表单，然后在<code>form</code>元素中添加一个<code>action</code>属性，并且给他一个提交的地址即可。</li></ul><blockquote><p><strong>小知识：</strong></p><p>我们知道现实中我们会把表格提交给工作人员，那在网页中我们提交给谁呢？我们用一个简单接地气的例子来理解一下：</p><ul><li>首先表格的内容都是电子化数据不是纸质的，那肯定是要提交给一个电子化储存的地方</li><li>电子化储存的地方就是服务器，也就是一台电脑</li><li>但是总要有一个<code>人</code>这样的东西接收我们的表单吧？是的，操控这个服务器的就是<code>后端</code></li><li>所以表单的<code>action</code>顾名思义是一个提交动作，表单需要指定给一个“人”来接收，在网络上就是“服务器地址或者后端地址”</li><li>我们再想想现实中，工作人员拿到我们的表格，会存放到文件仓库对吧？那在网络应用中电子表单的数据放哪里呢？</li><li>表单数据提交给到后端之后，后端会拿着这个数据储存到<code>数据库</code>中，数据库也就是文件库了</li></ul><p>通过这个例子大家应该可以能理解表单数据提交和储存的概念了。也更能懂得这个<code>action</code>背后的基本逻辑是什么了。</p></blockquote><p><strong>代码例子：</strong></p><pre><code class="html">&lt;form action=&quot;/url-where-you-want-to-submit-form-data&quot;&gt;  ...&lt;/form&gt;</code></pre><h5 id="过关目标-18"><a href="#过关目标-18" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>把我们的<code>input</code>元素包裹在<code>form</code>元素之中，然后在<code>form</code>元素中加入<code>action</code>属性值“<strong>/submit-cat-photo</strong>”</li></ul><h5 id="过关条件-17"><a href="#过关条件-17" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>文本输入框应该包裹在<code>form</code>元素之中</li><li><code>form</code>元素需要有<code>action</code>属性值为“/submit-cat-photo”</li><li><code>form</code>元素需要有完整的开始与结束标签</li></ul><h5 id="学会了什么？-18"><a href="#学会了什么？-18" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>如何完成使用表单</li><li>使用表单<code>form</code>元素</li><li>懂得<code>action</code>属性的意义和用法</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-18"><a href="#答案-18" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200508231340182.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第二十关」添加表单提交按钮"><a href="#「第二十关」添加表单提交按钮" class="headerlink" title="「第二十关」添加表单提交按钮"></a>「第二十关」添加表单提交按钮</h1><blockquote><p>关卡名：<code>Add a Submit Button to a Form</code></p></blockquote><h5 id="知识点-19"><a href="#知识点-19" class="headerlink" title="知识点"></a>知识点</h5><ul><li>用户输入了表单中的信息，但是没有一个提交的按钮，这个信息是不会自动提交到服务端的</li><li>所以我们需要在表单中加入<code>button</code>元素（按钮元素），并且给它的<code>type</code>属性一个“<code>submit</code>（提交动作）”的类型</li><li>用户点击这个按钮就会提交表格中所有输入框内的信息</li></ul><h5 id="过关目标-19"><a href="#过关目标-19" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>在<code>form</code>元素中的最后添加<code>button</code>元素，类型为<code>submit</code></li></ul><h5 id="过关条件-18"><a href="#过关条件-18" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>表单元素中必须含有一个按钮</li><li><code>button</code>元素必须有一个<code>type</code>属性值为<code>submit</code></li><li><code>button</code>元素中的文字内容必须是”Submit”</li><li><code>button</code>元素必须有结束标签</li></ul><h5 id="学会了什么？-19"><a href="#学会了什么？-19" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>使用<code>button</code>元素</li><li>如果添加提交表单按钮</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-19"><a href="#答案-19" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200508231256383.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第二十一关」设置一个输入框为必填-​"><a href="#「第二十一关」设置一个输入框为必填-​" class="headerlink" title="「第二十一关」设置一个输入框为必填 ​"></a>「第二十一关」设置一个输入框为必填 ​</h1><blockquote><p>关卡名：<code>Use HTML5 to Require a Field</code></p></blockquote><h5 id="知识点-20"><a href="#知识点-20" class="headerlink" title="知识点"></a>知识点</h5><ul><li>我们可以让表单中某个特定的输入框变成必填，如果用户没有填写是无法提交表单的</li><li>举例，现在我们需要一个文本输入框变成必填项，我们只需要在<code>input</code>元素中添加一个<code>require</code>属性</li></ul><p><strong>代码例子：</strong></p><pre><code class="html">&lt;input type=&quot;text&quot; required /&gt;</code></pre><blockquote><p>⚠️ 注意：<code>input</code>元素中的<code>require</code>属性是不需要填写属性值的，只要加入这个属性就起效了。</p></blockquote><h5 id="过关目标-20"><a href="#过关目标-20" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li><code>input</code>元素加入<code>required</code>属性，把输入框变成一个必填项，用户如果没有填写内容将无法提交表单</li><li>加入后尝试在输入框中没有填写内容时点击”Submit”按钮，看看 HTML5 时如何提醒我们必填内容未完成的。</li></ul><h5 id="过关条件-19"><a href="#过关条件-19" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>input</code>元素应该有一个<code>required</code>属性</li></ul><h5 id="学会了什么？-20"><a href="#学会了什么？-20" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>使用<code>input</code>元素中的<code>required</code>属性</li><li>给表单加入必填输入框</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-20"><a href="#答案-20" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200508231219256.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第二十二关」添加一组单选按钮"><a href="#「第二十二关」添加一组单选按钮" class="headerlink" title="「第二十二关」添加一组单选按钮"></a>「第二十二关」添加一组单选按钮</h1><blockquote><p>关卡名：<code>Create a Set of Radio Buttons</code></p></blockquote><h5 id="知识点-21"><a href="#知识点-21" class="headerlink" title="知识点"></a>知识点</h5><ul><li>当我们在表单中询问用户一个问题，并且希望用户只给出多选一的答案。这个时候我们就可以使用<em>单选按钮</em>。</li><li>单选按钮是<code>input</code>元素中其中一种类型。</li><li>要使用单选按钮，我们需要把每一个单选的<code>input</code>元素包裹在一个<code>label</code>元素中。这时<code>label</code>元素就会与<code>input</code>元素绑定上。意思就是<code>label</code>中的任何文字，在点击的时候都可以选中这个选项。</li><li>所有相关的单选项需要有同一个<code>name</code>属性值才能把这些单选项组成一组选项。</li><li>单选项被列为一组后，才能选择这组其中一个单选项时，才会自动去除选中其他这组里面的选项。</li></ul><p><strong>单选按钮的例子：</strong></p><pre><code class="html">&lt;label&gt;  &lt;input type=&quot;radio&quot; name=&quot;indoor-outdoor&quot; /&gt;  内门&lt;/label&gt;</code></pre><ul><li>最佳实践是在<code>label</code>元素上设置一个<code>for</code>属性，其值与输入元素的<code>id</code>属性值相匹配。这允许辅助技术在标签和子<code>input</code>元素之间创建链接关系。例如:</li></ul><pre><code class="html">&lt;label for=&quot;indoor&quot;&gt;  &lt;input id=&quot;indoor&quot; type=&quot;radio&quot; name=&quot;indoor-outdoor&quot; /&gt;  Indoor&lt;/label&gt;</code></pre><h5 id="过关目标-21"><a href="#过关目标-21" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>添加一对<code>radio</code>单选按钮到我们的表单中，每个需要有自己的<code>label</code>元素包裹着。</li><li>一个选项显示为<code>indoor</code>和另外一个选项显示<code>outdoor</code>。</li><li>两个选项的<code>name</code>属性值都必须是<code>indoor-outdoor</code>，从而把它们组成一组。</li></ul><h5 id="过关条件-20"><a href="#过关条件-20" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>需要有两个<code>radio</code>元素的单选按钮</li><li><code>radio</code>元素的单选按钮都需要有<code>name</code>属性值为<code>indoor-outdoor</code></li><li>两个<code>radio</code>元素的单选按钮都需要有自己的<code>label</code>元素包裹着</li><li>每个<code>radio</code>元素都有结束标签</li><li>一个单选为<code>indoor</code></li><li>一个单选为<code>outdoor</code></li><li>所有<code>radio</code>元素都必须在<code>form</code>元素之内</li></ul><h5 id="学会了什么？-21"><a href="#学会了什么？-21" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>使用<code>label</code>元素</li><li>使用<code>input</code>元素中的<code>radio</code>类型</li><li>如何组合一组单选项</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-21"><a href="#答案-21" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200508231133820.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第二十三关」添加一组复选框"><a href="#「第二十三关」添加一组复选框" class="headerlink" title="「第二十三关」添加一组复选框"></a>「第二十三关」添加一组复选框</h1><blockquote><p>关卡名：<code>Create a Set of Checkboxes</code></p></blockquote><h5 id="知识点-22"><a href="#知识点-22" class="headerlink" title="知识点"></a>知识点</h5><ul><li>表单中，通常用<code>checkbox</code>来建立复选框的表单问题。</li><li><code>checkbox</code>是<code>input</code>元素的其中一种类型。</li><li>要使用复选框，我们需要把每一个复选框的<code>input</code>元素包裹在一个<code>label</code>元素中。这时<code>label</code>元素就会与<code>input</code>元素绑定上。意思就是<code>label</code>中的任何文字，在点击的时候都可以选中这个选项。</li><li>所有相关的复选框需要有同一个<code>name</code>属性值才能把这些选项组成一组选项。</li><li>与单选的原理相同：最佳实践是在<code>label</code>元素上设置一个<code>for</code>属性，其值与输入元素的<code>id</code>属性值相匹配。这允许辅助技术在标签和子<code>input</code>元素之间创建链接关系</li></ul><p><strong>复选框例子：</strong></p><pre><code class="html">&lt;label for=&quot;loving&quot;&gt;  &lt;input id=&quot;loving&quot; type=&quot;checkbox&quot; name=&quot;personality&quot; /&gt;  Loving&lt;/label&gt;</code></pre><h5 id="过关目标-22"><a href="#过关目标-22" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>在<code>form</code>元素内添加一组 3 个<code>checkbox</code>类型的复选框。</li><li>每一个复选框的<code>input</code>都要有自己的<code>label</code>包裹着。</li><li>三个复选框都需要使用同一个<code>name</code>属性值为<code>personality</code>。</li></ul><h5 id="过关条件-21"><a href="#过关条件-21" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>需要有 3 个复选框元素。</li><li>每个复选框元素必须包裹着在自己的<code>label</code>元素内。</li><li>每一个<code>label</code>元素都需要有结束标签。</li><li>所有复选框都需要用同一个<code>name</code>属性值为<code>personality</code>。</li><li>所有复选框都需要添加在<code>form</code>元素之中。</li></ul><h5 id="学会了什么？-22"><a href="#学会了什么？-22" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>使用<code>input</code>元素中的<code>checkbox</code>类型</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-22"><a href="#答案-22" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200508230712438.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第二十四关」复选框与单选框中使用-value"><a href="#「第二十四关」复选框与单选框中使用-value" class="headerlink" title="「第二十四关」复选框与单选框中使用 value"></a>「第二十四关」复选框与单选框中使用 value</h1><blockquote><p>关卡名：<code>Delete HTML Elements</code></p></blockquote><h5 id="知识点-23"><a href="#知识点-23" class="headerlink" title="知识点"></a>知识点</h5><ul><li>当一个表单提交时，表单所有的数据会发送到服务端（后端），这里也包括我们选择的选择框数据。</li><li><code>checkbox</code>复选框和<code>radio</code>单选框的选中数据也是会一起提交到服务端，那后端怎么判定我们选中了那些呢？</li><li>无论是复选还是单选，后端接收到的都是选中的选项输入框<code>value</code>属性的值。</li><li>所有我们需要给每一个<code>checkbox</code>或者<code>radio</code>类型的输入框一个<code>value</code>属性。</li></ul><p><strong>代码例子：</strong></p><pre><code class="html">&lt;label for=&quot;indoor&quot;&gt;  &lt;input id=&quot;indoor&quot; value=&quot;indoor&quot; type=&quot;radio&quot; name=&quot;indoor-outdoor&quot; /&gt;  Indoor&lt;/label&gt;&lt;label for=&quot;outdoor&quot;&gt;  &lt;input id=&quot;outdoor&quot; value=&quot;outdoor&quot; type=&quot;radio&quot; name=&quot;indoor-outdoor&quot; /&gt;  Outdoor&lt;/label&gt;</code></pre><p>以上例子中，我们有两个<code>radio</code>单选框类型的输入框。假设用户选中了”Outdoor”并且提交了表单，表单数据中会含有<code>indoor-outdoor=outdoor</code>这样的参数。<code>indoor-outdoor</code>这部分来源于这个输入框的<code>name</code>属性，然后<code>outdoor</code>就是用户选中的选项的<code>value</code>属性值。</p><p>如果我们没有填写<code>value</code>属性值，用户选中了任何一个选项然后提交表单。后端接收到的数据就是<code>indoor-outdoor=on</code>。这个数据里面只能告诉我们<code>indoor-outdoor</code>这个选项，用户有选中一个值，但是是什么，我们不知道。这样这个表单的数据就没有任何意义了。所以我们一定要给每一个选项<code>input</code>元素加入一个<code>value</code>属性值。</p><h5 id="过关目标-23"><a href="#过关目标-23" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>给每一个<code>radio</code>和<code>checkbox</code>输入框类型的元素一个<code>value</code>属性值。</li><li>这里<code>value</code>属性值常规来说我们<strong>都是用英文的</strong>，在这个例子中因为我们的选项本身就是英文，所以我们直接用选项名作为<code>value</code>的值即可。</li></ul><h5 id="过关条件-22"><a href="#过关条件-22" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>其中一个<code>radio</code>的<code>value</code>属性值需要是”<strong>indoor</strong>“</li><li>其中一个<code>radio</code>的<code>value</code>属性值需要是”<strong>outdoor</strong>“</li><li>其中一个<code>checkbox</code>的<code>value</code>属性值需要是”<strong>loving</strong>“</li><li>其中一个<code>checkbox</code>的<code>value</code>属性值需要是”<strong>lazy</strong>“</li><li>其中一个<code>checkbox</code>的<code>value</code>属性值需要是”<strong>energetic</strong>“</li></ul><h5 id="学会了什么？-23"><a href="#学会了什么？-23" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>使用<code>value</code>属性</li><li>给<code>radio</code>或者<code>checkbox</code>加上<code>value</code>属性值</li><li>多选项或者单选项数据提交的原理</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-23"><a href="#答案-23" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200508230558471.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第二十五关」默认选中单选框-复选框"><a href="#「第二十五关」默认选中单选框-复选框" class="headerlink" title="「第二十五关」默认选中单选框/复选框"></a>「第二十五关」默认选中单选框/复选框</h1><blockquote><p>关卡名：<code>Check Radio Buttons and Checkboxes by Default</code></p></blockquote><h5 id="知识点-24"><a href="#知识点-24" class="headerlink" title="知识点"></a>知识点</h5><ul><li>很多时候，表单当中都会有默认选中值。</li><li>如果我们想默认选中单选项中的其中一个，或者是默认选中复选项中的几个怎么实现呢？</li><li>想默认选中，我们只需要在<code>radio</code>或者<code>checkbox</code>的<code>input</code>元素中添加<code>checked</code>属性即可（这个也是一个不需要属性值的属性）</li></ul><p><strong>代码例子：</strong></p><pre><code class="html">&lt;input type=&quot;radio&quot; name=&quot;test-name&quot; checked /&gt;</code></pre><h5 id="过关目标-24"><a href="#过关目标-24" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>把<code>radio</code>单选框组合的第一个单选项设置为默认选中。</li><li>把<code>checkbox</code>复选框组合的第一个复选项设置为默认选中。</li></ul><h5 id="过关条件-23"><a href="#过关条件-23" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>单选框组合的第一个单选项默认被选中</li><li>复选框组合的第一个复选项默认被选中</li></ul><h5 id="学会了什么？-24"><a href="#学会了什么？-24" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>给<code>radio</code>单选项或者<code>checkbox</code>复选项添加默认选中属性<code>checked</code></li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-24"><a href="#答案-24" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200508230402201.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第二十六关」将许多元素嵌套在单个-div-元素中"><a href="#「第二十六关」将许多元素嵌套在单个-div-元素中" class="headerlink" title="「第二十六关」将许多元素嵌套在单个 div 元素中"></a>「第二十六关」将许多元素嵌套在单个 div 元素中</h1><blockquote><p>关卡名：<code>Nest Many Elements within a Single div Element</code></p></blockquote><h5 id="知识点-25"><a href="#知识点-25" class="headerlink" title="知识点"></a>知识点</h5><ul><li><code>div</code>元素，也称为分割元素，是其他元素的通用容器。</li><li><code>div</code>元素也是最常用的 HTML 元素之一。</li><li>与其他非自我结束元素一样，可以使用<code>div</code>元素来开始，然后在另一行使用<code>&lt;/div&gt;</code>来结束。</li></ul><h5 id="过关目标-25"><a href="#过关目标-25" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>嵌套“Things cats love”和“Things cats hate”的两个列表到<code>div</code>元素之中</li></ul><blockquote><p>提示：把<code>&lt;div&gt;</code>开始标签放在”Things cats love”的<code>p</code>元素上方，然后<code>&lt;/div&gt;</code>结束标签在<code>&lt;/ol&gt;</code>的下方。最后整个<code>div</code>元素把所有内容包裹起来。</p></blockquote><h5 id="过关条件-24"><a href="#过关条件-24" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li><code>p</code>元素内容被包裹在<code>div</code>元素之中</li><li><code>ul</code>元素内容被包裹在<code>div</code>元素之中</li><li><code>ol</code>元素内容被包裹在<code>div</code>元素之中</li><li><code>div</code>元素必须有结束标签</li></ul><h5 id="学会了什么？-25"><a href="#学会了什么？-25" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>使用<code>div</code>元素分割内容</li><li>使用<code>div</code>元素嵌套多个元素</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-25"><a href="#答案-25" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200508235036344.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第二十七关」声明-HTML-文档的-Doctype"><a href="#「第二十七关」声明-HTML-文档的-Doctype" class="headerlink" title="「第二十七关」声明 HTML 文档的 Doctype"></a>「第二十七关」声明 HTML 文档的 Doctype</h1><blockquote><p>关卡名：<code>Declare the Doctype of an HTML Document</code></p></blockquote><h5 id="知识点-26"><a href="#知识点-26" class="headerlink" title="知识点"></a>知识点</h5><p>到目前为止，我们闯过的关卡当中包括了特定的 HTML 元素以及使用。但是那些都是一个完成 HTML 页面的其中一部分。其实还有一些元素是每一个 HTML 页面都需要存在的。</p><p>在文章的顶部我们需要告诉浏览器，我们需要使用哪一个版本的 HTML。HTML 这个语言一直在持续更新升级。各大浏览器基本都兼容最新的配置与版本（那就是 HTML5）。但是还有一些浏览器只兼容一些历史版本的 HTML（例如旧版本的 IE 浏览器）。</p><ul><li>要告诉浏览器我们需要使用那个版本的 HTML，我们需要在 HTML 文件的头部添加<code>&lt;!DOCTYPE ...&gt;</code>，这里的<code>...</code>可以写入 HTML 的某个版本。如果是 HTML5 的话，那就是<code>&lt;!DOCTYPE html&gt;</code>即可。</li><li>在这个声明的代码中<code>!</code>和<code>DOCTYPE</code>都是非常重要的，而<code>DOCTYPE</code>也是必须大写的。然后<code>html</code>这个就无大小写限制了。</li><li>跟着这段文件 HTML 版本声明就是<code>html</code>元素。所有我们网页的代码和元素都必须在<code>html</code>元素内编写。</li></ul><p><strong>HTML 代码例子：</strong></p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;  &lt;!-- Your HTML code goes here --&gt;&lt;/html&gt;</code></pre><h5 id="过关目标-26"><a href="#过关目标-26" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>在代码区域第一行，加入<code>DOCTYPE</code>声明，并且选择使用 HTML5 版本。</li><li>声明后加入<code>html</code>元素，并且在<code>html</code>元素内嵌套一个<code>h1</code>标题元素。</li><li><code>h1</code>标题元素内必须含有一个标题文案，文案可以随意填写。</li></ul><h5 id="过关条件-25"><a href="#过关条件-25" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>代码中必须含有<code>&lt;!DOCTYPE html&gt;</code>标签。</li><li>代码中必须含有<code>html</code>元素。</li><li><code>html</code>元素必须包裹着一个<code>h1</code>元素。</li></ul><h5 id="学会了什么？-26"><a href="#学会了什么？-26" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>如何声明 HTML 版本</li><li>使用<code>html</code>标签</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-26"><a href="#答案-26" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200509000812981.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「第二十八关」定义-HTML-文档的头部和主体"><a href="#「第二十八关」定义-HTML-文档的头部和主体" class="headerlink" title="「第二十八关」定义 HTML 文档的头部和主体"></a>「第二十八关」定义 HTML 文档的头部和主体</h1><blockquote><p>关卡名：<code>Define the Head and Body of an HTML Document</code></p></blockquote><h5 id="知识点-27"><a href="#知识点-27" class="headerlink" title="知识点"></a>知识点</h5><ul><li>在标准的 HTML 文档结构中，我们需要丰富这个基础结构的分区。</li><li>所以在<code>html</code>元素中我们会分出<code>head</code>头部元素和<code>body</code>主体元素。</li><li>所有<strong>CSS 引用，字体引用，网页标题</strong>等等这些网页定义的内容都是放在<code>head</code>元素之内。</li><li>然后所有页面的布局元素都需要放在<code>body</code>元素之内。</li></ul><blockquote><p>小贴士：</p><p>我们用一个一个更好的理解方式，让我们更容易记住这个规则的原理。</p><ul><li>如果我们想一下，所有的知识，思想，印象等等就等同于 HTML 当中的”<strong>CSS 引用，字体引用，网页标题</strong>“，那东西是不是都应该在我们的脑袋里面呢？所以呀“<strong>CSS 引用，字体引用，网页标题</strong>”都应该放在<code>head</code>头部元素中！</li><li>我们的骨头和骨架是不是在我们身体内呢？所以剩下所有的页面布局代码就要放在<code>body</code>主体元素中！</li></ul></blockquote><p><strong>HTML 结构代码例子：</strong></p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;  &lt;head&gt;    &lt;!-- metadata elements --&gt;    &lt;!-- CSS引用，字体引用，网页标题等等元素 --&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;!-- page contents --&gt;    &lt;!--页面的布局元素 --&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h5 id="过关目标-27"><a href="#过关目标-27" class="headerlink" title="过关目标"></a>过关目标</h5><ul><li>代码区域里面有<code>title</code>页面标题元素，<code>h1</code>文章标题元素和<code>p</code>文章段落元素。</li><li>把<code>title</code>元素嵌套到一个<code>head</code>元素中。</li><li>剩余的<code>h1</code>和<code>p</code>的内容都嵌套到一个<code>body</code>元素中。</li></ul><h5 id="过关条件-26"><a href="#过关条件-26" class="headerlink" title="过关条件"></a>过关条件</h5><ul><li>只有一个<code>head</code>元素</li><li>只有一个<code>body</code>元素</li><li><code>head</code>元素需要被<code>html</code>元素包裹着</li><li><code>body</code>元素需要被<code>html</code>元素包裹着</li><li><code>title</code>元素需要被<code>head</code>元素包裹着</li><li><code>h1</code>和<code>p</code>元素都需要被<code>body</code>元素包裹着</li></ul><h5 id="学会了什么？-27"><a href="#学会了什么？-27" class="headerlink" title="学会了什么？"></a>学会了什么？</h5><p>这关卡主要教会我们：</p><ol><li>建立完成的 HTML 文档结构</li></ol><p><img src="https://img-blog.csdnimg.cn/20200504230328260.png" alt=""></p><h5 id="答案-27"><a href="#答案-27" class="headerlink" title="答案"></a>答案</h5><p><img src="https://img-blog.csdnimg.cn/20200509002635302.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2020050422480843.png" alt=""></p><h1 id="「终」总结"><a href="#「终」总结" class="headerlink" title="「终」总结"></a>「终」总结</h1><p><img src="https://img-blog.csdnimg.cn/20200509083941200.png" alt=""><br>恭喜大家一起闯过 28 关。我们学习到了 HTML 与 HTML5 的基础知识。虽然说这些都是很基础的知识，可以说闯过这 28 关，前端入门级别都还没有到。但是庞大与伟大的事业和建筑物都是从稳固的基础建立起来的。无论是多么简单还是无比困难的任务，我们都需要耐心和细心对待，把每一件小事都做到极致，才能逐步壮大，成功才会在远方等着我们。</p><p>下一期，我们开始第二课，深入浅出 CSS 基础。一起继续闯关打怪，打开前端技术大门。敬请期待哦！</p><blockquote><p>我是<font color="#60AAF8"><b>三钻</b></font>，一个在<font color="#60AAF8"><b>技术银河</b></font>中等和你们一起来终身漂泊学习。<br>点赞是力量，关注是认可，评论是关爱！下期再见 👋！</p></blockquote><h2 id="系列阅读"><a href="#系列阅读" class="headerlink" title="系列阅读"></a>系列阅读</h2><ul><li>🔥<a href="https://blog.csdn.net/TriDiamond6/article/details/106048140" target="_blank" rel="noopener">《44 关学习 CSS 与 CSS3 基础「一」》</a> — 这周我们一起闯过了 22 关，下一期我们会一起把剩余的 22 关完成。学习是一种像爬山一样的过程，要经历过漫长的上坡路，一步一个脚印。“路漫漫其修远兮，吾将上下而求索。”， 在追寻知识的道路上，前方的道路还很漫长，但我们将百折不挠，不遗余力地，上天下地的去追求和探索。让我们继续坚持学习，终身学习成长。在大前端的时代爬到技术的巅峰，做一个有深度的技术人员。</li><li>🔥<a href="https://blog.csdn.net/TriDiamond6/article/details/107285452" target="_blank" rel="noopener">《44 关学习 CSS 与 CSS3 基础「二」》</a> —— 我有一段时间没有更新 FCC 前端教程了，这一周就继续写完 CSS 与 CSS3 基础的教程。最近工作和生活都比较繁忙所以文章更新也受到了一定的影响。不过技术文章写作再忙也不会放弃的。我会继续努力坚持着一周一篇文章的进度，继续为大家带来我学习到的知识。让我们一起继续终身学习吧！</li></ul><h2 id="推荐系列"><a href="#推荐系列" class="headerlink" title="推荐系列"></a>推荐系列</h2><p>小伙伴们可以<strong>查看或者订阅相关的专栏</strong>，从而集中阅读相关知识的文章哦。</p><ul><li><p>📖 <a href="https://blog.csdn.net/tridiamond6/category_10036942.html" target="_blank" rel="noopener">《数据结构与算法》</a> — 到了如今，如果想成为一个高级开发工程师或者进入大厂，不论岗位是前端、后端还是 AI，算法都是重中之重。也无论我们需要进入的公司的岗位是否最后是做算法工程师，前提面试就需要考算法。</p></li><li><p>📖 <a href="https://blog.csdn.net/tridiamond6/category_9782493.html" target="_blank" rel="noopener">《FCC 前端集训营》</a> — 根据 FreeCodeCamp 的学习课程，一起深入浅出学习前端。稳固前端知识，一起在 FreeCodeCamp 获得证书</p></li><li><p>📖 <a href="https://blog.csdn.net/tridiamond6/category_9782493.html" target="_blank" rel="noopener">《前端星球》</a> — 以实战为线索，深入浅出前端多维度的知识点。内含有多方面的前端知识文章，带领不懂前端的童鞋一起学习前端，在前端开发路上童鞋一起燃起心中那团火 🔥</p></li></ul><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li>🔥<a href="https://blog.csdn.net/TriDiamond6/article/details/105131371" target="_blank" rel="noopener">《前端必看的 8 个 HTML+CSS 技巧》</a> — CSS 是一个很独特的语言。看起来非常简单，但是某种特殊效果看似简单，实现起来就颇有难度。这篇文章主要是给在学习前端的童鞋分享一些新的 CSS 技巧，一些在前端教程和培训课堂中不会讲到的知识。第二就是让还在前端开发这条道路上的童鞋们，重新燃起对前端排版和特效的热爱和热情！🔥</li><li>🔥<a href="https://blog.csdn.net/TriDiamond6/article/details/105131371" target="_blank" rel="noopener">《带你体验 Vue2 和 Vue3 开发组件有什么区别》</a> — 使用 Vue2 和 Vue3 开发一个简单的表格组件来展示一下 Vue2 和 Vue3 开发组件的区别。看完这文章后，你将会有一个概念 Vue2 和 Vue3 开发组件时的区别，并且为 Vue3 的开发之路做好准备。ღ(◔ڼ◔ღ)ミ</li><li>🔥<a href="https://blog.csdn.net/TriDiamond6/article/details/104731734" target="_blank" rel="noopener">《VSCode 常用快捷键大全｜ VSCode 高级玩家宝典之第一篇》</a> — 所以对于个好的程序员，一个好的代码编辑器可以起到很大的作用，在开发的过程中可以给我们带来很多便利、帮助、效率和影响。甚至一个好的编辑器可以给开发者日常编程中带来更高的喜悦感。</li><li>🔥<a href="https://blog.csdn.net/TriDiamond6/article/details/105604427" target="_blank" rel="noopener">《VSCode 插件大全｜ VSCode 高级玩家宝典之第二篇》</a> — VSCode 没有安装插件，就等同于一把枪没有安装配件，打把的时候还是缺失精准度，开枪的时候也会有很重的后坐力。当然没有插件，也可以很好的编写代码，就是没有那么强而已。</li><li>🔥<a href="https://blog.csdn.net/TriDiamond6/article/details/105625260" target="_blank" rel="noopener">《VSCode 配置同步｜ VSCode 高级玩家宝典之第三篇》</a> — 有了武功秘籍（快捷键）和高深的内功心法（插件），那 VSCode 是不是应该是无敌了呢？天灾难逃，人祸难免，我们电脑可能会坏或者电脑还可能要退休，甚至是我们有多台电脑的可能。那这个时候我们精心配置的 VSCode 不是要从头再来？</li></ul><p><img src="https://img-blog.csdnimg.cn/20200620093918128.png#pic_center" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML&amp;CSS </tag>
            
            <tag> Free Code Camp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode配置同步</title>
      <link href="/2020/05/01/tools/vscode-setting-sync.html"/>
      <url>/2020/05/01/tools/vscode-setting-sync.html</url>
      
        <content type="html"><![CDATA[<p>在上两篇文章中，我们学到了VSCode是怎么使用快捷键让我们编写代码时更灵活便捷，甚至是可以基本脱离鼠标。还介绍了很多常用的插件让我们如虎添翼，就像VSCode穿上了传奇级别的装配一样。</p><p>还没有阅读以上说到的两篇文章<a href="https://tridiamond.blog.csdn.net/article/details/105455341" target="_blank" rel="noopener">《VSCode常用快捷键大全》</a>，<a href="https://tridiamond.blog.csdn.net/article/details/105604427" target="_blank" rel="noopener">《VSCode插件大全》</a>，可以先过去学习学习哈。</p><p>有了武功秘籍（快捷键）和高深的内功心法（插件），那VSCode是不是应该是无敌了呢？天灾难逃，人祸难免，我们电脑可能会坏或者电脑还可能要退休，甚至是我们有多台电脑的可能。那这个时候我们精心配置的VSCode不是要从头再来？</p><p>所以这篇文章我来给大家介绍一个VSCode的插件专门来解决这个问题。​读完这篇文章我们将学会如果一键同步所有VSCode中精心配置的插件，快捷键和配置。</p><h1 id="「一」配置同步插件"><a href="#「一」配置同步插件" class="headerlink" title="「一」配置同步插件"></a>「一」配置同步插件</h1><p><img src="https://img-blog.csdnimg.cn/2020043022371314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><code>Settings Sync</code>是一款免费好用的VSCode插件。它是一款使用GitHub中的Gists作为配置文件存储来实现同步的。它可以让我们在无数个设备上同步VSCode的配置。</p><p>可以为我们同步以下内容：</p><ul><li>配置文件</li><li>快捷键配置</li><li>启动文件记录</li><li>Snipper文件（自定义代码模版）</li><li>VSCode插件和插件配置</li><li>Workspace文件夹</li></ul><p><img src="https://img-blog.csdnimg.cn/2020042817032070.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p>听起来确实觉得很高大上，但是真的如此容易就可以做到所说的效果吗？确实是的，配置不复杂也不繁琐。最多就是复制黏贴以下一个ID，而且首次使用都是自动的。只要登陆GitHub，然后接下来的一切就可以交给这个插件的脚本了。</p><p>虽然说简单，但是我第一次配置的时候也掉坑了几次，所以接下来我一步一步给小伙伴们讲解详细的配置方式。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzExLzE3MTY4NzdiNmRhMzMzNGM?x-oss-process=image/format,png" alt=""></p><h1 id="「二」插件配置与搭建"><a href="#「二」插件配置与搭建" class="headerlink" title="「二」插件配置与搭建"></a>「二」插件配置与搭建</h1><p><img src="https://img-blog.csdnimg.cn/2020043022264482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p>插件的文档简单的描述了使用步骤，但是个人在使用的过程中，还是觉得颇为迷惑。很多细节方面如果文档有的话就可以少掉几根头发了。</p><p>​所以这里我整理了一套手牵手教程带大家一起把配置同步一起搭起来。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="安装-Settings-Sync与准备"><a href="#安装-Settings-Sync与准备" class="headerlink" title="安装 Settings Sync与准备"></a>安装 Settings Sync与准备</h2><p>在插件搜索栏输入<code>Settings Sync</code>然后狠狠的按下<code>安装</code>按钮。</p><p>在介绍这个插件的时候提到，这个插件是使用<code>GitHub</code>账号中的<code>Gists</code>来储存配置的，所以我们必须要有一个<code>GitHub账号</code>。如果已经有Github账号的可以跳过注册教程。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="注册GitHub"><a href="#注册GitHub" class="headerlink" title="注册GitHub"></a>注册GitHub</h2><p><a href="https://github.com/join" target="_blank" rel="noopener"> 👉<code>「 点击这里注册一个账号 」</code> 👈 </a></p><ul><li><strong>Username</strong>：填入你的用户名，如果以后有做开源项目的打算，给自己取个好名，可能会跟你一辈子的哦。</li><li><strong>Email address</strong>：填入我们常用的电子邮箱。</li><li><strong>Password</strong>：顾名思义，填入我们的登陆密码。</li><li><strong>Email preferences</strong>： 勾上的话，GitHub会不定时给你邮箱发送产品更新，公告或者是优惠等通知。（不想被邮件打扰，可以不勾）</li></ul><p><img src="https://img-blog.csdnimg.cn/20200429091437826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p>账号信息这里的防机器人验证，只需要点击图片两方的箭头让图片旋转到图片的正确方向然后点击<code>Done</code>即可。然后点击<code>Create account</code>。</p><p><img src="https://img-blog.csdnimg.cn/20200429091852332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><blockquote><p>如果点击<code>Create account</code>后出现以下错误，证明是你的密码安全级别不够，GitHub认为你的密码太容易被猜到。所以推荐大家的密码要用“大小写+数字+符号”的规则。<br><img src="https://img-blog.csdnimg.cn/20200429092627398.png" alt=""></p></blockquote><p>点击<code>Create account</code>之后，GitHub会开始验证你的账号 … …<br><img src="https://img-blog.csdnimg.cn/20200429093435358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p>最后还会出现一次刚刚说到的防机器人验证图片。旋转好这个图片，然后点击<code>Join a free plan</code>即可（顾名思义，“加入免费套装”）。</p><p><img src="https://img-blog.csdnimg.cn/20200429093658213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p>注册成功后会到达这个页面，这里会问你几个问题：</p><ol><li>What kind of word do you do, mainly? — 你主要是从事那种工作？</li><li>How much programming experience do you have? — 您的编程熟悉程度？</li><li>What do you plan to use GitHub for? — 您准备用GitHub来做什么？</li><li>I am interested in — 您对什么感兴趣？</li></ol><p>这些问题如果你在意的话，可以回答下，主要用于Github给你推送/推荐项目的。最后点击 <code>Complete setup</code>，就可以了。<br><img src="https://img-blog.csdnimg.cn/20200429111355320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p>最后GitHub会给我们的电子邮箱发一封验证邮件，前往我们的邮箱点击验证链接就可以完成GitHub的账号注册了。</p><p><img src="https://img-blog.csdnimg.cn/2020042911320793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="用GitHub账号登陆"><a href="#用GitHub账号登陆" class="headerlink" title="用GitHub账号登陆"></a>用GitHub账号登陆</h2><p>前面说到这个插件是基于GitHub中的Gist来储存配置的，所以我们需要使用GitHub授权登陆，获取到Gist的读写权限才能实现配置的保存和读取。简单来说所有我们的配置数据，都被储存在我们GitHub上的Gist之中。方便保存和下载。</p><p><img src="https://img-blog.csdnimg.cn/20200430112948289.png" alt=""></p><h3 id="授权登陆GitHub"><a href="#授权登陆GitHub" class="headerlink" title="授权登陆GitHub"></a>授权登陆GitHub</h3><p>安装好VSCode之后会自动出现这个页面，如果你们是第一次使用，点击<code>LOGIN WITH GITHUB</code></p><p><img src="https://img-blog.csdnimg.cn/20200430111058730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><blockquote><p>以前我看过有很多教程，要我们到GitHub上创建个人访问令牌之类的。那些都是过时的配置方式，现在可以直接通过VSCode插件页面登陆GitHub，即可获取到一个自动生成的私密个人令牌。这种方式方便多了。</p></blockquote><p>点击后，VSCode上方会弹出一个提示框，狠狠的点击<code>打开</code>就完事！</p><p><img src="https://img-blog.csdnimg.cn/20200430112819265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><blockquote><p>当然谨慎和强迫症的童鞋很害怕任何链接，感觉都是诈骗。不用怕这里其实就是这个插件尝试打开一个GitHub的授权页面，从而获得我们GitHub中的访问令牌。</p></blockquote><p>此刻VSCode会使用我们的默认浏览器打开GitHub的授权页面。大家不用慌，这个授权只是授权给VSCode配置同步插件读写权限和账号基本信息（包含，名字，用户名等，不会暴露自己的敏感信息的）。所以大家可以安心和狠狠的点击<code>Authorize shanalikhan</code>即可授权!</p><p><img src="https://img-blog.csdnimg.cn/20200430113120118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p>授权成功后，页面会跳转到这样一个页面，中间写着<code>“成功！您现在可以关闭此页面&quot;</code>。这个时候好奇的童鞋会问：为什么我们的URL是 <code>http://localhost:54321/callback?code=XXXXXXXXXX:</code>？</p><p>其实就是配置同步的插件开启的监听地址，用来获取GitHub回调传回来的<code>Code</code>密钥。现在我们可以回到VSCode当中，看看有什么变化。</p><p><img src="https://img-blog.csdnimg.cn/20200430115529943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p>回到VSCode，如果我们是看到以下的页面证明成功登陆了！🎉</p><p><img src="https://img-blog.csdnimg.cn/20200430143941400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><blockquote><p>🌟如果回到VSCode发现右下角出现这个报错，一般都是因为GitHub的接口连接失败。这个可能是突然GitHub无法访问成功导致的。（毕竟我们是在伟大的网络城墙之下的，所以有时候有连接GitHub的问题是很正常的）<br><br/><br>如果是遇到这个问题，只要我们回到 <code>Settings Sync</code> 的首页，再充满信仰的点一次 <code>LOGIN WITH GITHUB</code>。第二次基本都是可以的了。<br><img src="https://img-blog.csdnimg.cn/20200430120222106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20200430120320859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200430112948289.png" alt=""></p><h3 id="使用原有配置"><a href="#使用原有配置" class="headerlink" title="使用原有配置"></a>使用原有配置</h3><p>如果我们曾经使用过这个配置同步插件，先在另外一台电脑上的全新VSCode编辑器安装这个插件，然后使用同一个GitHub账号登陆。这个时候我们就会发现，这个页面会展示我们历史的Gist配置记录（如下图）。</p><p>如果有历史记录，我们可以选择一个记录，然后一键下载这些配置到当前的VSCode。这样所有我们同步过的插件，快捷键配置，编辑器配置和主题等等都会自动下载下来。完美的还原与我们之前VSCode的使用场景！</p><p><img src="https://img-blog.csdnimg.cn/20200430151651137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20200430112948289.png" alt=""></p><h3 id="创建全新配置"><a href="#创建全新配置" class="headerlink" title="创建全新配置"></a>创建全新配置</h3><p>如果我们是第一次使用，我们只需要在这里点击 <code>SKIP</code> 即可。当我们首次上传配置的时候，就会创建一个新的Gist来保存。</p><p><img src="https://img-blog.csdnimg.cn/20200430163153363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzExLzE3MTY4NzdiNmRhMzMzNGM?x-oss-process=image/format,png" alt=""></p><h1 id="「三」使用指南"><a href="#「三」使用指南" class="headerlink" title="「三」使用指南"></a>「三」使用指南</h1><p><img src="https://img-blog.csdnimg.cn/20200430223319246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p>上面我们配置好了VSCode中的配置同步插件<code>Settings Sync</code>，我们开始讲讲该如何使用这个插件来同步的。</p><p><img src="https://img-blog.csdnimg.cn/20200430112948289.png" alt=""></p><h2 id="上传配置"><a href="#上传配置" class="headerlink" title="上传配置"></a>上传配置</h2><p>快捷键：</p><ul><li>Windows/Linux：<code>Shift</code> + <code>Alt</code> + <code>U</code></li><li>Mac：<code>Shift</code> + <code>Option</code> + <code>U</code></li></ul><blockquote><p>🌟打开编辑器命令行 <code>Command</code> + <code>Shift</code> + <code>P</code> （Mac）然后输入 <code>&gt;Sync: Update/Upload Settings</code>。可以不全部输入完，只需要输入头几个字母就可以看到这个命令了。然后直接选择就可以了。<br><img src="https://img-blog.csdnimg.cn/20200430164906217.png" alt=""></p></blockquote><p>当我们上传配置的时候，右下角会提醒我们，是否需要强制上传或者下载配置，并且覆盖GitHub Gist上面的配置数据。这个是为了防止我们误操作覆盖了自己的配置文件。</p><blockquote><p>⚠️ 比如我们现在在一台全新的电脑，安装了一个全新的VSCode，目前是没有安装任何插件和设置任何配置的。这个时候我们首先是需要下载Gist上面的配置设置对吧？如果我们误操作了，先运行了上传配置呢？那么我们本地的空配置就会覆盖了Gist上面我们精心配置好的。这个时候我们就会把一个没有任何插件和自定义过的VSCode配置覆盖了Gist上面的。<br><br/><br>不过也不用太怕，只要我们回到另外一台电脑把那台电脑的VSCode配置强制覆盖上去，配置文件就还原了。但是如果我们设置了自动强制上传和下载的话。那就炸锅了，没救了。所以强制和自动同步我们一定要慎重使用。</p></blockquote><p>我们这个时候就是想上传目前最新的配置设置到Gist上，所以我们狠狠的点击<code>是</code>就完事儿了！<br><img src="https://img-blog.csdnimg.cn/20200430212829860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p>上传完毕之后，我们会看到在<code>输出</code>栏中的上传日志：</p><p><img src="https://img-blog.csdnimg.cn/20200430214113375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://img-blog.csdnimg.cn/20200430112948289.png" alt=""></p><h2 id="下载配置"><a href="#下载配置" class="headerlink" title="下载配置"></a>下载配置</h2><p>快捷键：</p><ul><li>Windows/Linux：<code>Shift</code> + <code>Alt</code> + <code>D</code></li><li>Mac：<code>Shift</code> + <code>Option</code> + <code>D</code></li></ul><blockquote><p>🌟打开编辑器命令行 <code>Command</code> + <code>Shift</code> + <code>P</code> （Mac）然后输入 <code>&gt;Sync: Download Settings</code>。可以不全部输入完，只需要输入头几个字母就可以看到这个命令了。然后直接选择就可以了。<br><img src="https://img-blog.csdnimg.cn/20200430224252624.png" alt=""></p></blockquote><p>下载的过程中，下面的控制台的<code>输出</code>栏会输出所有下载日志。</p><blockquote><p>🌟 我们的插件会自动重新下载到VSCode中，所有快捷键和用户自定义配置都会自动重新同步下来。因为有某些插件是需要重启VSCode才生效的，所以同步完之后最好重启下编辑器。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200430225455758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://img-blog.csdnimg.cn/20200430112948289.png" alt=""></p><h2 id="重置插件配置"><a href="#重置插件配置" class="headerlink" title="重置插件配置"></a>重置插件配置</h2><p>如果我们想归零，重新配置这个插件。这个时候我们可以使用插件自带的重置功能。</p><blockquote><p>🌟打开编辑器命令行 <code>Command</code> + <code>Shift</code> + <code>P</code> （Mac）然后输入 <code>&gt;Sync: Reset Extension Settings</code>。可以不全部输入完，只需要输入头几个字母就可以看到这个命令了。然后直接选择就可以了。<br><img src="https://img-blog.csdnimg.cn/20200430231909785.png" alt=""></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200430112948289.png" alt=""></p><h2 id="强制下载"><a href="#强制下载" class="headerlink" title="强制下载"></a>强制下载</h2><p><strong>强制下载默认是关闭的</strong>。当本地记录的配置版本是最新的版本（插件是根据时间来判断的），就不会自动强制下载最新的Gist上的配置了。但是如果我们在本地的VSCode中删除了某些插件，并且我们没有上传到Gist上。这个时候根据配置记录来说是没有更新的云配置的，所以不会自动获取最新的云配置，也就是说缺失的插件是不会自动补回来。</p><p>如果我们把强制下载开启，就会在每次VSCode启动的时从Gist上下载最新的配置，有缺失的插件会被补回来，有改变了的配置也会被覆盖回来哦。</p><p>在某种情况下，这个是很实用的，比如有时候我们只是在某种开发条件或者环境下，改变了一下配置，或者禁用了一下插件，或者是在尝试几个不同的配置与插件。等我们完成之后希望可以用回原来的配置。这个时候就很实用了。</p><blockquote><p>🌟打开编辑器命令行 <code>Command</code> + <code>Shift</code> + <code>P</code> （Mac）然后输入 <code>&gt;Sync: Advance Options</code>。<br><img src="https://img-blog.csdnimg.cn/20200430233501708.png" alt=""><br>选择后会出现一个设置列表，找到<code>Sync：开关强制下载</code>，选择后可以开启/关闭此设置。<br><img src="https://img-blog.csdnimg.cn/20200430233707187.png" alt=""></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200430112948289.png" alt=""></p><h2 id="改变时自动上传"><a href="#改变时自动上传" class="headerlink" title="改变时自动上传"></a>改变时自动上传</h2><p>自动上传默认是关闭的。如果我们不希望每次改变了配置后，快捷键和插件需要手动上传到Gist。我们可以开启<strong>改变时自动上传</strong>。这样还可以避免我们在不同电脑改变了VSCode配置和插件后忘记上传，回到家后下载不了最新的配置。</p><blockquote><p>🌟打开编辑器命令行 <code>Command</code> + <code>Shift</code> + <code>P</code> （Mac）然后输入 <code>&gt;Sync: Advance Options</code>。<br><img src="https://img-blog.csdnimg.cn/20200430233501708.png" alt=""><br>选择后会出现一个设置列表，找到<code>Sync：切换配置更新后自动上传</code>，选择后可以开启/关闭此设置。<br><img src="https://img-blog.csdnimg.cn/2020043023382258.png" alt=""></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200430112948289.png" alt=""></p><h2 id="开启-关闭摘要输出"><a href="#开启-关闭摘要输出" class="headerlink" title="开启/关闭摘要输出"></a>开启/关闭摘要输出</h2><p>上传与下载是输出的日志是默认开启的。这个日志会输出所有新增和删除的文件和插件。我们可以通过这个设置把其关闭。</p><blockquote><p>🌟打开编辑器命令行 <code>Command</code> + <code>Shift</code> + <code>P</code> （Mac）然后输入 <code>&gt;Sync: Advance Options</code>。<br><img src="https://img-blog.csdnimg.cn/20200430233501708.png" alt=""><br>选择后会出现一个设置列表，找到<code>Sync：开关同步时显示摘要页面</code>，选择后可以开启/关闭此设置。<br><img src="https://img-blog.csdnimg.cn/20200430234455248.png" alt=""></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200430112948289.png" alt=""></p><h2 id="🌟-创建共享云配置"><a href="#🌟-创建共享云配置" class="headerlink" title="🌟 创建共享云配置"></a>🌟 创建共享云配置</h2><p><code>Setting Sync</code>默认创建的是私有Gist，所以只有我们自己可以查看，但是在很多团队和项目中，大家使用同一套配置和插件往往是非常有必要的。想想在一个团队中，每一个开发者使用的编辑器和插件不统一，我们过去协助他们debug（调试）和教学的时候，很多时候都会感觉非常的不顺手。</p><p>而且一个统一的插件和使用规范和配置规范，可以影响到真个团队项目的代码的规范。最明显的就是整个团队有使用同一套<code>Prettier</code>插件配置和没有用的时候！</p><p>新加入团队的开发同事，还要安排人过去协助安装一些我们团队的规范插件和配置。想想是不是我们是需要这么一个东西的呢？</p><p><img src="https://img-blog.csdnimg.cn/20200430112948289.png" alt=""></p><h3 id="如何创建共享配置？"><a href="#如何创建共享配置？" class="headerlink" title="如何创建共享配置？"></a>如何创建共享配置？</h3><p>首先我们来了解一下是怎么共享我们Gist上的配置。</p><p>我们以前的私有Gist是无法从<code>私有</code>改为<code>公开</code>的，所以我们把Gist上的共享配置打开后，插件中的Gist ID会重置。当我们开启后首次上传时，会创建一个全新的Gist并且是公开的。</p><blockquote><p>🌟打开编辑器命令行 <code>Command</code> + <code>Shift</code> + <code>P</code> （Mac）然后输入 <code>&gt;Sync: Advance Options</code>。<br><img src="https://img-blog.csdnimg.cn/20200430233501708.png" alt=""><br>选择后会出现一个设置列表，找到<code>Sync：在公开Gist上分享配置</code>，选择即可。<br><img src="https://img-blog.csdnimg.cn/20200430235912138.png" alt=""></p></blockquote><p>对就如此简单！然后我们就上传一次配置即可！</p><blockquote><p><strong>这里我们需要注意：</strong> <br/><br>我们公开出去的Gist其他用户可以下载，但是是无法更改的。其他用户下载了共享出来的配置后，还是需要配置一个自己的私有Gist来同步自己的配置哦。<br><br/><br>当然我觉得这个是很合理的，共享出来的配置，是用来初次使用为主的。下载了团队中的插件后，他们还是可以自定义一些插件和配置，根据个人习惯调整一下。毕竟编辑器对于每个人来说，使用时都有一些不一样的习惯。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200430112948289.png" alt=""></p><h3 id="如何下载共享的配置？"><a href="#如何下载共享的配置？" class="headerlink" title="如何下载共享的配置？"></a>如何下载共享的配置？</h3><p>讲解了如果共享自己的配置给我们亲爱的小伙伴，那也要告诉他们怎么下载我们的配置呀。</p><p>首先我们要找到我们公开的Gist ID，这个ID可以在我们的插件配置里面找到：</p><blockquote><p>🌟打开编辑器命令行 <code>Command</code> + <code>Shift</code> + <code>P</code> （Mac）然后输入 <code>&gt;Sync: Advance Options</code>。<br><img src="https://img-blog.csdnimg.cn/20200430233501708.png" alt=""><br>选择后会出现一个设置列表，找到<code>Sync：打开设置</code>，选择即可。<br><img src="https://img-blog.csdnimg.cn/20200501001252738.png" alt=""></p></blockquote><p>选择后就会打开我们<code>Setting Sync</code>的设置页面，下图框住的位置就是我们Gist ID。只要复制这个ID然后分享给需要下载我们共享配置的小伙伴们。</p><p><img src="https://img-blog.csdnimg.cn/20200501001455726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""><br>小伙伴们拿到我们的<code>Gist ID</code>后，有两种情况：</p><ul><li>如果他们之前有配置过<code>Settings Sync</code>的话，那就需要先重置自己的插件配置。如何清楚，我在前面讲解过了，跟着之前的教程清楚即可（有配置过的童鞋还需要记得把自己的 <code>Gist ID</code> 和 <code>获取令牌</code>记下来，后面需要用到哦！）。</li><li>如果没有配置过<code>Settings Sync</code>的话，可以直接走到我下来说的步骤。</li></ul><p>一切准备就绪，现在我们来下载共享的配置：</p><ul><li>首先用上面说到的方式<code>打开设置</code>，然后在<code>Gist ID</code>的那个输入框，输入我们拿到的<code>共享Gist ID</code>， 最后聚焦离开输入框（意思就是点击输入框以外的任何地方）就可以保存了。</li><li>然后执行以下操作:</li></ul><blockquote><p>🌟打开编辑器命令行 <code>Command</code> + <code>Shift</code> + <code>P</code> （Mac）然后输入 <code>&gt;Sync: Advance Options</code>。<br><img src="https://img-blog.csdnimg.cn/20200430233501708.png" alt=""><br>选择后会出现一个设置列表，找到<code>Sync：从公开Gist下载配置</code>，选择即可。<br><img src="https://img-blog.csdnimg.cn/20200501002633886.png" alt=""><br>选择后右下角会出现这个提示：<br><img src="https://img-blog.csdnimg.cn/20200501003333419.png" alt=""><br>意思就是说，我们现在不需要填写GitHub的令牌，只要填写Gist ID就可以下载插件了！</p></blockquote><p>好最后一步就是下载插件：</p><p>快捷键：</p><ul><li>Windows/Linux：<code>Shift</code> + <code>Alt</code> + <code>D</code></li><li>Mac：<code>Shift</code> + <code>Option</code> + <code>D</code></li></ul><blockquote><p>🌟打开编辑器命令行 <code>Command</code> + <code>Shift</code> + <code>P</code> （Mac）然后输入 <code>&gt;Sync: Download Settings</code>。可以不全部输入完，只需要输入头几个字母就可以看到这个命令了。然后直接选择就可以了。<br><img src="https://img-blog.csdnimg.cn/20200430224252624.png" alt=""><br>⚠️ 如果插件比较多的时候，可能会需要等待一会儿哦。</p></blockquote><p>可以一直盯着控制台实时输出的日志，看到同步完成后即可哦！（如果途中因为GitHub连接失败，重新启动下载配置即可。最近GitHub网络不是很稳定，所以可能会有点颠簸，童鞋们记得带上安全带哈。😂）</p><p>最后一步就是与我们原来的GitHub Gist重新绑定上，这里需要手动绑定哦​：</p><ul><li>我们只需要再重置一次这个插件的配置。</li><li>然后打开插件的配置，把我们刚刚记下来的<code>Gist ID</code>和<code>获取令牌​</code>重新填入对应的配置项里面。</li><li>最后<strong>强制上传</strong>一次我们现在的配置​，<strong>记住是强制！</strong></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzExLzE3MTY4NzdiNmRhMzMzNGM?x-oss-process=image/format,png" alt=""></p><h1 id="「终」总结"><a href="#「终」总结" class="headerlink" title="「终」总结"></a>「终」总结</h1><p><img src="https://img-blog.csdnimg.cn/20200501004036731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""><br>写到这里，VSCode高级玩家系列就结（未）束（必）了。如果这个系列有帮助到你们，而且童鞋们觉得这个系列应该继续下去的话，就给我点个赞，并且在评论区回复“<strong>还要！</strong>”。如果我看到有大量的需求的话，我会继续深度挖掘VSCode中的各种高级技巧分享给大家哦！😁。</p><p>对了！差点就把大事给忘了！如果有看我上一篇文章<a href="https://blog.csdn.net/TriDiamond6/article/details/105604427" target="_blank" rel="noopener">《VSCode插件大全》</a><br>的童鞋，知道我在上一篇文章里面分享了大量我在使用的插件。如果想一键下载下来使用的话，我这里有建立好一个共享配置的<code>Gist ID</code>给大家使用。</p><p><strong>Gist ID:</strong> <code>5ca94da358b6833763017e1fbafd994b</code></p><blockquote><p><strong>快乐的时光总是过得特别快，珍惜每一寸光阴</strong><br>我是<strong>三钻</strong>，一个在技术银河中等你一起来终身漂泊学习的程序员。<br>文章对你们有帮助的，给我来个三连操作（点赞，关注，评论支持）。Happy coding 🎉！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> VSCode Settings </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode插件大全</title>
      <link href="/2020/04/25/tools/vscode-plugins.html"/>
      <url>/2020/04/25/tools/vscode-plugins.html</url>
      
        <content type="html"><![CDATA[<p>上一篇文章<a href="https://blog.csdn.net/tridiamond6/article/details/105455341" target="_blank" rel="noopener">《VSCode常用快捷键大全》</a>，我们了解到了VSCode中的常用快捷键。学会了快捷键可以让我们更高效和迅速的编写代码。但是没有IDE中的一些辅助功能，还是美中不足。</p><p>VSCode没有安装插件，就等同于一把枪没有安装配件，打把的时候还是缺失精准度，开枪的时候也会有很重的后坐力。当然没有插件，也可以很好的编写代码，就是没有那么强而已。</p><p>所以这篇文章会给大家介绍VSCode中最常用的插件，让我们的编辑器加上一双翅膀，让我们在编写代码的过程中如虎添翼的感觉。</p><blockquote><p>🌟所有插件，只要搜索插件名就能找到哦！</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzExLzE3MTY4NzdiNmRhMzMzNGM?x-oss-process=image/format,png" alt=""></p><h1 id="「一」国人必备集合"><a href="#「一」国人必备集合" class="headerlink" title="「一」国人必备集合"></a>「一」国人必备集合</h1><p>这些插件都是我们作为中国人必备的，妈妈再也不怕我们看不懂英文了。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="VSCode中文简体包"><a href="#VSCode中文简体包" class="headerlink" title="VSCode中文简体包"></a>VSCode中文简体包</h2><p><code>插件名：Chinese (Simplified) Language Pack for Visual Studio Code</code></p><p>这个插件一键把整个VSCode的文字转换成中文。一个全中文化的IDE是我们特别需要的。而且这个是官方汉化包，理解无障碍。</p><p><img src="https://img-blog.csdnimg.cn/20200417232726769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="代码翻译"><a href="#代码翻译" class="headerlink" title="代码翻译"></a>代码翻译</h2><p><code>插件名：翻译(英汉词典)</code></p><p>英语不是很好的童鞋，在写代码的时候经常会使用“某道翻译”，但是其实对于代码来说，很多时候我们会用<code>驼峰</code>、<code>小驼峰</code>、<code>下划线</code>等等写法来写变量名、属性名、类名和方法名的。这种写法想使用“某道翻译”在编辑器中悬浮翻译就是不可能了。</p><p>找了很久我为大家找到一个非常好用的一个插件可以解决这个问题！</p><blockquote><p>本地77万词条英汉词典，不依赖任何在线翻译API，无查询次数限制。可翻译驼峰和下划线命名，及对整个文件中的标识符批量翻译。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200417233026920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="检测代码英文单词错误"><a href="#检测代码英文单词错误" class="headerlink" title="检测代码英文单词错误"></a>检测代码英文单词错误</h2><p><code>插件名：Code Spell Checker</code></p><p>一个基本的拼写检查器，可以检测驼峰写法。这个拼写检查程序的目标是帮助捕获常见的拼写错误。在编写代码的时候，我们都是用英文单词，很多时候我们都会写错单词的可能性。用错了单词其实对于维护性是有一定的影响的。</p><p>使用有意义的单词做为方法名、类名和变量名会给自己代码更多的意义和含义。当自己或者别人去查看代码时更容易懂其中的用意。但是如果我们拼错了单词，有些时候就无法理解这个单词是什么意思了。</p><p>所以这个插件对我们来说非常实用，就算是老外都非常多人在使用它。（目前有100多万下载量）</p><p><img src="https://img-blog.csdnimg.cn/20200418015011197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzExLzE3MTY4NzdiNmRhMzMzNGM?x-oss-process=image/format,png" alt=""></p><h1 id="「二」主题集合"><a href="#「二」主题集合" class="headerlink" title="「二」主题集合"></a>「二」主题集合</h1><p>一个程序员一天8-12个小时都是看着编辑器和代码。如果我们的编辑器不好看，没有一定的美观和吸引力，怎么可能耐看不厌呢？加上长期看代码，一个舒服的主题自然是必备之一。</p><p>这里介绍几款我最喜欢的主题给大家使用。有更多大家喜欢的主题欢迎在评论中提出，我会补充到这里哦！</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="Dracula-Theme"><a href="#Dracula-Theme" class="headerlink" title="Dracula Theme"></a>Dracula Theme</h2><p><code>主题名：Dracula Official</code></p><p>这款主题主调色是偏深紫色，我用了这个主题至少也有2-3年，一直都很喜欢。里面代码的高亮和颜色都很细致，很适合长期看。这个主题的颜色有根据不同的语言做了适配，无论我们是在开发什么语言都非常好看。</p><p><img src="https://img-blog.csdnimg.cn/20200417235323559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="Material-Theme"><a href="#Material-Theme" class="headerlink" title="Material Theme"></a>Material Theme</h2><p><code>主题名：Material Theme</code></p><p>这款也是非常出名的主题，在非常多的IDE/编辑器都有。用习惯这个主题的可以在VSCode中安装使用。使用量也是有200多万+。这款主题在我使用<code>SublimeText</code>的时候非常热爱。（也用了好几年）</p><p><img src="https://img-blog.csdnimg.cn/202004172349108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20200417234945684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="Nebula-Theme"><a href="#Nebula-Theme" class="headerlink" title="Nebula Theme"></a>Nebula Theme</h2><p><code>主题名：Nebula Theme</code></p><p>这一款是我现在在用的小众主题。配色与Dracula非常相似，但是有更多的亮色，颜色的变化幅度也没有那么大，相比Dracula更为顺眼。当然这个也要看个人喜好哈。</p><p><img src="https://img-blog.csdnimg.cn/20200417235607183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="Atom-One-Dark-Theme"><a href="#Atom-One-Dark-Theme" class="headerlink" title="Atom One Dark Theme"></a>Atom One Dark Theme</h2><p><code>主题名：Atom One Dark Theme</code></p><p>我认识的一些小伙伴用过Atom，也有这么一部分小伙伴特别喜欢这个主题。</p><p><img src="https://img-blog.csdnimg.cn/20200418000044378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="One-Monokai-Theme"><a href="#One-Monokai-Theme" class="headerlink" title="One Monokai Theme"></a>One Monokai Theme</h2><p><code>主题名：One Monokai Theme</code></p><p>对长期使用<code>SublimeText</code>的<code>Monokai</code>的童鞋们，对这款主题应该感兴趣。毕竟Monokai主题陪伴了我们挺长一段时间的。（不好了要暴露年龄了😂）</p><p><img src="https://img-blog.csdnimg.cn/20200418001250130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="GitHub-Plus-Theme"><a href="#GitHub-Plus-Theme" class="headerlink" title="GitHub Plus Theme"></a>GitHub Plus Theme</h2><p><code>主题名：GitHub Plus Theme</code></p><p>对终于有一个白色的主题了，但是个人对白色的主题不怎么感冒。最近连微信都加入了黑暗世界，所以我已经习惯所有UI都是黑暗模式了。但是毕竟还是有童鞋特别喜爱白色的。</p><p>这里推荐一款与GitHub一样色系的白色主题（我可以说是我唯一可以考虑使用白色的一款，有童鞋有自己喜欢的白色主题可以在评论中留言给我哦！）</p><p><img src="https://img-blog.csdnimg.cn/20200418000815658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><blockquote><p>🌟小总结<br>VSCode中还有非常多的主题可以选择，如果我推荐的主题中没有你们喜欢的，可以在插件搜索框中输入<code>theme</code>，就会出来很多的主题供大家自由选择哦！</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020041800180515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzExLzE3MTY4NzdiNmRhMzMzNGM?x-oss-process=image/format,png" alt=""></p><h1 id="「三」图标主题集合"><a href="#「三」图标主题集合" class="headerlink" title="「三」图标主题集合"></a>「三」图标主题集合</h1><p>安装了编辑器主题，不安装图标主题就等同于 💐鲜花插在了 💩牛粪上。这里推荐两款我自己使用过的图标主题。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="Material-Icon-Theme"><a href="#Material-Icon-Theme" class="headerlink" title="Material Icon Theme"></a>Material Icon Theme</h2><p><code>主题名：Material Icon Theme</code></p><p>占了大部分人都是用这个图标主题，内含非常齐全的图标，基本你能想到的文件都在内了。非常推荐使用！</p><p><img src="https://img-blog.csdnimg.cn/20200418002457384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="VSCode-Icons"><a href="#VSCode-Icons" class="headerlink" title="VSCode Icons"></a>VSCode Icons</h2><p><code>主题名：vscode-icons</code></p><p>这一款是VSCode官方的图标主题包，有超过500万+下载量。可以说是和Material Icon一样占了另外一大部分人在使用的一款主题。看个人喜好选择使用。个人觉得两款最大的区别在于文件夹。但是觉得Material Icon做的图标相对更加协调一些。</p><p><img src="https://img-blog.csdnimg.cn/20200418003022696.gif" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzExLzE3MTY4NzdiNmRhMzMzNGM?x-oss-process=image/format,png" alt=""></p><h1 id="「四」实用插件集合"><a href="#「四」实用插件集合" class="headerlink" title="「四」实用插件集合"></a>「四」实用插件集合</h1><p>这里给小伙伴们介绍一些在其他IDE都有可能用过的超级实用插件和功能。这些插件主要是强化编辑器的功能，让我们在开发过程中得到非常大的帮助。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="代码书签"><a href="#代码书签" class="headerlink" title="代码书签"></a>代码书签</h2><p><code>插件名：Bookmarks</code></p><p>它是代码中导航，在重要位置之间轻松快速地移动。不再需要搜索代码。它还支持一组选择命令，允许我们选择书签行和书签行之间的区域。它对于日志文件分析非常有用。</p><p>以下是书签提供的一些功能:</p><ul><li>在代码中标记/取消标记位置</li><li>在代码中标记位置并给出名称</li><li>在书签之间来回跳转</li><li>查看一个文件中所有书签的列表</li><li>查看项目中所有书签的列表</li><li>专用侧杆</li><li>带有书签的行</li><li>选择书签之间的区域</li></ul><p><img src="https://img-blog.csdnimg.cn/20200418012741399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p>这里附上我经常使用的几个这个插件的命令：</p><ul><li><code>Bookmarks: List</code> 列出当前文件中的所有书签</li><li><code>Bookmarks: List from All Files</code> 列出当前项目下所有书签</li><li><code>Bookmarks: Clear</code> 删除当前文件中的所有书签</li><li><code>Bookmarks: Clear from All Files</code> 删除当前项目下的所有书签</li></ul><p>我们还可以通过打开侧边栏中的书签tab查看所有标签：<br><img src="https://img-blog.csdnimg.cn/20200418012716801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="括号对彩色化"><a href="#括号对彩色化" class="headerlink" title="括号对彩色化"></a>括号对彩色化</h2><p><code>插件名：Bracket Pair Colorizer 2</code></p><p>这个扩展使用颜色来标识匹配的括号。用户可以定义要如何匹配，以及要使用哪些颜色。在代码量比较多的情况下，括号也会变得非常的多，有了颜色的标识会给开发者带来更好的识别能力。</p><p><img src="https://img-blog.csdnimg.cn/20200418014147718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="增强Git功能"><a href="#增强Git功能" class="headerlink" title="增强Git功能"></a>增强Git功能</h2><p><code>插件名：GitLens</code></p><p>增强VSCode中内置的Git功能——通过Git blame注释和代码透镜，一眼就能看到代码作者的身份，无缝导航和探索Git存储库，通过强大的比较命令获得有价值的见解，等等。<code>使用Git代码管理的开发者们，这个是一个必装插件之一！</code></p><p><img src="https://img-blog.csdnimg.cn/2020041811220153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="Git历史记录"><a href="#Git历史记录" class="headerlink" title="Git历史记录"></a>Git历史记录</h2><p><code>插件名：Git History</code></p><p>对于一些开发者习惯使用编辑器中的Git管理工具的，不太喜欢要打开另外一个Git UI工具的同学，这一款插件满足你查询所有Git记录的需求。</p><ul><li>查看和搜索git日志中的图形和详细信息。</li><li>查看文件以前的副本。</li><li>查看和搜索历史</li><li>比较分支/提交记录/文件</li><li>更多～</li></ul><p><img src="https://img-blog.csdnimg.cn/20200418111356920.gif" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="实时协作编辑"><a href="#实时协作编辑" class="headerlink" title="实时协作编辑"></a>实时协作编辑</h2><p><code>插件名：Live Share</code></p><p>Visual Studio Live Share允许我们与他人实时协作编辑和调试，不管我们使用的是哪种编程语言或正在构建的应用程序类型。它允许我们立即(并且安全地)共享我们当前的项目，然后根据需要共享调试会话、终端实例、本地主机web应用程序、语音呼叫等等！加入我们的会话的开发人员从我们的环境中接收所有的编辑器上下文(例如，语言服务、调试)，这确保了他们可以立即开始有效地协作，而不需要克隆任何代码或安装任何sdk。</p><p>此外，与传统的结对编程不同，Visual Studio Live Share允许开发人员一起工作，同时保留他们的个人编辑器首选项(例如主题、键绑定)，以及拥有自己的游标。这允许我们在跟随他人和自己探索想法/任务之间无缝过渡。在实践中，这种协作和独立工作的能力为许多常见用例提供了一种更自然的协作体验。</p><p><img src="https://img-blog.csdnimg.cn/20200418121855294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p>要使用这个协同软件，首先我们需要登陆（推荐使用GitHub登陆）。登陆后点击下方的<code>Live Share</code>:</p><p><img src="https://img-blog.csdnimg.cn/20200418122107913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p>然后编辑器就会弹出以下提示，具体意思就是说，我们的实时共享会话已经开启，邀请连接已经被复制，可以发给你的协助开发者。</p><p><img src="https://img-blog.csdnimg.cn/20200418122225281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p>这个时候我们可以把连接发给我们的协助者，这里对方必须安装了<code>Live Share</code>的插件并且必须是登陆状态。</p><p>这个时候对方只需要点击侧边栏的<code>Live Share</code>图标，然后在<code>会话详细信息</code>中找到并且点击<code>加入协作会话...</code>。</p><p>点击后编辑器上方会出现一个输入框，对方只需要输入我们提供的邀请连接然后按回车即可。</p><p><img src="https://img-blog.csdnimg.cn/20200418122652558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p>协助完毕后，我们可以点击下方的图中的图标<br><img src="https://img-blog.csdnimg.cn/20200418122944492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""><br>点击图标后，上方会出现一个选择弹窗，选择<code>Stop Collaboration Session</code>就可以停止协助会话了。<br><img src="https://img-blog.csdnimg.cn/20200418123003827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="路径智能提示"><a href="#路径智能提示" class="headerlink" title="路径智能提示"></a>路径智能提示</h2><p><code>插件名：Path Intellisense</code></p><p>加入此插件让我们在应用文件（例如图片）时，有智能的路径提示。</p><p><img src="https://img-blog.csdnimg.cn/20200418153346888.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzExLzE3MTY4NzdiNmRhMzMzNGM?x-oss-process=image/format,png" alt=""></p><h1 id="「五」前端开发插件集合"><a href="#「五」前端开发插件集合" class="headerlink" title="「五」前端开发插件集合"></a>「五」前端开发插件集合</h1><p>这里提供给各位童鞋世上最全的前端开发插件集合，没有“之一”。（当然要做到最强还需要大家给我多提意见，欢迎小伙伴们给我补充一些我也还没有使用过的实用前端插件哦！可以在评论区留言哈！）</p><p>程序员最好的朋友无非就是编辑器中的插件，有插件和没有使用插件在开发中简直就是天差地别。这里让我想到自己一开始学习编程的时候，使用<code>notepad++</code>，一行一行代码纯手敲的经历。现在有了各式各样的IDE，估计已经差不多没有人还在用文本编辑器手敲代码了。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="自动关闭标签"><a href="#自动关闭标签" class="headerlink" title="自动关闭标签"></a>自动关闭标签</h2><p><code>插件名：Auto Close Tag</code></p><p>自动添加<code>HTML/XML</code>关闭标签，与Visual Studio IDE或SublimeText相同。当我们填写了开始标签，结束标签就会被自动加上。这个非常实用，减少很多我们写<code>html</code>和<code>xml</code>的时间。</p><p><img src="https://img-blog.csdnimg.cn/20200418005726730.gif" alt=""></p><p> 如果是使用<code>SublimeText</code>过来的或者习惯<code>SublimeText</code>的童鞋，可以开启<code>Sublime Text 3模式</code>，在<code>settings.json</code>文件里面加入这个配置：</p><pre><code class="json"> {    &quot;auto-close-tag.SublimeText3Mode&quot;: true}</code></pre><p><img src="https://img-blog.csdnimg.cn/20200418010218218.gif" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="自动同步标签名"><a href="#自动同步标签名" class="headerlink" title="自动同步标签名"></a>自动同步标签名</h2><p><code>插件名：Auto Rename Tag</code></p><p>自动重命名成对的HTML/XML标记，与Visual Studio IDE相同。用这个插件可以告别每次改变标签的时候要重复修改头部和尾部标签。特别是标签内内容非常多的时候，要改确实很费劲的。</p><p><img src="https://img-blog.csdnimg.cn/2020041801062749.gif" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="CSS颜色高亮"><a href="#CSS颜色高亮" class="headerlink" title="CSS颜色高亮"></a>CSS颜色高亮</h2><p><code>插件名：Color Highlight</code></p><p>这个插件会对页面上所有的CSS/web的颜色编码进行高亮，高亮的颜色就是编码对应的颜色。在写CSS的时候非常实用。</p><p><img src="https://img-blog.csdnimg.cn/2020041810433844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="高亮匹对标签"><a href="#高亮匹对标签" class="headerlink" title="高亮匹对标签"></a>高亮匹对标签</h2><p><code>插件名：VSCode Highlight Matching Tag</code></p><p>此插件高亮显示匹对的开始和/或结束标签。还可以在状态栏中显示标签的路径。这个插件将尝试在任何地方匹配标记: 从标记属性、字符串内部、任何文件，同时还提供广泛的样式选项来定制标记的高亮显示方式。</p><p>官方支持的标签: HTML和JSX。其他风格 (XML、Vue、Angular、PHP) 也可以。</p><p><img src="https://img-blog.csdnimg.cn/2020041811313577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="HTML-CSS-支持"><a href="#HTML-CSS-支持" class="headerlink" title="HTML CSS 支持"></a>HTML CSS 支持</h2><p><code>插件名：HTML CSS Support</code></p><p>补充了VSCode中缺少的CSS支持。类属性补全、ID属性补全和全文件搜索CSS和SCSS提示等。</p><p><img src="https://img-blog.csdnimg.cn/20200418120102528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="小程序支持"><a href="#小程序支持" class="headerlink" title="小程序支持"></a>小程序支持</h2><p><code>插件名：minapp-vscode</code></p><p>微信小程序标签、属性的智能补全（同时支持原生小程序、mpvue 和 wepy 框架，并提供 snippets）</p><p><img src="https://img-blog.csdnimg.cn/20200418124310840.gif" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="Vue支持"><a href="#Vue支持" class="headerlink" title="Vue支持"></a>Vue支持</h2><p><code>插件名：Vetur</code></p><p>开发Vue的童鞋必装插件之一。支持标签、属性的智能补全等等。</p><p><img src="https://img-blog.csdnimg.cn/20200418133244365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p>经常用Vue开发的童鞋，我这个里另外推荐一个插件给你们。就是<code>Vue 2 Snippets</code>，这个插件加入了Vue2的代码块，让我们开发的过程中可以快速生成Vue2的代模版。</p><p><img src="https://img-blog.csdnimg.cn/20200418191201486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="React支持"><a href="#React支持" class="headerlink" title="React支持"></a>React支持</h2><p><code>插件名：ES7 React/Redux/GraphQL/React-Native snippets</code></p><p>这个扩展为你提供了JavaScript和ES7中的React/Redux代码片段，以及VSCode的Babel插件特性。编写React的童鞋，这个插件是必备之一。<br><img src="https://img-blog.csdnimg.cn/20200418152134991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="NPM支持"><a href="#NPM支持" class="headerlink" title="NPM支持"></a>NPM支持</h2><p><code>插件名：npm</code></p><p>这个扩展支持运行包中定义的npm脚本。并根据包中定义的依赖项验证已安装的模块。最喜欢这个插件的功能就是可以自动检测依赖是否安装，还可以提示依赖的版本和具体项目地址。使用npm的童鞋必备插件之一。</p><p><img src="https://img-blog.csdnimg.cn/20200418152519394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="NPM智能提示"><a href="#NPM智能提示" class="headerlink" title="NPM智能提示"></a>NPM智能提示</h2><p><code>插件名：npm Intellisense</code></p><p>加入此插件可以让我们在编写JavaScript的时候有npm依赖包的提示。特别是引用的过程中会有丰富的提示。</p><p><img src="https://img-blog.csdnimg.cn/20200418152750763.gif" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="强大的代码格式化"><a href="#强大的代码格式化" class="headerlink" title="强大的代码格式化"></a>强大的代码格式化</h2><p><code>插件名：Prettier - Code formatter</code></p><p>Prettier是一个代码格式化程序。它通过解析代码并使用它自己的规则重新打印代码来强制实现一致的样式，这些规则考虑到最大行长度，在必要时包装代码。</p><p>在一个多人协同开发的团队中，统一的代码编写规范非常重要。一套规范可以让我们编写的代码达到一致的风格，提高代码的可读性和统一性。自然维护性也会有所提高。</p><p><img src="https://img-blog.csdnimg.cn/20200418154244795.gif" alt=""></p><blockquote><p>🌟小技巧<br>我们可以通过在<code>settings.json</code>中强制让一些特定语言用这个格式化工具。在<code>settings.json</code>中添加以下配置。</p></blockquote><pre><code class="json">{  &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;,  &quot;[javascript]&quot;: {    &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;  }}</code></pre><blockquote><p>🌟小技巧<br>个人还建议设置编辑器在保存时自动格式化。在<code>settings.json</code>中添加以下配置。</p></blockquote><pre><code class="json">// 全局配置&quot;editor.formatOnSave&quot;: false,// 按语言配置&quot;[javascript]&quot;: {    &quot;editor.formatOnSave&quot;: true}</code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="编辑器中的实时预览"><a href="#编辑器中的实时预览" class="headerlink" title="编辑器中的实时预览"></a>编辑器中的实时预览</h2><p><code>插件名：Browser Preview</code></p><p>VSCode的浏览器预览插件让我们能够在编辑器中打开一个可以真正的浏览器预览。浏览器预览是由Chrome Headless提供的，它的工作原理是在一个新进程中启动一个Headless Chrome实例。提供了一种安全的方法在VSCode中呈现web内容，并支持一些有趣的特性，如编辑器内调试等!  <code>再也不用在浏览器和编辑器中来回切换而觉得麻烦了！</code></p><p><img src="https://img-blog.csdnimg.cn/20200418103219207.gif" alt="在这里插入图片描述"></p><p>这个插件需要另外一个插件的支持<code>Debugger for Chrome</code>，安装了这个插件后只要按下面配置格式配置即可（配置要根据我们的项目而定，需要微小的修改一下）</p><pre><code class="json">{    &quot;version&quot;: &quot;0.1.0&quot;,    &quot;configurations&quot;: [        {            &quot;type&quot;: &quot;browser-preview&quot;,            &quot;request&quot;: &quot;attach&quot;,            &quot;name&quot;: &quot;Browser Preview: Attach&quot;        },        {            &quot;type&quot;: &quot;browser-preview&quot;,            &quot;request&quot;: &quot;launch&quot;,            &quot;name&quot;: &quot;Browser Preview: Launch&quot;,            &quot;url&quot;: &quot;http://localhost:3000&quot; // 把这里改为你本地项目的地址        }    ]}</code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="实时预览"><a href="#实时预览" class="headerlink" title="实时预览"></a>实时预览</h2><p><code>插件名：Live Server</code></p><p>如果我们是在做一个静态页排版，这个插件可以提供给我们一个本地实时预览服务器，预览会在谷歌浏览器打开。相对于上面讲到的插件来说，这个比较轻量级。</p><p><img src="https://img-blog.csdnimg.cn/20200418120711117.gif" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="浏览器打开"><a href="#浏览器打开" class="headerlink" title="浏览器打开"></a>浏览器打开</h2><p><code>插件名：open in browser</code></p><p>在开发本地文件的时候，可以安装这个插件，然后用默认浏览器打开。当然可以设置我们喜爱的浏览器打开哦。<br><img src="https://img-blog.csdnimg.cn/20200418161247685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzExLzE3MTY4NzdiNmRhMzMzNGM?x-oss-process=image/format,png" alt=""></p><h1 id="「六」PHP开发插件"><a href="#「六」PHP开发插件" class="headerlink" title="「六」PHP开发插件"></a>「六」PHP开发插件</h1><p>VSCode作为前端开发编辑器确实很强大了，但是这个编辑器不仅限于前端，作为一个后端编辑器也不差于其他IDE很多。</p><p>我有很长一段时间一直使用PHPStorm，但是发现用再高配置的电脑还是逃不过这些重量级IDE对电脑的CPU和内存的无限吞噬。</p><p>随着几款轻量级编辑器的发展，包括<code>SublimeText</code>、<code>Atom</code>和<code>VSCode</code>。这些轻量级的编辑器加上活跃的插件开发社区，很多在IDE里面拥有的功能在轻量级的编辑器中都可以拥有了。所以最后我又回归到了轻量级编辑器中。</p><p>最后我开始研究怎么用VSCode作为PHP开发的IDE。这里分享一些非常实用的PHP开发用的VSCode必装插件集合：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="PHP强化插件"><a href="#PHP强化插件" class="headerlink" title="PHP强化插件"></a>PHP强化插件</h2><p><code>插件名：PHP Intelephense</code></p><p>PHP Intelephense是一个高性能的PHP语言服务器，它为高效的PHP开发提供了大量的基本特性。安装了这个插件基本拥有了70-80%重量级IDE的辅助功能。</p><p>它的功能包含以下：</p><ul><li>快速驼峰/下划线大小写<strong>代码完成(智能感知)</strong>。提供文档、项目和内置符号和关键字的详细提示。自动添加使用声明。</li><li>项目和内置的构造函数，方法和函数都有详细<strong>签名(参数)帮助辅助</strong>。</li><li>快速项目中的<strong>跳转定义</strong>支持。</li><li>项目内<strong>查找所有引用</strong>。</li><li><strong>项目内快速搜索</strong>“驼峰/下划线”的符号</li><li>完整<strong>文档符号搜索</strong>，也支持<strong>breadcrumb **和</strong>outline** UI。</li><li>通过一个容错解析器和强大的静态分析引擎<strong>诊断</strong>打开的文件。</li><li>兼容PSR-12<strong>文档/范围格式</strong>。格式化也适用于HTML/PHP/JS/CSS文件。</li><li>HTML请求转发到HTML语言服务器完成<strong>HTML/JS/CSS/PHP代码智能提示</strong>。</li><li><strong>鼠标悬停</strong>显示详细链接到官方PHP文档。</li><li>智能<strong>高亮</strong>参考资料和关键字。</li><li>读取<strong>PHPStorm metadata</strong>以获得更高级的类型分析和提示。</li><li>智能<strong>重命名</strong>符号。在适当的时候，文件/文件夹也会自动重命名。(高级版)(<a href="https://intelephense.com" target="_blank" rel="noopener">https://intelephense.com</a>)</li><li>能精确的<strong>折叠代码</strong>定义，块，使用声明，heredoc，注释，和自定义区域。(高级版)(<a href="https://intelephense.com" target="_blank" rel="noopener">https://intelephense.com</a>)</li><li>快速<strong>找到和跳转接口和抽象类以及相关方法</strong>。(高级版)(<a href="https://intelephense.com" target="_blank" rel="noopener">https://intelephense.com</a>)</li><li>快速<strong>转到类型定义</strong>的变量和参数。(高级版)(<a href="https://intelephense.com" target="_blank" rel="noopener">https://intelephense.com</a>)</li><li>快速<strong>去声明</strong>实现接口或抽象方法声明的方法。(高级版)(<a href="https://intelephense.com" target="_blank" rel="noopener">https://intelephense.com</a>)</li><li>可配置<strong>自动phpdoc</strong>创建，推断返回类型并识别抛出的异常。(高级版)(<a href="https://intelephense.com" target="_blank" rel="noopener">https://intelephense.com</a>)</li></ul><p>提到的<strong>高级版</strong>功能需要另外购买，可以到<code>https://intelephense.com</code>实用支付宝购买。一次性购买价格是70元人名币（个人觉得相比其他IDE是年费的，这个还是很划算的）。</p><p>这个插件基本上所有其他IDE又的功能它都给你提供了，有了这个插件我们的VSCode瞬间编程了一个全能的IDE编辑器。重点它还是比较轻量级的。</p><p><img src="https://img-blog.csdnimg.cn/20200418185139615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="PHP规范检测"><a href="#PHP规范检测" class="headerlink" title="PHP规范检测"></a>PHP规范检测</h2><p><code>插件名：phpcs</code></p><p>这个linter插件为Visual Studio代码提供了一个到phpc的接口。它将与具有“PHP”语言模式的文件一起使用。</p><p>如果小伙伴们一直都有用linter，那这个插件装上，可以配合我们项目中的phpCS设置的linter一起用，就可以自动格式化代码或者在VSCode中也会提示格式错误了。</p><p><img src="https://img-blog.csdnimg.cn/20200418185704744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzExLzE3MTY4NzdiNmRhMzMzNGM?x-oss-process=image/format,png" alt=""></p><h1 id="「七」Java开发插件"><a href="#「七」Java开发插件" class="headerlink" title="「七」Java开发插件"></a>「七」Java开发插件</h1><p>个人没有做过多的JAVA开发，所以也没有深入研究，但是VSCode也有很多Java开发者在使用。所以也有对应的支持。</p><p>用来支持Java的插件有好几个，但是官方有做了一个Java插件全家桶，一键安装好所有Java支持的插件。</p><p><code>插件名：Java Extension Pack</code></p><p>Java Extension Pack (Java插件全家桶) 是一组流行的插件，可以帮助在Visual Studio Code中编写、测试和调试Java应用程序。</p><p>这个全家桶包含了以下插件：</p><ul><li>📦 Java 语言支持（Red Hat 提供）<ul><li>代码导航</li><li>自动完成</li><li>重构</li><li>代码片段</li></ul></li><li>📦 Java 调试器</li><li>📦 Java测试运行器<ul><li>项目脚手架</li><li>自定义目标</li></ul></li><li>📦 Java依赖查看器<ul><li>查看Java项目、引用库、资源文件、包、类和类成员</li></ul></li><li>Visual Studio IntelliCode<ul><li>开发辅助</li><li>完整的代码填充</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20200418190753329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="其他语言支持"><a href="#其他语言支持" class="headerlink" title="其他语言支持"></a>其他语言支持</h2><p>使用VSCode开发其他语言也是完全可以的，只要在插件搜索栏输入我们想用的语言，就可以找到那个语言的相关插件和支持。</p><p><img src="https://img-blog.csdnimg.cn/20200418194052683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzExLzE3MTY4NzdiNmRhMzMzNGM?x-oss-process=image/format,png" alt=""></p><h1 id="「待续」总结"><a href="#「待续」总结" class="headerlink" title="「待续」总结"></a>「待续」总结</h1><p><img src="https://img-blog.csdnimg.cn/20200423112626806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p>对于一个个性化的编辑器，一箱好用的插件是必备的，没有插件的VSCode就等于没有了灵魂。这文章介绍了一大箱不同分类的超级实用、好用和常用的插件。</p><p>但是这么多插件，一个一个安装，是不是想想都想放弃？还有一部分童鞋会说“IDE的插件基本上都是安装好的，这个太麻烦了”。说实话确实很麻烦，特别是公司一台电脑，家里又一台手提电脑，两台电脑都需要安装这些插件，想想都崩溃了。</p><p>当然每一个问题都有解决办法，VSCode也有插件专门解决这种问题。VSCode的<code>Setting Syn</code>可以帮助我们同步自己的插件，编辑器配置和自定义快捷键。让我们在新的环境或者电脑上，马上拉取以往的所有配置，再也不需要一个一个重新配置。</p><p>下一篇文章我会详细讲说怎么配置和怎么使用<code>配置同步</code>插件。敬请期待哦！</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> VSCode Plugins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode常用快捷键大全</title>
      <link href="/2020/04/19/tools/vscode-shortcuts.html"/>
      <url>/2020/04/19/tools/vscode-shortcuts.html</url>
      
        <content type="html"><![CDATA[<p>我之前也是用过很多代码编辑器，从<code>NotePad++</code>、<code>SublimeText</code>一直到<code>PHPStorm</code>，最后<code>VSCode</code>。这个过程每一个编辑器我都折腾了很多配置，插件和主题。开发者的编辑器就等同于一个刀客的随身佩刀，一个枪手的随身配枪。一个好的装备的配件可以大大提升我们的战斗力。</p><p>所以对于一个好的程序员，一个好的代码编辑器可以起到很大的作用，在开发的过程中可以给我们带来很多便利、帮助、效率和影响。甚至一个好的编辑器可以给开发者日常编程中带来更高的喜悦感。</p><p>枪手挑选一把枪会通过几个纬度来选择：重量，击倒力，子弹量和精准度等等。那对开发者来说也一样的，我们会考虑这个编辑器的插件，扩展性，兼容性，功能性，美观和快捷键等等。</p><p>其中我们最在乎的就是：</p><ul><li>“<strong>有多少实用的插件给我们带来开发便利和效率</strong>”</li><li>“<strong>能否兼容我们的编程语言</strong>”</li><li>“<strong>有没有定义或者方法跳转，让我在复杂的代码中定位到方法、变量和函数</strong>”</li><li>“<strong>代码要看的舒服，代码高亮要优美好看，养眼</strong>”</li><li>“<strong>有常用的快捷键，提高开发效率（最好让我不需要用鼠标）</strong>”</li></ul><blockquote><p>🌟 总结一下其实就是“让我们写代码<strong>更快速</strong>，<strong>更愉悦</strong>，<strong>更舒服</strong>”</p></blockquote><hr><h1 id="「始」前沿"><a href="#「始」前沿" class="headerlink" title="「始」前沿"></a>「始」前沿</h1><p><img src="https://img-blog.csdnimg.cn/20200417215902749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p>要全面教大家高效使用 VSCode，就要讲到 3 大板块：<code>快捷键</code>，<code>插件</code>和<code>配置</code>。因为内容非常之多，<code>所以我拆分成了3篇文章提供给大家学习。</code>（感兴趣的童鞋可以关注一下哦 😁）</p><p>这篇文章主要详细讲解<code>VSCode</code>的常用快捷键，让大家在 VSCode 中编写代码时，更加的顺手，基本可以脱离鼠标。</p><p><strong>基本上记住这些常用的快捷键，我们就可以马上提高使用 VSCode 的效率，也会提升我们编写代码的速度！</strong></p><p>让我们一起成为 VSCode 的高级玩家！</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzExLzE3MTY4NzdiNmRhMzMzNGM?x-oss-process=image/format,png" alt=""></p><h1 id="「一」编辑器使用"><a href="#「一」编辑器使用" class="headerlink" title="「一」编辑器使用"></a>「一」编辑器使用</h1><p>先讲讲使用编辑器功能的快捷键，这些可以让我们更快捷和顺手的使用 VSCode 的一些常用功能。同时可以使用这些快捷键挖掘更多编辑器的隐藏功能哦。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="快捷键列表查看「View-Shortcut」"><a href="#快捷键列表查看「View-Shortcut」" class="headerlink" title="快捷键列表查看「View Shortcut」"></a>快捷键列表查看「View Shortcut」</h2><p>如果想查看所有快捷键的童鞋，可以使用一下快捷键：</p><blockquote><p>Mac：<code>Command</code> + <code>K</code>，再按<code>Command</code> + <code>S</code></p><p>Linux/Windows：<code>Ctrl</code> + <code>K</code>，再按<code>Ctrl</code> + <code>S</code></p></blockquote><blockquote><p>🌟 如果需要快速查看某一个特定的快捷键，只需要快捷键列表上方的搜索栏输入直接搜索即可</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="快速打开文件「Quick-open」"><a href="#快速打开文件「Quick-open」" class="headerlink" title="快速打开文件「Quick open」"></a>快速打开文件「Quick open」</h2><p>可以用于快速搜索，然后打开项目中的文件，当你想在一个大型项目中打开某一个代码文件时，此方法非常实用。</p><blockquote><p>Mac: <code>Command</code> + <code>P</code></p><p>Linux/Windows：<code>Ctrl</code> + <code>P</code></p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZhNTc5MmU0MGFmNmQ?x-oss-process=image/format,png" alt=""></p><blockquote><p>🌟 小技巧</p><ul><li>输入<code>?</code>可以查看帮助文档</li><li>搜索中会优先列出最近打开过的文件</li><li>如果想打开多个文件有两种方法：（会在背后打开新的文件，搜索不会被关闭）<ul><li>打开新文件 Mac: <code>Option</code> + <code>→</code> 或者 Linux/Windows：<code>Alt</code> + <code>→</code></li><li>多窗口打开 Mac: <code>Command</code> + <code>→</code> 或者 Linux/Windows：<code>Ctrl</code> + <code>→</code></li></ul></li></ul></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="编辑器命令「Command-Palette」"><a href="#编辑器命令「Command-Palette」" class="headerlink" title="编辑器命令「Command Palette」"></a>编辑器命令「Command Palette」</h2><p>在搜索加上<code>&gt;</code>前缀就可以调用命令了。编辑器的命令可以做很多，可以快速搜索快捷键，还可以执行插件的一些命令，非常实用哦！</p><blockquote><p>Mac: <code>Command</code> + <code>P</code></p><p>Linux/Windows：<code>Ctrl</code> + <code>P</code></p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZhNmQzMmE1Mzk1MzI?x-oss-process=image/format,png" alt=""></p><blockquote><p>🌟 小技巧</p><p>想快速查看快捷键按钮也可以通过这种方式搜索。</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="拆分编辑器「Split-Editor」"><a href="#拆分编辑器「Split-Editor」" class="headerlink" title="拆分编辑器「Split Editor」"></a>拆分编辑器「Split Editor」</h2><p>在开发的过程中，我们会经常打开几个文件同时编辑，特别是高度封装的代码就会同时在更改多个文件。</p><p>前端就更不用说的，很多时候我们都在同时编辑 HTML，CSS 和 JavaScript 文件。</p><p>编写 Vue 的时候就更难受了，HTML 和 CSS 和脚本都是在一个文件中，代码会非常的长，把当前文件在同一个编辑器拆分开，然后分别滑动到 HTML，CSS 和脚本部分就可以同时更改了。​</p><blockquote><p>Mac: <code>Command</code> +<code>\</code> 或者 <code>2,3,4</code></p><p>Windows: <code>Shift</code> + <code>Alt</code> + <code>\</code> 或者 <code>2,3,4</code></p><p>Linux: <code>Shift</code> + <code>Alt</code> + <code>\</code> 或者 <code>2,3,4</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200414224225531.gif" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="编辑器网格布局「Editor-Grid-Layout」"><a href="#编辑器网格布局「Editor-Grid-Layout」" class="headerlink" title="编辑器网格布局「Editor Grid Layout」"></a>编辑器网格布局「Editor Grid Layout」</h2><p>默认情况下，编辑器组是垂直列布局的（例如，当您拆分一个编辑器，默认会横向拆分到右手边的）。但是很多时候拆分了多几个编辑器就会发现每个编辑器的宽度会越来越窄，可视度就会大大下降。这个时候我们希望可以使用网格布局。所以我们可以用编辑器的<code>2x2 网格</code>布局。</p><p><img src="https://img-blog.csdnimg.cn/20200417093310262.gif" alt=""></p><p>首先我们需要创建空的编辑器组：打开方式<code>查看</code> &gt; <code>编辑器布局</code> &gt; <code>2x2 网格</code>：</p><p><img src="https://img-blog.csdnimg.cn/20200417165952778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p>默认情况下，关闭编辑器组的最后一个编辑器也将关闭整个编辑组，下次要使用的时候需要重新开启网格布局，但是我们可以在<code>setting.json</code>的配置里改变<code>workbench.editor.closeEmptyGroups: false</code>。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="快速打开和关闭侧边栏「Opening-and-Closing-the-Sidebar」"><a href="#快速打开和关闭侧边栏「Opening-and-Closing-the-Sidebar」" class="headerlink" title="快速打开和关闭侧边栏「Opening and Closing the Sidebar」"></a>快速打开和关闭侧边栏「Opening and Closing the Sidebar」</h2><p>在我们专注于编程的时候，左边的侧边栏会占用我们一定的宽度，特别是使用双屏（尤其是竖向的屏幕）或者是使用拆分编辑器模式。​ 收起侧边栏可以帮我们节省很多空间。</p><blockquote><p>Mac: <code>Command</code> + <code>B</code></p><p>Windows/Linux: <code>Ctrl</code> + <code>B</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020041721395828.gif" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="快速打开集成终端「Open-new-Terminal」"><a href="#快速打开集成终端「Open-new-Terminal」" class="headerlink" title="快速打开集成终端「Open new Terminal」"></a>快速打开集成终端「Open new Terminal」</h2><p>在开发的过程中，我们经常需要用到终端来执行命令。快速打开终端会给我们带来很多便捷。</p><blockquote><p>Mac: <code>Control</code> + `</p><p>Windows/Linux: <code>Ctrl</code> + `</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200418203902969.gif" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzExLzE3MTY4NzdiNmRhMzMzNGM?x-oss-process=image/format,png" alt=""></p><h1 id="「二」辅助代码编写"><a href="#「二」辅助代码编写" class="headerlink" title="「二」辅助代码编写"></a>「二」辅助代码编写</h1><p>接下来我们来讲讲在编程中常用的辅助快捷键。这些快捷键可以辅助我们提升编写代码的速度和效率，让我们的双手更集中 ​ 在键盘上，减少消耗在键盘和鼠标切换过程的时间。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="合并行「Join-Line」"><a href="#合并行「Join-Line」" class="headerlink" title="合并行「Join Line」"></a>合并行「Join Line」</h2><blockquote><p>Mac：<code>Control</code> + <code>J</code></p><p>Linux/Windows：使用上面说到的快捷键打开快捷键查询列表，搜索”合并行”（<code>editor.action.joinLines</code>），鼠标放在合并行的快捷键上，然后点击编辑图标，这里可以设置一个你喜欢的快捷键。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200413170609964.gif" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="代码格式化「Code-Formatting」"><a href="#代码格式化「Code-Formatting」" class="headerlink" title="代码格式化「Code Formatting」"></a>代码格式化「Code Formatting」</h2><p>这个快捷键帮我们快速调整代码缩减，不过我更加推荐使用<code>Prettier</code>插件，这边文章后面会讲到。</p><blockquote><p>Mac: <code>Shift</code> + <code>Option</code> + <code>F</code></p><p>Windows：<code>Shift</code> + <code>Alt</code> + <code>F</code></p><p>Linux：<code>Ctrl</code> + <code>Shift</code> + <code>I</code></p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZlNzcxY2M4YWY0Njg?x-oss-process=image/format,png" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="清楚多余空格「Trim-Trailing-White-Space」"><a href="#清楚多余空格「Trim-Trailing-White-Space」" class="headerlink" title="清楚多余空格「Trim Trailing White Space」"></a>清楚多余空格「Trim Trailing White Space」</h2><p>这个命令帮助我们清楚代码前后的多余空格，如果我们项目有设置严格的 Lint 规范，这个会帮我们减少多余空格的报错。</p><blockquote><p>Mac: <code>Command</code> + <code>K</code> <code>Command</code> + <code>X</code></p><p>Windows/Linux：<code>Ctrl</code> + <code>K</code> <code>Ctrl</code> + <code>X</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200413170524688.gif" alt=""></p><blockquote><p>🌟 小技巧</p><p>这个功能是可以自动执行的，不需要我们一个个选择去清除，我们可以在 VSCode 的配置里面设置自动清除。下面教大家两种配置方式。</p></blockquote><h3 id="使用-settings-json"><a href="#使用-settings-json" class="headerlink" title="使用 settings.json"></a>使用 settings.json</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEzLzE3MTZmNTQ4ZDU2ZGRlMGI?x-oss-process=image/format,png" alt=""></p><ol><li>打开<code>编辑器命令</code>（Mac：<code>Command</code>+<code>P</code>/Windows：<code>Ctrl</code>+<code>P</code>）</li><li>在搜索框输入<code>&gt; Open Settings</code>，然后选择<code>首选项：打开设置(json)</code></li><li>然后 settings.confg 中加入<code>&quot;files.trimTrailingWhitespace&quot;: true</code>，如果已存在这个配置，确保值是<code>true</code>。</li><li>保存文件即可生效（如果没有马上生效，可以重启 VSCode）</li></ol><h3 id="使用可视化（UI）设置"><a href="#使用可视化（UI）设置" class="headerlink" title="使用可视化（UI）设置"></a>使用可视化（UI）设置</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEzLzE3MTZmNTljZWU5MDQxYTE?x-oss-process=image/format,png" alt=""></p><ol><li>打开<code>编辑器命令</code>（Mac：<code>Command</code>+<code>P</code>/Windows：<code>Ctrl</code>+<code>P</code>）</li><li>在搜索框输入<code>&gt; Open Settings</code>，然后选择<code>首选项：打开设置(ui)</code></li><li>在<code>文本编辑器</code>&gt;<code>文件</code>中找到<code>Trim Trailling Whitespace</code>并且勾上（我们也可以在搜索框直接输入<code>Trim Trailling Whitespace</code>快速找到这个配置的位置），可参考下面的截图。</li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEzLzE3MTZmNWM1NzljMTliZDE?x-oss-process=image/format,png" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="代码折叠「Code-Folding」"><a href="#代码折叠「Code-Folding」" class="headerlink" title="代码折叠「Code Folding」"></a>代码折叠「Code Folding」</h2><p>在开发项目中，很多时候前端的代码在单个文件下都会越写越多，当我们想专注看一部分或者寻找某段代码时就颇有困难了 ​。一般这个时候我们都会把一些不重要的代码段折叠起来。但是手动用鼠标一个一个点击效率是很低的。代码折叠快捷键在这种情况就非常实用了。</p><h3 id="折叠代码快捷键"><a href="#折叠代码快捷键" class="headerlink" title="折叠代码快捷键"></a>折叠代码快捷键</h3><blockquote><p>Mac: <code>Command</code> + <code>Option</code> + <code>[</code></p><p>Windows/linux: <code>Ctrl</code> + <code>Shift</code> + <code>[</code></p></blockquote><h3 id="展开代码快捷键"><a href="#展开代码快捷键" class="headerlink" title="展开代码快捷键"></a>展开代码快捷键</h3><blockquote><p>Mac: <code>Command</code> + <code>Option</code> + <code>]</code></p><p>Windows/linux: <code>Ctrl</code> + <code>Shift</code> + <code>]</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200413163137331.gif" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="往上-下复制行「Copy-Line-Up-Down」"><a href="#往上-下复制行「Copy-Line-Up-Down」" class="headerlink" title="往上/下复制行「Copy Line Up/Down」"></a>往上/下复制行「Copy Line Up/Down」</h2><p>在写代码的时候，我们经常会编写一些非常相似的代码连续几遍或者是先复制然后稍微更改一下。​ 特别是在 JS 中的<code>require</code>或者<code>import</code>这种引入包的时候。如果我们需要选中一行然后复制，回车然后粘贴，这波操作确实不够快呀，有没有更快速的复制方式呢？有的！</p><blockquote><p>Mac: <code>Shift</code> + <code>Option</code> + <code>⬆️ / ⬇️</code></p><p>Windows: <code>Shift</code> + <code>Alt</code> + <code>⬆️ / ⬇️</code></p><p>Linux: <code>Ctrl</code> + <code>Shift</code> + <code>Alt</code> + <code>⬆️ / ⬇️</code></p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEzLzE3MTcyOWU1MTQ3NDAwNzY?x-oss-process=image/format,png" alt=""></p><p>当然，如果你不喜欢这个默认的快捷键，可以在快捷键列表中修改。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="选择单词「Select-Word」"><a href="#选择单词「Select-Word」" class="headerlink" title="选择单词「Select Word」"></a>选择单词「Select Word」</h2><p>很多时候在开发过程中，我们都会需要多个相同单词（多个变量名）同时修改，可能是局部方法中的单词，也可能是这个文件中的同名单词的修改。比较古老的方法就是用全局搜索然后替换。</p><p>在 VSCode 中有一个更加快速和简便的方法，并且可以让你局部选择或者是快速全部选择。选中后就可以同时修改选中的单词了。</p><p><img src="https://img-blog.csdnimg.cn/20200417212339752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="局部选择"><a href="#局部选择" class="headerlink" title="局部选择"></a>局部选择</h3><p>首先选中你需要的单词然后按下面的快捷键即可：</p><blockquote><p>Mac: <code>Command</code> + <code>D</code></p><p>Windows/Linux: <code>Ctrl</code> + <code>D</code></p></blockquote><p>如果我们多次按下快捷键，编辑器会继续往下找到相同的单词，然后自动选中。</p><h3 id="全局选中"><a href="#全局选中" class="headerlink" title="全局选中"></a>全局选中</h3><p>一样首先选中你需要的单词，然后按下快捷键即可：</p><blockquote><p>Mac: <code>Command</code> + <code>Shift</code> + <code>L</code></p><p>Windows/Linux: <code>Ctrl</code> + <code>Shift</code> + <code>L</code></p></blockquote><p>这个唯一不一样的就是，这个会找到当前文件下的所有相同的单词，并且选中。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="跳转到特定行数「Navigate-to-a-Specific-Line」"><a href="#跳转到特定行数「Navigate-to-a-Specific-Line」" class="headerlink" title="跳转到特定行数「Navigate to a Specific Line」"></a>跳转到特定行数「Navigate to a Specific Line」</h2><p>在排查错误的时候经常会用到的一个快捷键，我们需要找到当前文件下特定行的代码。</p><blockquote><p>Mac: <code>Command</code> + <code>G</code></p><p>Windows/Linux: <code>Ctrl</code> + <code>G</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200417220341731.gif" alt=""></p><blockquote><p>🌟 小技巧<br>结合我们上面学习到的，我们也可以先使用快捷键（Mac：<code>Command</code> + <code>P</code>）打开<code>编辑器命令</code> 然后输入<code>:</code> 再输入行数即可。</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="文件中跳转特定符号「Go-to-Symbol-in-File」"><a href="#文件中跳转特定符号「Go-to-Symbol-in-File」" class="headerlink" title="文件中跳转特定符号「Go to Symbol in File」"></a>文件中跳转特定符号「Go to Symbol in File」</h2><p>这里我讲解一下<code>符号</code>指的是什么，它就是在代码中的<code>方法</code>、<code>类</code>或者是<code>属性</code>。</p><p>所以在一个比较大的代码文件中，这个快捷键会非常实用。能让我们快速找到想要编辑的方法、属性或者类！</p><blockquote><p>Mac: <code>Command</code> + <code>Shift</code> + <code>O</code></p><p>Windows/Linux: <code>Ctrl</code> + <code>Shift</code> + <code>O</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200417221237145.gif" alt=""></p><blockquote><p>🌟 小技巧</p><p>如果文件中的<code>符号</code>过多，我们可以在<code>@</code>后面加上<code>:</code>，就可以为所有符号分类让，我们更好找到需要的符号和位置。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020041722153432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="项目中跳转特定符号-「Go-to-Symbol-in-Workspace」"><a href="#项目中跳转特定符号-「Go-to-Symbol-in-Workspace」" class="headerlink" title="项目中跳转特定符号 「Go to Symbol in Workspace」"></a>项目中跳转特定符号 「Go to Symbol in Workspace」</h2><p>这个快捷键与文件中跳转的雷同，唯一区别就是这个可以搜索出整个项目中的<code>方法</code>、<code>类</code>和<code>属性</code>，并且快速跳转到这些符号的位置。</p><blockquote><p>Mac: <code>Command</code> + <code>T</code></p><p>Windows/Linux: <code>Ctrl</code> + <code>T</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200417222512659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="删除整个单词「Delete-Previous-Word」"><a href="#删除整个单词「Delete-Previous-Word」" class="headerlink" title="删除整个单词「Delete Previous Word」"></a>删除整个单词「Delete Previous Word」</h2><p>在我们打错一个单词的时候，我们经常都会连续按删除键直到我们想要重新开始的地方。其实对我们程序员来说，打字都是飞快的，重新打过远远比一个一个字母删除来的快的多。（有些童鞋可能还会用鼠标来选中要删除的，其实在写代码的时候，可以不用鼠标尽量不用鼠标，这样速度会更快哦）只要按下这个快捷键就可以整个单词删除掉。</p><blockquote><p>Mac: <code>Command</code> + <code>Delete</code></p><p>Windows/Linux: <code>Ctrl</code> + <code>Backspace</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020041722305847.gif" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="按单词选择「Select-by-words」"><a href="#按单词选择「Select-by-words」" class="headerlink" title="按单词选择「Select by words」"></a>按单词选择「Select by words」</h2><p>为了在编程中脱离使用鼠标，我们经常需要选中一行代码中的几个单词，这个快捷键可以让我们快速做到这样的操作。</p><blockquote><p>Mac: <code>Command</code> + <code>Shift</code> + <code>← / →</code></p><p>Windows/Linux: <code>Ctrl</code> + <code>Shift</code> + <code>← / →</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020041722355970.gif" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="快速复制当前行「Duplicate-Line」"><a href="#快速复制当前行「Duplicate-Line」" class="headerlink" title="快速复制当前行「Duplicate Line」"></a>快速复制当前行「Duplicate Line」</h2><p>用过 IDE 的基本都很熟悉这个操作，就是快速往下复制当前行的代码。这个在编程过程中也是非常实用。​</p><blockquote><p>其实我们可以选中一段代码，按下这个快捷键也可以 ​ 往下复制整个内容哦。</p></blockquote><blockquote><p>Mac: <code>Command</code> + <code>Shift</code> + <code>D</code></p><p>Windows/Linux: <code>Ctrl</code> + <code>Shift</code> + <code>D</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200417223806470.gif" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="删除一行「Deleting-a-Line」"><a href="#删除一行「Deleting-a-Line」" class="headerlink" title="删除一行「Deleting a Line」"></a>删除一行「Deleting a Line」</h2><p>用于快速删除一整行的代码。</p><blockquote><p>Mac: <code>Command</code> + <code>X</code></p><p>Windows/Linux: <code>Ctrl</code> + <code>X</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200417224040321.gif" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="往上-下添加同时编辑「Add-Cursor-Above-Below」"><a href="#往上-下添加同时编辑「Add-Cursor-Above-Below」" class="headerlink" title="往上/下添加同时编辑「Add Cursor Above/Below」"></a>往上/下添加同时编辑「Add Cursor Above/Below」</h2><p>用过<code>SublimeText</code>的同学应该都很熟悉这个功能。我们可以在多个位置添加鼠标编辑点，然后同时编辑。VSCode 也有这样的快捷键。</p><blockquote><p>Mac: <code>Command</code> + <code>Option</code> + <code>↑ / ↓</code></p><p>Windows/Linux: <code>Ctrl</code> + <code>Alt</code> + <code>↑ / ↓</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200417224752297.gif#pic_center" alt=""></p><blockquote><p>🌟 小技巧</p><p>如果想和上图一样，在属性的单词前添加好同时编辑鼠标点后，一下子即跳到所有属性名的最后面，我们只需要先在所有名字前面加入同时编辑鼠标然后用一下快捷键即可：</p><hr><p>Mac: <code>Command</code> + <code>→</code></p><p>Windows/Linux: <code>Ctrl</code> + <code>→</code></p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="多行选中同时编辑-「Column-Selection」"><a href="#多行选中同时编辑-「Column-Selection」" class="headerlink" title="多行选中同时编辑 「Column Selection」"></a>多行选中同时编辑 「Column Selection」</h2><p>这个快捷键需要配合鼠标一起使用。我们经常会在编写代码的时候选中一大串代码进行编辑，这个时候这个快捷键就非常使用。</p><p><strong>我们还可以按住这个快捷键，然后选择我们需要同时修改的位置，然后多个鼠标位置同时编辑哦！</strong></p><blockquote><p>Mac: <code>Shift</code> + <code>Option</code></p><p>Windows/Linux: <code>Shift</code> + <code>Alt</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200417230233688.gif" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzEyLzE3MTZkMWNjMDhjNTA1NDM?x-oss-process=image/format,png" alt=""></p><h2 id="修改“符号”-「Rename-Symbol」"><a href="#修改“符号”-「Rename-Symbol」" class="headerlink" title="修改“符号” 「Rename Symbol」"></a>修改“符号” 「Rename Symbol」</h2><p>VSCode 默认支持 JavaScript 和 TypeScript 的<code>方法名</code>、<code>类名</code>和<code>属性名</code>等符号修改。在修改后，文件下引用到这些符号的地方都会被自动的同时修改。其他语言的支持需要插件。</p><blockquote><p>Mac: <code>F2</code></p><p>Windows/Linux: <code>F2</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020041723052880.gif" alt="在这里插入图片描述"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzExLzE3MTY4NzdiNmRhMzMzNGM?x-oss-process=image/format,png" alt=""></p><h1 id="「待续」总结"><a href="#「待续」总结" class="headerlink" title="「待续」总结"></a>「待续」总结</h1><p>这里我已介绍完所有常用的快捷键和编辑器中的使用小技巧。很多需要学习快捷键的小伙伴们不可能一下子就会使用和记住。温馨提示：​<strong>所以可以先收藏本文章，当需要的时候就可以马上搜索找到并使用</strong>。当我们用多了，也就自然而然熟能生巧了。</p><p>当我们习惯于使用这些快捷键，我们就会发现我们代码编写速度都会有所提升的。</p><p><strong>下一篇 VSCode 高级玩家宝典，我会讲解 VSCode 中的所有常用插件（包括前端/后端），敬请期待！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> VSCode Shortcuts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端必看的8个HTML+CSS技巧</title>
      <link href="/2020/04/06/frontend/8-html-css-tips.html"/>
      <url>/2020/04/06/frontend/8-html-css-tips.html</url>
      
        <content type="html"><![CDATA[<p>CSS 是一个很独特的语言。看起来非常简单，但是某种特殊效果看似简单，实现起来就颇有难度。这篇文章主要是给在学习前端的童鞋分享一些新的 CSS 技巧，一些在前端教程和培训课堂中不会讲到的知识。第二就是让还在前端开发这条道路上的童鞋们，重新燃起对前端排版和特效的热爱和热情！🔥</p><hr><h1 id="一、固定底部内容"><a href="#一、固定底部内容" class="headerlink" title="一、固定底部内容"></a>一、固定底部内容</h1><p><img src="https://img-blog.csdnimg.cn/20200401142526736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt="固定底部内容"></p><p>这种是一个非常常见的布局方式，但是对于新手来说是比较常见的难题。</p><p>这种布局方式在后台管理系统中比较常见，当我们内容不足浏览器窗口高度时，底部内容需要固定在底部。当内容超出了浏览器窗口高度，就会随着内容往后推。</p><p>在有 CSS3 之前，实现这个效果是颇有难度的。浏览器窗口高度是会根据不同用户打开浏览器的情况，屏幕大小的差异和浏览器的缩放比例而变。我们需要借助 JavaScript 来实时获取浏览器高度进行运算才能实现。虽然说标题是说“固定”底部，但是我们想要的效果不是<code>position: fixed</code>。使用固定定位，在内容高于窗口高度时，就会挡住我们的内容。</p><p>随着 CSS3 的来临，最完美的实现方式是使用<code>Flexbox</code>。实现的关键就是使用不太被关注的<code>flex-grow</code>属性，可以在我们的内容标签元素（比如<code>div</code>）中使用。在我们下面的例子里使用了<code>main</code>标签。</p><hr><p>我来讲解一下实现原理吧。</p><p><img src="https://img-blog.csdnimg.cn/20200401140715577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt=""></p><p><code>flew-grow</code>是用来控制一个 flex 元素相对它同等级 flex 元素的自身可扩充的空间。如果我们使用<code>flex-grow: 0</code>，那这个 flex 元素就完全不会扩展了。所以我们需要把头部和底部之间的内容标签元素设置为<code>flex-grow: 1</code>或者<code>flex-grow: auto</code>，这样内容部分就会自动填充满头部和底部之外的所有空间。</p><p>为了避免底部内容受内容部分扩充空间的影响，我们给<code>footer</code>底部元素<code>flex-shrink: 0</code>属性。<code>flex-shrink</code>的作用与<code>flex-grow</code>是恰恰相反，用来控制 flex 元素收缩的空间，这里我们给了<code>flex-shrink: 0</code>就是为了底部<code>footer</code>的大小不受影响。</p><p>我们直接上 HTML 和 CSS 代码看看是怎么实现的。</p><p>HTML</p><pre><code class="html">&lt;div id=&quot;document&quot;&gt;  &lt;nav&gt;    &lt;h1&gt;头部内容&lt;/h1&gt;  &lt;/nav&gt;  &lt;main&gt;    &lt;p&gt;可以添加更多内容看看底部的变化哦！&lt;/p&gt;  &lt;/main&gt;  &lt;footer&gt;    &lt;h1&gt;底部内容&lt;/h1&gt;  &lt;/footer&gt;&lt;/div&gt;</code></pre><p>CSS</p><pre><code class="css">#document {  height: 100vh;  display: flex;  flex-direction: column;  background: #202020;  font-family: microsoft yahei, wenquanyi micro hei, sans-serif !important;}nav,footer {  background: #494949;  display: flex;  justify-content: center;}main {  color: #bdbdbd;  flex: auto;}footer {  flex-shrink: 0;}* {  margin: 0;}h1,p {  padding: 15px;}nav &gt; h1 {  color: #82fcfd;  text-shadow: 1px 1px 4px #00000080;}footer &gt; h1 {  color: #82fcfd;  text-shadow: 1px 1px 4px #00000080;}</code></pre><blockquote><p>🌟<strong>知识点总结：</strong></p><ul><li><strong>flex-grow</strong> — 是用来控制一个 flex 元素相对它同等级 flex 元素的自身可扩充的空间</li><li><strong>flex-shrink</strong> — 作用与<code>flex-grow</code>是恰恰相反，用来控制 flex 元素收缩的空间</li></ul><p><a href="http://tridiamond.me/frontend-tutorials/stickyFooter/"><strong>预览实际效果</strong></a> ｜ <a href="https://github.com/TriDiamond/frontend-tutorials/tree/master/stickyFooter" target="_blank" rel="noopener"><strong>GitHub 源码</strong></a> ｜ 喜欢的童鞋 🌟star 一下谢谢</p></blockquote><hr><h1 id="二、悬停放大图片特效"><a href="#二、悬停放大图片特效" class="headerlink" title="二、悬停放大图片特效"></a>二、悬停放大图片特效</h1><p><img src="https://img-blog.csdnimg.cn/20200401220041648.gif#pic_center" alt="悬停放大图片特效"><br>悬停放大图片是一个特别吸引眼球的特效，比较常用于可点击的图片。当用户悬停鼠标在图片上，图片会稍微的放大。</p><p>其实实现这个特效是非常简单的。首先我们需要一个<code>div</code>包裹这<code>img</code>标签，这个包裹层是用来遮挡住图片，当图片放大时不会出现图片超出我们规定的宽高以外。</p><p>首先我们来讲讲<code>div</code>包裹的属性，我们需要给它一个固定的<code>width</code>宽和<code>height</code>高。然后我们必须给予这个元素<code>overflow: hidden</code>属性。让图片放大的时候不会超出这个<code>div</code>元素的宽高。有了这个包裹层，我们就可以编写<code>img</code>的各种效果了。</p><p>我的例子里面用了<code>transform: scale(1,1)</code>作为悬停时的图片特效，这个<code>transform</code>是用于改变任何元素的属性的，然后<code>scale</code>是用于放大（整数就会放大）或者缩小（负数就会缩小）元素的。</p><p>上代码让大家看看：</p><ul><li>html body 中放入</li></ul><pre><code class="html">&lt;div class=&quot;img-wrapper&quot;&gt;  &lt;img src=&quot;https://img-blog.csdnimg.cn/2020032122230564.png&quot; /&gt;&lt;/div&gt;</code></pre><ul><li>CSS</li></ul><pre><code class="css">.img-wrapper {  width: 400px;  height: 400px;  overflow: hidden;  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.6);}.img-wrapper img {  height: 400px;  -webkit-transition: 0.3s linear;  transition: 0.3s linear;}.img-wrapper img:hover {  transform: scale(1.1);}.img-wrapper {  display: inline-block;  box-sizing: border-box;  border: 3px solid #000;}</code></pre><p>如果你们想让图片更加炫酷可以加上图片过滤属性<code>filter</code>，让图片变灰或者变深褐色，然后悬停时候出现更加炫酷的颜色变幻。灰化的属性是<code>filter: grayscale(100%);</code>，然后深褐色化的属性是<code>filter: sepia(100%)</code>。其实图片还有很多过滤属性的，大家有兴趣也可以去尝试一下哦！</p><p>加入特殊效果的代码如下：</p><p>HTML</p><pre><code class="html">&lt;!-- 灰度过滤 --&gt;&lt;div class=&quot;img-wrapper&quot;&gt;  &lt;img class=&quot;grayscale-img&quot; src=&quot;https://img-blog.csdnimg.cn/2020032211021728.png&quot; /&gt;&lt;/div&gt;&lt;!-- 深褐色过滤 --&gt;&lt;div class=&quot;img-wrapper&quot;&gt;  &lt;img class=&quot;sepia-img&quot; src=&quot;https://img-blog.csdnimg.cn/2020032122230564.png&quot; /&gt;&lt;/div&gt;</code></pre><p>CSS</p><pre><code class="css">/* ==============* 灰度过滤* ==============*/.grayscale-img {  -webkit-filter: grayscale(100%);  filter: grayscale(100%);}.grayscale-img:hover {  -webkit-filter: grayscale(0);  filter: grayscale(0);}/* ==============* 深褐色过滤* ==============*/.sepia-img {  -webkit-filter: sepia(100%);  filter: sepia(100%);}.sepia-img:hover {  -webkit-filter: sepia(0);  filter: sepia(0);}</code></pre><blockquote><p>🌟<strong>知识总结</strong></p><ul><li><strong>transform</strong> — 用于改变元素</li><li><strong>scale</strong> — 对元素进行放大和缩小</li><li><strong>filter</strong> — 图片过滤器</li><li><strong>grayscale</strong> — 灰度过滤</li><li><strong>sepia</strong> — 深褐色过滤</li></ul><p><a href="http://tridiamond.me/frontend-tutorials/zoomOnHoverImage/"><strong>预览实际效果</strong></a> ｜ <a href="https://github.com/TriDiamond/frontend-tutorials/tree/master/zoomOnHoverImage" target="_blank" rel="noopener"><strong>GitHub 源码</strong></a> ｜ 喜欢的童鞋 🌟star 一下谢谢</p></blockquote><hr><h1 id="三、瞬间黑暗模式"><a href="#三、瞬间黑暗模式" class="headerlink" title="三、瞬间黑暗模式"></a>三、瞬间黑暗模式</h1><p><img src="https://img-blog.csdnimg.cn/20200402143046993.gif#pic_center" alt=""></p><p>最近微信也逃脱不了黑暗时代的到来，网页也很多都做了黑暗模式的兼容和主题。如果我们在做的一个网站想瞬间实现黑暗模式可以怎么实现呢？</p><p>其实有一个很快的方式，我们可以使用<code>invert</code>和<code>hue-rotate</code>两个 CSS3 过滤器来实现。</p><p><code>filter: invert()</code> — 是从<code>0</code>到<code>1</code>的刻度，<code>1</code>是从白变黑。<br><code>filter: hue-rotate()</code> — 用于改变你元素的颜色，同时或多或少保持原本相同的色系。这个属性的值可以从<code>0deg</code>到<code>360deg</code>。</p><p>在我们页面的<code>body</code>标签上添加这两个属性，我们就可以快速尝试把我们的网站变成”黑暗模式”。这里需要注意的是，如果<code>body</code>和<code>html</code>上没有设置<code>background</code>背景颜色，这个过滤就会不起效了哦。</p><p>CSS 的代码如下：</p><pre><code class="css">html {  background: #fff;}body {  background: #fff;  filter: invert(1) hue-rotate(270deg);}</code></pre><p>实现效果<br><img src="https://img-blog.csdnimg.cn/20200401234411899.gif#pic_center" alt=""></p><p>这里我们会发现图片的颜色会受影响，并不是很美观，使用 css 过滤器是无法完美切换黑暗模式的。不过使用 JavaScript 辅助就可以完美的切换黑暗模式。</p><p>最近出了一个 JavaScript 辅助插件叫<code>Darkmode.js</code>。</p><h2 id="🌓-Darkmode-js"><a href="#🌓-Darkmode-js" class="headerlink" title="🌓 Darkmode.js"></a>🌓 Darkmode.js</h2><p>其实<code>Darkmode.js</code>运用的也是 css 里面的一个特性叫<code>mix-blend-mode</code> — “CSS 属性描述了元素的内容应该与元素的直系父元素的内容和元素的背景如何混合“。加上 Javascript 的辅助判断哪些页面上的元素需要黑化的，哪些是不需要黑化的。就会想我们之前那种做法，导致其他不需要黑化的元素，比如图片，受到影响导致颜色出现问题。</p><p>使用<code>Darkmode.js</code>非常简单，只要在脚本里面添加以下代码就可以马上加入一个插件，</p><pre><code class="html">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/darkmode-js@1.5.5/lib/darkmode-js.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;  // 这些是这个插件的可配置项：  var options = {    bottom: &#39;32px&#39;, // 定位底部距离 - 默认: &#39;32px&#39;    right: &#39;32px&#39;, // 定位右边距离 - 默认: &#39;32px&#39;    left: &#39;unset&#39;, // 定位左边距离 - 默认: &#39;unset&#39;    time: &#39;0.5s&#39;, // 默认动画时间: &#39;0.3s&#39;    mixColor: &#39;#fff&#39;, // 需要改变的颜色 - 默认: &#39;#fff&#39;    backgroundColor: &#39;#fff&#39;, // 背景颜色 - 默认: &#39;#fff&#39;    buttonColorDark: &#39;#262728&#39;, // 黑暗模式下按钮颜色 - 默认: &#39;#100f2c&#39;    buttonColorLight: &#39;#fff&#39;, // 日间模式下按钮颜色 - 默认: &#39;#fff&#39;    saveInCookies: true, // 是否在cookie保存当前模式 - 默认: true,    label: &#39;🌓&#39;, // 切换模式按钮图标 - 默认: &#39;&#39;    autoMatchOsTheme: true, // 是否自动根据系统适应模式 - 默认: true  };  let darkmode = new Darkmode(options);  darkmode.showWidget();&lt;/script&gt;</code></pre><p>如果你不希望用这个插件的默认按钮，你可以在你的 JavaScript 代码中自主控制。我们可以通过<code>.toggle()</code>方法来切换模式，同时可以使用<code>.isActivated()</code>来检测是否已经进入黑暗模式。</p><pre><code class="js">const darkmode = new Darkmode();darkmode.toggle();console.log(darkmode.isActivated()); // 如果已经进入黑暗模式会返回 true</code></pre><blockquote><p>🌟<strong>知识总结</strong></p><ul><li><strong>filter: invert()</strong> — 可以把页面从白变黑，也可以从黑变白。</li><li><strong>filter: hue-rotate()</strong> — 用于改变你元素的颜色，同时或多或少保持原本相同的色系。</li><li><a href="https://darkmodejs.learn.uno/" target="_blank" rel="noopener"><strong>Darkmode.js</strong></a> — 瞬间实现黑暗模式。</li></ul><p><strong>Invert 方式黑暗模式：</strong><a href="http://tridiamond.me/frontend-tutorials/instantDarkMode/instantDark">预览实际效果</a> ｜ <a href="https://github.com/TriDiamond/frontend-tutorials/tree/master/instantDarkMode/instantDark" target="_blank" rel="noopener">GitHub 源码</a> ｜ 喜欢的童鞋 🌟star 一下谢谢<br><strong>Darkmode.js 黑暗模式：</strong><a href="http://tridiamond.me/frontend-tutorials/instantDarkMode/darkmodeJs">预览实际效果</a> ｜ <a href="https://github.com/TriDiamond/frontend-tutorials/tree/master/instantDarkMode/darkmodeJs" target="_blank" rel="noopener">GitHub 源码</a> ｜ 喜欢的童鞋 🌟star 一下谢谢</p></blockquote><hr><h1 id="四、自定义列表符号"><a href="#四、自定义列表符号" class="headerlink" title="四、自定义列表符号"></a>四、自定义列表符号</h1><p><img src="https://img-blog.csdnimg.cn/20200402103145722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt="自定义列表符号"><br><code>ul</code>，<code>li</code>的无序列表有默认的符号<code>·</code>，但是在很多情况下我们希望可以给这个符号加入自己的样式和颜色，甚至是换成自定义的符号。默认的符号我们是无法做任何的样式处理，而且默认的符号在 CSS 属性里面只有几个选择可以使用，很多情况下都是无法满足我们的设计。</p><p>其实自定义无序列表符号不难，我们只需要使用伪元素<code>::before</code>加<code>content</code>属性就可以实现。</p><p>在我这个例子里面我做了两个任务列表，一个是待处理任务，一个是已完成任务，各自给了不一样的列表符号和颜色。</p><p><strong>实现原理</strong></p><p>一、首先我们禁用了<code>ul</code>的默认符号样式<code>list-style: none</code></p><p>二、在<code>li</code>的<code>:before</code>伪元素上给予<code>content</code>内容值，待处理任务使用<code>🗹</code>，已完成任务<code>li.completed:before</code>使用<code>✔</code></p><p>三、为了展示效果更加好看我分别给了<code>li</code>和<code>li .completed</code>两个不同的颜色</p><p><strong>上代码看看是怎么实现的吧：</strong></p><p><strong>HTML</strong></p><pre><code class="html">&lt;div&gt;  &lt;h2&gt;待处理&lt;/h2&gt;  &lt;ul&gt;    &lt;li&gt;待办任务1&lt;/li&gt;    &lt;li&gt;待办任务2&lt;/li&gt;    &lt;li&gt;待办任务3&lt;/li&gt;    &lt;li&gt;待办任务4&lt;/li&gt;    &lt;li&gt;待办任务5&lt;/li&gt;  &lt;/ul&gt;&lt;/div&gt;&lt;div&gt;  &lt;h2&gt;已完成&lt;/h2&gt;  &lt;ul&gt;    &lt;li class=&quot;completed&quot;&gt;完成任务1&lt;/li&gt;    &lt;li class=&quot;completed&quot;&gt;完成任务2&lt;/li&gt;    &lt;li class=&quot;completed&quot;&gt;完成任务3&lt;/li&gt;  &lt;/ul&gt;&lt;/div&gt;</code></pre><p><strong>CSS</strong></p><pre><code class="css">ul {  list-style: none;  color: #fff;  font-size: 20px;  border: 3px solid #000;  padding: 1rem 2rem;  min-height: 200px;  margin: 15px 2rem 0 0;  background: #323232;  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.6);  border-radius: 8px;}li {  padding: 0.3rem 0;}li::before {  content: &#39;🗹 &#39;;  color: aqua;}li.completed::before {  content: &#39;✔ &#39;;  text-decoration: none;  color: greenyellow;}li.completed {  text-decoration: line-through;  color: #bdbdbd;}</code></pre><p><code>::before</code>和<code>::after</code>伪元素加<code>content</code>属性可以用来做很多特殊的效果，也是当代前端排版比较常用的“魔法”。说到伪元素的使用，我再给大家说一个比较常用的使用场景。</p><p>在管理后台或者是文章展示中，我们经常可以见到的“面包屑导航”也是用伪元素来插入每个目录中间的符号的。<br><img src="https://img-blog.csdnimg.cn/20200402224549741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt="面包屑导航"><br><strong>实现逻辑</strong></p><p>一、这个导航含有 3 个<code>a</code>标签，首先给每个<code>a</code>标签加入一个伪元素<code>::after</code>，然后在<code>content</code>属性插入<code>/</code>符号。</p><p>二、然后使用<code>a:first-child</code>，这个伪类会选择到第一个<code>a</code>标签，然后使用<code>content</code>属性加入<code>»</code>符号。</p><p>三、因为我们第一步在每个<code>a</code>标签的后面插入了<code>/</code>符号, 所以我们需要在最后一个<code>a</code>标签清除掉。这里我们使用<code>:last-child</code>选择到最后一个<code>a</code>标签，然后用<code>content: &quot; &quot;</code>属性把伪元素的内容清楚掉。</p><p><strong>HTML</strong></p><pre><code class="html">&lt;div class=&quot;breadcrumb&quot;&gt;  &lt;a&gt;三钻&lt;/a&gt;  &lt;a&gt;前端&lt;/a&gt;  &lt;a&gt;教程&lt;/a&gt;&lt;/div&gt;</code></pre><p><strong>CSS</strong></p><pre><code class="css">.breadcrumb {  font-size: 1.6rem;  color: #fff;}.breadcrumb a:first-child {  color: #82fcfd;}.breadcrumb a:first-child::before {  content: &#39; » &#39;;}.breadcrumb a::after {  content: &#39; /&#39;;  color: #ef6eae;}.breadcrumb a:last-child::after {  content: &#39;&#39;;}</code></pre><blockquote><p>🌟<strong>知识总结</strong></p><ul><li><strong>::before | ::after</strong> — 伪元素用于向某些选择器添加特殊的效果。</li><li><strong>content</strong> — CSS 属性用于在元素的 ::before 和 ::after 伪元素中插入内容。使用 content 属性插入的内容都是匿名的可替换元素。</li><li><strong>:first-child</strong> — CSS 伪类表示在一组兄弟元素中的第一个元素。</li><li><strong>:last-child</strong> — CSS 伪类代表父元素的最后一个子元素。</li></ul><p><strong>自定义无序列表：</strong><a href="http://tridiamond.me/frontend-tutorials/customBulletPoint"><strong>预览实际效果</strong></a> ｜ <a href="https://github.com/TriDiamond/frontend-tutorials/tree/master/customBulletPoint" target="_blank" rel="noopener"><strong>GitHub 源码</strong></a> ｜ 喜欢的童鞋 🌟star 一下谢谢<br><strong>面包屑导航：</strong><a href="http://tridiamond.me/frontend-tutorials/breadcrumbs"><strong>预览实际效果</strong></a> ｜ <a href="https://github.com/TriDiamond/frontend-tutorials/tree/master/breadcrumbs" target="_blank" rel="noopener"><strong>GitHub 源码</strong></a> ｜ 喜欢的童鞋 🌟star 一下谢谢</p></blockquote><hr><h1 id="五、图片视差效果"><a href="#五、图片视差效果" class="headerlink" title="五、图片视差效果"></a>五、图片视差效果</h1><p><img src="https://img-blog.csdnimg.cn/20200403231604772.gif#pic_center" alt="图片视差效果"><br>这个超级炫酷的效果在官网中非常的受欢迎，这种效果可以给用户带来视觉冲击，也给我们的网站带来了活力。普通的网页图片会跟随着网页一起滑动，但是视觉差效果图就会固定在底部，只有图片所在的窗口上的元素会移动。</p><h2 id="仅使用-CSS"><a href="#仅使用-CSS" class="headerlink" title="仅使用 CSS"></a>仅使用 CSS</h2><p>对你没有看错，这个效果只需要用到 CSS 就能轻易的实现！我们只要使用一个 CSS 背景图的属性<code>background-attachment: fixed</code>，这个特性会把背景相对于视口固定。即使一个元素拥有滚动机制，背景也不会随着元素的内容滚动。</p><p><strong>实现理论：</strong></p><p>一、在含有图片的元素中加入<code>background: url()</code>和<code>background-size: cover</code>（第二个属性适用于定义图片为封面，可以让图片大小自动适应，在很大的屏幕也会显示完整的图片）</p><p>二、然后附加固定背景图的属性<code>background-attachment: fixed</code></p><p>三、最后给这个元素加入一个高度<code>height: 100%</code>或者任意的高度<code>height: 400px</code></p><p>就那么简单哦！不用怀疑，马上上代码，大家都可以自己去试试哦！</p><p><strong>HTML</strong></p><pre><code class="html">&lt;div class=&quot;wrapper&quot;&gt;   &lt;div class=&quot;parallax-img&quot;&gt;&lt;/img&gt;   &lt;p&gt;这里填写一堆文字就可以了，尽量多一点哦&lt;/p&gt;&lt;/div&gt;</code></pre><p><strong>CSS</strong></p><pre><code class="css">.wrapper {  height: 100wh;}.parallax-img {  background-attachment: fixed;  background-position: center;  background-repeat: no-repeat;  background-size: cover;  height: 100%;  background-image: url(&#39;http://ppe.oss-cn-shenzhen.aliyuncs.com/collections/182/7/thumb.jpg&#39;);}p {  font-size: 20px;  padding: 1.5rem 3rem;  min-height: 1000px; // 当你的文字内容不够，也能撑出足够的高度来看到效果，当然如果你文字足够多，就不需要了}</code></pre><p>如果想做到我动图里面一样的效果，或者想看是怎么实现的，可以查看下面总结里面的“<strong>预览实际效果</strong>”或者看“<strong>GitHub 源码</strong>”。</p><blockquote><p>🌟<strong>知识总结</strong></p><ul><li><strong>background-attachment: fixed</strong> — 把背景相对于视口固定。即使一个元素拥有滚动机制，背景也不会随着元素的内容滚动。</li><li><strong>background-size: cover</strong> — 可以让图片大小自动适应，在很大的屏幕也会显示完整的图片。</li></ul><p><a href="http://tridiamond.me/frontend-tutorials/parallaxImages"><strong>预览实际效果</strong></a> ｜ <a href="https://github.com/TriDiamond/frontend-tutorials/tree/master/parallaxImages" target="_blank" rel="noopener"><strong>GitHub 源码</strong></a> ｜ 喜欢的童鞋 🌟star 一下谢谢</p></blockquote><hr><h2 id="使用-CSS-JavaScript"><a href="#使用-CSS-JavaScript" class="headerlink" title="使用 CSS + JavaScript"></a>使用 CSS + JavaScript</h2><p><img src="https://img-blog.csdnimg.cn/20200405164618623.gif#pic_center" alt=""><br>有些童鞋可能没有被这个震撼到或者还是觉得不够刺激。那我们再来一个高级例子，上面的例子在滑动的时候图片是固定死的。如果我们加上 JavaScript 的助力，我们可以让窗口的图片缓慢的跟随这个页面滑动，使得效果更有动力和更有冲击感。</p><p><strong>实现理论</strong><br>首先讲一下排版，因为我们需要在我们滑动页面的时候使用 JavaScript 偏移图片，所以我们需要给图片一个 CSS 属性让我们可以让图片可以根据一个速度来往上或者往下移动。这个例子里面我们让所有图片包裹在一个<code>div</code>里面，<code>class</code>名为<code>block</code>。这个<code>div</code>给予相对定位属性<code>position: relative</code>，这个时候我们就可以在里面加入图片，然后让图片绝对定位<code>position: absolute</code>在这个<code>div</code>盒子里面。</p><p>但是图片是可能很大的，我们需要把图片不超出我们定义个盒子，所以我们的<code>div</code>同时也给予了<code>overflow: hidden</code>和一个高度<code>height: 100%</code>。这样图片超出<code>div</code>盒子就会被隐藏。</p><p>布局代码如下：</p><pre><code class="html">&lt;div class=&quot;block&quot;&gt;  &lt;img src=&quot;https://unsplash.it/1920/1920/?image=1005&quot; data-speed=&quot;-1&quot; class=&quot;img-parallax&quot; /&gt;  &lt;h2&gt;视差速度 -1&lt;/h2&gt;&lt;/div&gt;&lt;div class=&quot;block&quot;&gt;  &lt;img src=&quot;https://unsplash.it/1920/1920/?image=1067&quot; data-speed=&quot;1&quot; class=&quot;img-parallax&quot; /&gt;  &lt;h2&gt;视差速度 1&lt;/h2&gt;&lt;/div&gt;</code></pre><pre><code class="css">html,body {  margin: 0;  padding: 0;  height: 100%;  width: 100%;  font-family: &#39;Amatic SC&#39;, cursive;}.block {  width: 100%;  height: 100%;  position: relative;  overflow: hidden;  font-size: 16px;}.block h2 {  position: relative;  display: block;  text-align: center;  margin: 0;  top: 50%;  transform: translateY(-50%);  font-size: 10vw;  color: white;  font-weight: 400;}.img-parallax {  width: 100vmax;  z-index: -1;  position: absolute;  top: 0;  left: 50%;  transform: translate(-50%, 0);  pointer-events: none;}</code></pre><p>实现这个布局，在你滑动的时候，图片是不会移动的。因为最后一步就是加入 JavaScript 的辅助，让图片活起来。</p><pre><code class="html">&lt;script src=&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;  // 循环获取每一个图片元素  $(&#39;.img-parallax&#39;).each(function () {    var img = $(this);    var imgParent = $(this).parent();    function parallaxImg() {      var speed = img.data(&#39;speed&#39;); // 获取每张图片设置了的偏移速度      var imgY = imgParent.offset().top; // 获取图片盒子所在的Y位置      var winY = $(this).scrollTop(); // 获取当前滑动到的位置      var winH = $(this).height(); // 获取浏览器窗口高度      var parentH = imgParent.innerHeight(); // 获取图片盒子的内高度      // 浏览器窗口底部的所在位置      var winBottom = winY + winH;      // 当前图片是否进入浏览器窗口      if (winBottom &gt; imgY &amp;&amp; winY &lt; imgY + parentH) {        // 运算图片需要开始移动的位置        var imgBottom = (winBottom - imgY) * speed;        // 运算出图片需要停止移动的位置        var imgTop = winH + parentH;        // 获取从开始移动到结束移动的%（根据开始与结束像素 + 移动速度）        var imgPercent = (imgBottom / imgTop) * 100 + (50 - speed * 50);      }      img.css({        top: imgPercent + &#39;%&#39;,        transform: &#39;translate(-50%, -&#39; + imgPercent + &#39;%)&#39;,      });    }    $(document).on({      scroll: function () {        parallaxImg();      },      ready: function () {        parallaxImg();      },    });  });&lt;/script&gt;</code></pre><blockquote><p>🌟<strong>知识总结</strong></p><ul><li><strong>position: relative</strong> — 相对定位。</li><li><strong>position: absolute</strong> — 绝对定位。</li><li><strong>overflow: hidden</strong> — 如果需要，内容将被剪裁以适合填充框。 不提供滚动条。</li></ul><p><a href="http://tridiamond.me/frontend-tutorials/advanceParallaxImages"><strong>预览实际效果</strong></a> ｜ <a href="https://github.com/TriDiamond/frontend-tutorials/tree/master/advanceParallaxImages" target="_blank" rel="noopener"><strong>GitHub 源码</strong></a> ｜ 喜欢的童鞋 🌟star 一下谢谢</p></blockquote><hr><h1 id="六、裁剪图像的动画"><a href="#六、裁剪图像的动画" class="headerlink" title="六、裁剪图像的动画"></a>六、裁剪图像的动画</h1><p><img src="https://img-blog.csdnimg.cn/2020040600130848.gif#pic_center" alt="裁剪图像的动画"><br>在有 CSS3 之前裁剪图片实现也是颇有难度的。现在我们有了两个非常方便简单的 CSS3 属性可以实现裁剪，那就是<code>object-fit</code>和<code>object-position</code>, 这两个属性可以让我们改变图片的大小，但是不影响图片的长宽比。</p><p>当然我们可以使用图片处理工具或者使用 JavaScript 等插件来实现图片裁剪功能。但是因为有了 CSS3 的属性，我们不只可以裁剪，我们还可以用裁剪的属性来做图片的动态效果。</p><p>为了让我们的例子更加简单，我们这里使用了<code>&lt;input type=&quot;checkbox&quot;&gt;</code>复选框元素，这样我们就可以使用<code>:checked</code>的伪类来触发启动效果。所以在例子里面我们完全不需要 JavaScript 的协助。</p><p><strong>实现原理：</strong></p><p>一、首先给予图片一个宽高<code>height: 1080px</code>，<code>width: 1920px</code>。</p><p>二、然后用 CSS 选择器，锁定当<code>input</code>被选中后<code>img</code>标签的样式变化。当被选中时，给图片设定一个新的宽高，这里我们给宽高各自 500 像素：<code>width: 500px</code>，<code>height: 500px</code>。</p><p>三、然后我们加上了过渡效果和时间让图片改变宽高时有动画过渡效果：<code>transition: width 2s, height 4s;</code>。</p><p>四、最后加上<code>object-fit: cover</code>和<code>object-position: left-top</code>这两个属性来保持图片的宽高比例，这样就大功告成了！</p><p><strong>我们来看看完成的代码：</strong></p><pre><code class="html">勾选裁剪图片&lt;input type=&quot;checkbox&quot; /&gt;&lt;br /&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2020032122230564.png&quot; alt=&quot;Random&quot; /&gt;</code></pre><pre><code class="css">input {  transform: scale(1.5); /* 只是用来放大复选框大小 */  margin: 10px 5px;  color: #fff;}img {  width: 1920px;  height: 1080px;  transition: 0s;}/* css选择器锁定复选框被选中时的状态 */input:checked + br + img {  width: 500px;  height: 500px;  object-fit: cover;  object-position: left-top;  transition: width 2s, height 4s;}</code></pre><blockquote><p>🌟<strong>知识总结</strong></p><ul><li><strong>object-fit</strong> — CSS 属性指定可替换元素的内容应该如何适应到其使用的高度和宽度确定的框。</li><li><strong>object-position</strong> — 用来切换被替换元素的内容对象在元素框内的对齐方式。</li><li><strong>transition</strong> — 过渡可以为一个元素在不同状态之间切换的时候定义不同的过渡效果。</li></ul><p><a href="http://tridiamond.me/frontend-tutorials/cropImage"><strong>预览实际效果</strong></a> ｜ <a href="https://github.com/TriDiamond/frontend-tutorials/tree/master/cropImage" target="_blank" rel="noopener"><strong>GitHub 源码</strong></a> ｜ 喜欢的童鞋 🌟star 一下谢谢</p></blockquote><hr><h1 id="七、混合模式（Blend）"><a href="#七、混合模式（Blend）" class="headerlink" title="七、混合模式（Blend）"></a>七、混合模式（Blend）</h1><p><img src="https://img-blog.csdnimg.cn/20200406104716527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt="混合模式"><br>如果有使用过 Photoshop 的同学对<code>blend</code>混合模式应该是非常熟悉了，我们都知道混合模式是非常强大，也是 p 图时非常常用的一个功能。但是你们有没有想象过可以在浏览器的 CSS 中直接使用呢？对我们不需要设计师给我们做图，我们前端也可以实现混合模式了。</p><p>在 CSS 中我们不只可以对<code>background</code>背景加入混合模式，我们可以对任何一个元素的自带背景加入混合模式，让你可以做出很多之前没有想过的效果和排版。</p><p>往一个元素加入混合模式，我们只需要使用到一个 CSS 属性<code>mix-blend-mode</code>即可。</p><p><strong>简单实现原理：</strong></p><p>首先我们只需要加一个 h1 标题标签</p><pre><code class="html">&lt;h1&gt;混合模式：颜色减淡&lt;/h1&gt;</code></pre><p>然后我们给<code>h1</code>标签加入<code>mix-blend-mode</code>中的颜色减弱模式<code>color-dodge</code>，但是要注意的是我们需要给<code>body</code>和<code>html</code>加入背景颜色<code>background: white</code>，要不你会发现这个效果会无效。因为<code>h1</code>我们没有给颜色，会自动往上级继承，并且混合模式是针对背景颜色的过滤，所以 body 和 html 需要有背景颜色才行。</p><pre><code class="css">h1 {  mix-blend-mode: color-dodge;  font-family: yahei;  font-size: 5rem;  text-align: center;  margin: 0;  padding: 20vh 200px;  color: #d1956c;}html,body {  margin: 0;  background-color: white;}body {  background-image: url(https://images.unsplash.com/photo-1505567745926-ba89000d255a?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=3302&amp;q=80);  background-repeat: no-repeat;  background-size: cover;  min-height: 100vh;  overflow: hidden;}</code></pre><p>换换背景图和<code>h1</code>标签的字体颜色就可以弄出各种不同的特效了。</p><p><img src="https://img-blog.csdnimg.cn/20200406104058843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt="颜色减弱"><br><img src="https://img-blog.csdnimg.cn/20200406103844679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt="颜色减弱"></p><blockquote><p>🌟<strong>知识总结</strong></p><ul><li><strong>mix-blend-mode</strong> — CSS 属性描述了元素的内容应该与元素的直系父元素的内容和元素的背景如何混合。</li></ul><p><a href="http://tridiamond.me/frontend-tutorials/blendMode"><strong>预览实际效果</strong></a> ｜ <a href="https://github.com/TriDiamond/frontend-tutorials/tree/master/blendMode" target="_blank" rel="noopener"><strong>GitHub 源码</strong></a> ｜ 喜欢的童鞋 🌟star 一下谢谢</p></blockquote><hr><h1 id="八、瀑布流布局"><a href="#八、瀑布流布局" class="headerlink" title="八、瀑布流布局"></a>八、瀑布流布局</h1><p><img src="https://img-blog.csdnimg.cn/20200406134310340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center" alt="瀑布流布局"></p><p>CSS <code>Grid</code>和<code>Flexbox</code>让我们可以更简便，更容易和更快的实现各式各样的响应布局，并且让我们快捷方便的在布局中实现横向剧中和竖向剧中。但是回想一下以前是颇为困难的。</p><p>虽然这些新出的布局方式可以让我们解决很多以前的布局难题，但是像瀑布流布局这种，就无法用它们简单来实现了。因为瀑布流一般来说都是宽度一致，但是高度是根据图片自适应的。并且图片的位置也是根据在上方图片的位置而定的。</p><p>其实最好实现瀑布流布局的办法就是用 CSS 的列属性套件，这套属性大多数都是用于排版杂志中的文本列。但是用于布局瀑布流也是特别实用哦。因为以前需要实现瀑布流，就必须有 JavaScript 的辅助来计算图片高度然后决定每张图片的定位和位置，所以现在有了列属性就可以使用纯 CSS 实现了。</p><p><strong>实现原理：</strong></p><p>实现这个布局，首选我们需要把所有的内容先包裹在一个<code>div</code>元素里面，然后给这个元素<code>column-width</code>和<code>column-gap</code>属性。</p><p>然后，为了防止任何元素被分割到两个列之间，将<code>column-break-inside: avoid</code>添加到各个元素中。</p><p>神奇的效果就完美实现了，零 JavaScript。</p><p>我们来看看代码：</p><pre><code class="html">&lt;div class=&quot;columns&quot;&gt;  &lt;figure&gt;    &lt;img src=&quot;https://source.unsplash.com/random?city&quot; alt=&quot;&quot; /&gt;  &lt;/figure&gt;  &lt;figure&gt;    &lt;img src=&quot;https://source.unsplash.com/random?night&quot; alt=&quot;&quot; /&gt;  &lt;/figure&gt;  &lt;figure&gt;    &lt;img src=&quot;https://source.unsplash.com/random?developer&quot; alt=&quot;&quot; /&gt;  &lt;/figure&gt;  &lt;figure&gt;    &lt;img src=&quot;https://source.unsplash.com/random?building&quot; alt=&quot;&quot; /&gt;  &lt;/figure&gt;  &lt;figure&gt;    &lt;img src=&quot;https://source.unsplash.com/random?water&quot; alt=&quot;&quot; /&gt;  &lt;/figure&gt;  &lt;figure&gt;    &lt;img src=&quot;https://source.unsplash.com/random?coding&quot; alt=&quot;&quot; /&gt;  &lt;/figure&gt;  &lt;figure&gt;    &lt;img src=&quot;https://source.unsplash.com/random?stars&quot; alt=&quot;&quot; /&gt;  &lt;/figure&gt;  &lt;figure&gt;    &lt;img src=&quot;https://source.unsplash.com/random?forest&quot; alt=&quot;&quot; /&gt;  &lt;/figure&gt;  &lt;figure&gt;    &lt;img src=&quot;https://source.unsplash.com/random?girls&quot; alt=&quot;&quot; /&gt;  &lt;/figure&gt;  &lt;figure&gt;    &lt;img src=&quot;https://source.unsplash.com/random?working&quot; alt=&quot;&quot; /&gt;  &lt;/figure&gt;&lt;/div&gt;</code></pre><pre><code class="css">.columns {  column-width: 320px;  column-gap: 15px;  width: 90%;  max-width: 1100px;  margin: 50px auto;}.columns figure {  display: inline-block;  box-shadow: 0 1px 2px rgba(34, 25, 25, 0.4);  column-break-inside: avoid;  border-radius: 8px;}.columns figure img {  width: 100%;  height: auto;  margin-bottom: 15px;  border-radius: 8px;}</code></pre><blockquote><p>🌟<strong>知识总结</strong></p><ul><li><strong>column-width</strong> — CSS 属性建议一个最佳列宽。 列宽是在添加另一列之前列将成为最大宽度。</li><li><strong>column-width</strong> — 该 CSS 属性用来设置元素列之间的间隔 (gutter) 大小。</li><li><strong>column-break-inside</strong> — 设置或检索对象内部是否断。</li></ul><p><a href="http://tridiamond.me/frontend-tutorials/waterfall"><strong>预览实际效果</strong></a> ｜ <a href="https://github.com/TriDiamond/frontend-tutorials/tree/master/waterfall" target="_blank" rel="noopener"><strong>GitHub 源码</strong></a> ｜ 喜欢的童鞋 🌟star 一下谢谢</p></blockquote><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="https://img-blog.csdnimg.cn/20200406152836460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt="总结"><br>我希望这 8 个前端小技巧和特效对大家有帮助，或多或少有吸收一点新的前端知识。这篇文章提到的内容，其实很多都是值得深挖和学习的。有一些例子我做的比较简单，但是其实是有无限的可能性。喜欢前端的童鞋们，让我们继续在前端领域中一起深挖，让我们的热爱无限的燃烧起来吧！</p><hr><p>在最后我想给大家讲一下我对前端的热爱和态度。</p><p>回想前端这几年，发展真的是突飞猛进，从前端排版，HTML5+CSS3 做 H5 页面，到前端组件化，各种 UI 框架满天飞。</p><p>一开始我随着热潮用起了 UI 框架，起初觉得特别方便，来一个新的项目就直接上一个 UI 框架，研发速度也非常快。但是久而久之就觉得前端开发变成了处理数据，对接接口，实现交互。</p><p>某天在阅览国外的一些前端设计和框架的时候，我突然发现国内多数的前端开发者都不再怎么使用 CSS3 做出一些很好玩的布局和特效了。现在市面上的系统和页面都是千篇一律，普遍都是用一些知名的 UI 框架搭建系统和 APP，基本自己动手去排版已经少之又少。前端已不再是以前的前端，缺少了灵魂。</p><p>但是我们回想一下，我们刚刚开始学习前端的时候，让我们最有成就感，觉得前端特别有意思的那种感觉。就是那种让我们觉得神乎奇迹，不可思议的布局，特效和交互。那种感觉自己成功实现了很优美，很炫酷的页面和特效的感觉，让我们越做越来劲，越做越是兴奋。</p><p>但是在某些公司，研发部都是要求快速开发，UI 设计部门也是受到时间的控制和限制，所以逐步走进了 UI 框架的限制之中。都是围绕这一些 UI 框架来设计和开发系统和应用。</p><p>作为一名热爱前端的开发者，我还是坚持在绝大多数的项目中，自己排版和实现页面交互特效。然后使用 UI 框架作为辅助，主要是用来减轻一些小组件和常用组建的快速实现。（可以说我是比较追求完美和外貌协会的程序员 😂）</p>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML&amp;CSS </tag>
            
            <tag> CSS Animation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写给想学和在学编程的你们，学习编程的7个好处</title>
      <link href="/2020/03/29/notes/benefits-for-learning-programming.html"/>
      <url>/2020/03/29/notes/benefits-for-learning-programming.html</url>
      
        <content type="html"><![CDATA[<p>你们有没有这种经历？亲戚或者爱人甚至是不做技术的朋友，看到我们屏幕上的小括号<code>{}</code>，大括号<code>[]</code>，还有一大堆的技术英文单词<code>private</code>，<code>public</code>，<code>function</code>等等，都会惊叹一句“<strong>你写的是什么呀？太可怕了，全是英文看不懂。</strong>”或者“<strong>做个程序员是不是需要英语很好的呀？太难了！</strong>” 其实当真正学习编程和做起程序员来一切并没有那么的可怕，也并不需要英语有多厉害。不信的小伙伴可以问问身边大多数的程序员，问问他们刚开始学编程的时候英语是不是很好，估计得到的大部分答案都是：“没有哈，不是的哈”。</p><p>当然，如果你英语比较好，在编程的路上确实是会给你带来一定的优势。我们可以这么去想，会英语的看代码就等同于会是在看一本书一样，函数名，方法名其实都在描述这个代码是在做什么的。自然理解起来的时候就不需要很费劲了。加上学习新的技术和原汁原味的技术时，都会需要看国外的文章和文档，这些基本都是英文。<strong>但是不会英语也一样可以学好编程，也一样可以成为一名优秀的程序员。甚至在学编程的路上，你的英语也会有所提升。</strong></p><p>==其实选择学编程是能改变人生的==。可能起初很多人学编程，报了一个编程培训班，为了就是能拿到更高的工资或者有更好的工作环境。最后坚持着坚持着，最后会发现编程还会给我们带来很多个人能力和技能上的提升。</p><hr><h1 id="「一」什么是编程？"><a href="#「一」什么是编程？" class="headerlink" title="「一」什么是编程？"></a>「一」什么是编程？</h1><p><img src="https://img-blog.csdnimg.cn/20200327115516168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center" alt="什么是编程？"></p><p>想开始学习编程或者坚持学习编程，我们首先要知道什么是编程？做编程的开发者是做什么的？这个行业是否合适自己？— 做为程序员，开发者和编程工程师，对外行人来说我们跟 TA 们说我们这些职称，基本 TA 们脑海里都会出现一个在修电脑或者修手机的我们。还会来一句“噢噢，做 IT 的呀？改天过来帮我看看我的电脑，开不了机了。”</p><p><strong>在 TA 们的脑海里就出现了这么一个画面 🤔：</strong></p><center><img src="https://img-blog.csdnimg.cn/20200327114633939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" width="40%" alt="在TA们的脑海里就出现了这么一个画面" /></center><h2 id="程序员是什么？"><a href="#程序员是什么？" class="headerlink" title="程序员是什么？"></a>程序员是什么？</h2><p>我们用一个能让大家都懂的方式解说程序员做的编程工作到底是什么：</p><blockquote><p>如果现在我们需要一把剑，那我们就会找造剑的工匠。 同等现在我们要做一个手机 APP，一个网页系统，一个软件或者一个电脑工具，打造这些的工匠就是程序员。</p><hr><p>🌟<strong>简单的说“程序员和开发者就是打造软件或者互联网产品的工匠，我们的材料就是全英文的<code>代码</code>，我们的工具就是<code>代码编辑器（IDE）</code>”</strong>。</p></blockquote><p>这样说外行人应该就懂程序员，开发者，软件工程师是个什么鬼玩意了。</p><hr><h2 id="前端和后端又是什么？"><a href="#前端和后端又是什么？" class="headerlink" title="前端和后端又是什么？"></a>前端和后端又是什么？</h2><p>好奇的人还会问，”听说开发还分后端和前端，那<code>后端</code>和<code>前端</code>又有区别呢？” — 好问题呀童鞋，这个真的让人难以解说了。不过不用怕，给大家两例子让 0 技术基础的 TA 们都能听的明明白白。</p><p><strong>后端解说例子：</strong></p><blockquote><p><strong>后端写的程序就是一个货物仓库中工作人员的指挥部</strong>。来仓库找材料的人需要 10 万个“外科口罩”。这个时候指挥部先找到这个口罩在仓库的具体坐标，然后会发出指令告诉仓库工作人员去到某一个地区的货架，第二排找到这口罩，最后搬过来给到需求方。</p><hr><p><strong>转化为技术专业名词：</strong></p><ul><li>找货物的人 — 就是<strong>调用后端接口</strong>拿数据的一方</li><li>仓库指挥部 — 后端编写的<strong>程序</strong></li><li>仓库 — 就是保存资料信息的<strong>数据库</strong></li><li>仓库的货物 — 就是数据库里面的<strong>数据</strong></li></ul></blockquote><p><strong>前端解说例子：</strong></p><blockquote><p><strong>如果后端操控存放货物的仓库，那前端就是建筑师</strong>，前端主要的工作是建立店铺和装修店铺，然后从仓库获取货物到店铺中展示。一个店铺中货物必须分类摆放，有条理，好看才会有人买。所以前端还会规整货物，让货物分类摆放，同时让客户容易找到还好看的舒服感，自然就会有更多的客人来店购物。</p><hr><p><strong>转化为技术专业名词：</strong></p><ul><li>店铺 — 就是<strong>前端打造的页面</strong></li><li>建立店铺和装修的材料 — 就是前端页面<strong>排版</strong></li><li>店铺中的货物 — 就是后端给予前端的<strong>数据</strong></li><li>取货 — 就是前端请求后端获取<strong>数据</strong></li></ul></blockquote><hr><p>还有比较常见的两个方向，前端和后端。当然编程还有很多方向，比如“算法工程师”，“运维工程师”，“测试工程师” 等等。这里我就不一一细说了。有需要了解其他的可以在评论区给我留言。</p><p>我们需要了解清楚什么是编程，开发者们做的是什么。程序员用编程打造软件产品的工匠，给人类带来更便捷的工具与平台。让我们可以通过手机，电脑加互联网来自动化，系统化，智能化的完成我们的工作或者沟通。甚至可以高效提高很多行业中工作的效率，解决很多繁杂的操作和任务。还可以给我们带来信息快速传播和展示的作用。每个程序员都有一个梦想：“用代码改变生活，用代码改变世界！”</p><hr><h1 id="「二」学编程的好处"><a href="#「二」学编程的好处" class="headerlink" title="「二」学编程的好处"></a>「二」学编程的好处</h1><p><img src="https://img-blog.csdnimg.cn/20200328101632907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center" alt="学编程的好处"><br>学习编程其实没有想象中那么难，但是也并非一条容易的道路。在学习编程的过程中最困难的就是动力和坚持。一开始学习的时候我们会很感兴趣，每做出一个小功能后会感到非常有成就感。可是当我们越学越多，越学越难之后我们会开始觉得枯燥无味。一个问题或者一个难题可能都要好几个小时，甚至是一天两天才得以解决。所以不论是我们在学习之前还是在学习中工作中，我们都要有发自内心的热爱和动力。</p><p>所以我们需要找到我们学习编程的好处，我们能得到什么，能改变什么。这样我们的毅力和动力才能得以持续维持。我希望通过接下来的分析，能给到感兴趣但是也不是很有动力的童鞋开始学习编程，在学习编程中有点迷茫的童鞋更能坚持下来，更加热爱这一条道路！</p><hr><h2 id="1-拥有把想法转化成应用的魔法"><a href="#1-拥有把想法转化成应用的魔法" class="headerlink" title="1. 拥有把想法转化成应用的魔法"></a>1. 拥有把想法转化成应用的魔法</h2><p><img src="https://img-blog.csdnimg.cn/2020032811170475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt="拥有把想法转化成应用的魔法"><br>做为一个程序员，最有成就感的一件事情就是能把一些想法，一些有趣的点子通过编程把它们转化为应用。一个可以操作、可以体验和可以帮助很多人的应用。但是如果我们不懂编程，我们就只能找技术来帮助你实现。但是开发成本太昂贵了，最终就选择放弃。</p><p>估计大家在这个互联网时代中，每天日复一日的生活中，都会有那么一瞬间觉得 “有那么一个 APP，那么一个平台，我们做某一件事就会方便多少，就会简单多少” 。但是我们不懂编程，不懂技术，无法去实现，所以到了最后我们就会与这个很好的想法擦肩而过了。也许当过了几个月后，就会发现有人做出了这么个应用，和你当时想的是一摸一样的，就会开始觉得，“诶，如果我能自己做，现在看到的这个应用就是写上了我的签名，在改变大家生活和人生的人就是我了”。</p><p>在现实中，如果要一个想法落实到生产出应用也绝非易事。人在大脑构思出来的想法，要表达出来给到产品经理整理逻辑，转化成原型。然后通过原型还需要 UI 设计师转化成设计稿，最终到开发者手上再理解一才能真正开始研发。但是多少想法在这个过程中被人与人之间的沟通，传达，理解所被丢失的细节呢？所以最终做出来的产品往往不是完完全全和一开始构思的一摸一样。</p><p>其实很多开发者都是在这个研发流水线中的一员，研发部没有了产品，没有 UI 设计，前端就无法排版，后端就无法研发。不知道大家有没有留意大厂或者是国外的开发者。很多前端都是懂 UI，懂设计理念，甚至是两者兼备的。然后后端都是懂前端，起码有前端知识的基础。为什么呢？因为一个想法经过越少的人，就会丢失越少的信息。这样做出来的产品才能与当初想的越贴切。当然，如果研发中心的每个部门的人都是牛人，必然能打造很好的产品的。但是中小型的公司的人员能力参差不齐，在我以前待过的中小型公司的老板都是天天跟着产品，设计和开发的屁股盯着。就怕最终产品走了样。</p><p>俗话说的好“如果你想心想事成，最好的方法是自力更生”。也是因为这样我也走上了全栈开发之路。产品，设计，前端，后端和运维都专研了一遍。</p><p>当然做为专研一个技术领域的开发人员也能做出很好的产品。比如说博客，个人网站，excel 处理程序，春节抢票工具等等。多少这些提高我们工作和生活的产品都是开发者自己在日常生活或者工作中，想避免一些繁杂的事情做出来的工具或者应用。</p><p>但是如果我们不懂编程，就只能依赖于别人。<strong><code>“因为懂编程，我们的想象力可以是我们的创造力”</code></strong></p><hr><h2 id="2-拥有强大的学习能力"><a href="#2-拥有强大的学习能力" class="headerlink" title="2. 拥有强大的学习能力"></a>2. 拥有强大的学习能力</h2><p><img src="https://img-blog.csdnimg.cn/20200328120210359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt="拥有强大的学习能力"><br>编程的世界是一个高速发展和变化的环境，也与星空一样知识是无边无际的。今日的编程实现方式与 5 年前的来相比，已经是截然不同了。每天每个编程的语言与 TA 们的框架都在升级迭代中。</p><p>我们无法学会所有编程语言或者技术栈，不过我们是可以在某几个编程领域中发光发亮。只要我们坚持，专研，深度学习一门技术，我们必定会变成这一方面的专家。</p><p>在编程的世界里，我们会找到很多可以学习和成长的空间。无边无际的知识海洋，就算一门语言我们学到了 TA 的巅峰境界，我们还可以去突破 TA，或者选择再学习多一门语言来提升我们自己的研发能力。所以在这种高速发展的技术领域中，我们的大脑的会被各种技术的知识开阔我们的很多思维。</p><p><strong>给大家讲一个我的经历：</strong></p><p>我入行编程事业的时候没有现在的前后端分离，后端是需要和前端混编的，而且一开始在中小型企业也没有完善的产品部，设计部，研发部。所以对于前端的知识还是需要懂的。我进入的第一家公司，没有产品经理，没有 UI 设计师，没有前端工程师，研发部就我一个人。一进入公司项目老大就跟我说，要我一个月做一个物流管理系统（ERP），并且要实现：商品管理，订单管理，进销存管理。然后商品和订单，需要与淘宝，天猫和京东对接上，可以实时同步。从产品的需求整理，沟通到设计和研发都是我一个人在弄。</p><p>年少轻狂的我，毕竟是交代下来的工作，那就是一个字“干”！从不懂什么叫 ERP，到了解商品管理，多规格 SKU，订单状态流，入库出库单到学会对接第三方平台订单。一路过来有无数个不眠夜，无数个在写着写着代码就昏睡过去几分钟的经历。不止需要学懂业务，还需要自己排版，自己提升自己前端的能力。这个过程说长不长，说短不短，一个月我独立完成了商品体系，订单体系，进销存体系，订单同步完成了 80%左右。（后面公司招到了更多的开发，最后与 4 个开发者一起完成了这个系统。随后还做了客户管理系统 — CRM）</p><p>说实话这个过程我有无数遍想过放弃和辞职，但是我出去又有什么本事去更好的公司呢？我当时的技术能力一文不值，去一个好的公司根本就是妄想。咬咬牙齿就继续坚持下来了。</p><p>一点都不夸张的说，当时基本每天上班 18-20 个小时，眯眼就大概 2-4 个小时。但是事后，我发现自己学习能力，适应能力，抗压能力各方面都得到了飞跃性的提升。在我往后的技术生涯中有了很多帮助。当然我并不建议大家都进入这种玩命的公司来快速学习和成长。毕竟当时的我是被逼无奈。</p><p>在我的这段经历出来后，我感觉自己脱胎换骨，对于技术的热爱半点不减，反而发现不停的学习和成长非常重要。过了那么多年后还在学习和成长的路上。</p><p><code>不知不觉在编程的领域中，会发现我们的学习能力会得到不断的提升，因为我们每天都在学习和成长。而我们的未来还有无边无际的知识海洋在等着我们。</code></p><hr><h2 id="3-编程提升逻辑思维和分析的能力"><a href="#3-编程提升逻辑思维和分析的能力" class="headerlink" title="3. 编程提升逻辑思维和分析的能力"></a>3. 编程提升逻辑思维和分析的能力</h2><p><img src="https://img-blog.csdnimg.cn/20200329143602445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center" alt="编程提升逻辑思维和分析的能力"><br>编程就是用逻辑思考能力把问题分解成一个个小问题，逐个突破。也是用分析能力把功能和任务分解成一个个小任务，然后小步快跑的去快速完成。</p><h3 id="逻辑思维能力"><a href="#逻辑思维能力" class="headerlink" title="逻辑思维能力"></a>逻辑思维能力</h3><p>在编程中我们会遇到很多问题，并且需要我们一个个的去解决。解决困难，解决问题是做为一个开发者必备的技能。大到技术架构，解决业务场景带来的难度和逻辑复杂度，小到解决系统中的问题和缺陷，使用逻辑思维去排查和修复漏洞。</p><p>在每天的工作中开发者都是会面对各种各样的问题和困难，长年累月每一个开发者都会养成解决问题的能手。渐渐的我们会有各式各样解决问题的办法。一个我们经常用的口诀“先思考，后百度，再求助”。（个人推荐用 Google，更容易找到精准的答案）</p><p>也是因为日常的不断锻炼和思考，让我养成一种逻辑思维来解决问题。每一个问题都会建立一套一套的逻辑思维方式和方法来解决。比如系统中的一个问题出现了，一个资深的开发者，瞬间就可以定位到问题并且给出解决方案。其中最重要的一个点是因为资深开发者长年累月的经验，还有就是熟悉解决问题的排查方法，一套高效快速的方法。</p><h3 id="分析能力"><a href="#分析能力" class="headerlink" title="分析能力"></a>分析能力</h3><p>作为一名开发者，每天都需要分析需求，功能，难题等等。分析、整理和思考都是每日的家常便饭。</p><p>当一个需求到手的时候，开发者需要去分析里面的功能，把功能分解成一个个小块来进行设计，给出对应的实现方案。同时也需要我们去分析里面新增，修改，优化的功能对现有架构，功能和体系存在的影响和难度。最后定制出解决方案或者实现方案。</p><p>除了需要分析需求，我们还需要去分析每个功能或者业务的流程和逻辑。比如一个系统中的登陆流程大概就是：<br><img src="https://img-blog.csdnimg.cn/20200329105421325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt="登陆流程"><br>经过编程的长期锻炼，我们的思维会发生改变，遇到每一件事情或者事物，我们都会解刨分析。比如讲到车，我们首先会把车分解成一块块来分析，引擎，轮轴，车胎和油箱等等，然后深度分析每一部分的作用和逻辑，从而明白整体车是怎么运作和构建的。</p><p><code>编程的过程中，会培养我们的逻辑思考能力和分析能力。渐渐的会让我们成为一名先通过深度分析，然后用逻辑思维解决问题的大师。</code></p><hr><h2 id="4-用自动化程序为我们干活"><a href="#4-用自动化程序为我们干活" class="headerlink" title="4. 用自动化程序为我们干活"></a>4. 用自动化程序为我们干活</h2><p><img src="https://img-blog.csdnimg.cn/20200329114245175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center" alt="用自动化为我们干活"><br>日常生活中，我们有很多重复的工作，极度的枯燥乏味。但是我们幻想一下，如果编写一个程序可以帮我们自动化的处理掉这些工作，是不是很舒服？这样我们就会有更多的时间思考，或者做更多有意义的事情。</p><p>自动化，智能化都是现在科技高速发展时代经常听到的热搜词。目前给我们带来很多生活中方便的应用、系统和工具都是怎么来的呢？其实都是程序员用代码编写出来的。</p><p>支付宝、微信、钉钉等这些应用大家都很熟悉吧，基本每天都会用到。其实里面帮我们做了很多繁琐的事情，比如说支付宝帮我们记账，分析出每月我们的支出。微信的语音功能可以自动帮我们转换成文字，让我们不方便打字，或者懒得打字的时候，录一段语音，点个按钮就转换成文字，还自动给我们加上标点符号。钉钉为我们引入了自动蓝牙打卡，不需要天天排队打卡，每个月还会自动生成考勤异常情况，分析出某个人某天缺了打卡或者某天有缺勤需要补一个调休。</p><p>这些都是编程为我们日常生活中带来的方便和便捷。让一些需要我们坐下来花时间处理的繁杂事情变得更自动化、简单化和智能化。如果没有支付宝，每天我们还需要带着现金出门，不够现金了，还需要去一趟银行取钱。如果没有微信，我们可能还需要写信，然后出去邮寄才能与远方的朋友联系聊天。如果没有钉钉，每个月考勤情况，还需要我们去人工计算核对时间和缺勤情况。</p><p><code>学会编程不止可以编写改变世界的代码，还能为我们自己日常工作或者生活中编写工具来节省时间</code>。如果我们学会了 Python 编写 Excel 脚本来处理表格，自动填充和获取信息。根据我们每天在电脑的工作行为用脚捕捉写成日报表，甚至自动帮我们提交。自然就可以多出很多的时间来学习和做其他有意义的事情。</p><hr><h2 id="5-拥有高薪的职业"><a href="#5-拥有高薪的职业" class="headerlink" title="5. 拥有高薪的职业"></a>5. 拥有高薪的职业</h2><p><img src="https://img-blog.csdnimg.cn/20200329114342744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt="高薪职业"><br>技术行业的薪资相对比其他行业的平均薪资都会高一些。其实每一行都可以到达很高的薪资，每一行都有每一行的辛苦。但是一个永恒不变的定律，一分付出就有多一分收获。编程也是因为有难度，每天都是辛苦的脑力活，所以才会薪资高。</p><p>其实程序员工资高也是因为当前是互联网和科技高速发展的时代，所以编程岗位也还处于非常短缺的状态。加上技术一直在发展，技术和互联网相对比其他行业还是属于一个成长期。很多新型的技术和语言每日每夜都在更新迭代。技术行业的岗位也是每年都在增加。从几年前的前端后端，到现在的人工智能开发，甚至到未来的机器人开发。</p><p>技术行业的薪资体系，目前来看，我是觉得不是很标准的。这几年来面试的过程中，很多应聘者对自己能力的评估和价值都是有偏差的。但是我觉得相对其他行业，技术活都是凭能力说话，凭能力换来对等的报酬的。只要自己的能力强，技术的知识深度够，实战能力够硬。月入过万都不是梦。</p><p><code>如果你们热爱高效的工作和无限的自我提升空间，大概你们会很喜欢和技术开发人员一起工作。</code>我们是一群为了产出更有的程序而坚持提升自己，为了产出更好的产品而马不停蹄的提升自己的程序和代码。在这个领域中，会让你们大开眼界，扩大自己的思维瓶颈。每日都会发现各式各样的新鲜事物。<code>能力的提升都会给我们带来对等的薪资提升，是一个越努力越赚钱的行业！</code></p><hr><h2 id="6-可以是一个有趣的业余爱好"><a href="#6-可以是一个有趣的业余爱好" class="headerlink" title="6. 可以是一个有趣的业余爱好"></a>6. 可以是一个有趣的业余爱好</h2><p><img src="https://img-blog.csdnimg.cn/20200329114815410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center" alt="有趣的业余爱好"><br>学习编程成为一名开发者，不一定是要作为你朝九晚五的一份工作。可以把编程当成一个我们热爱的爱好，甚至是一份副业。</p><p>在我读大学的时候，我并不是一名读计算机专业的学生，当时的我特别热爱玩游戏，也特别喜欢写攻略。有一个公会里面的老大就跟我说，为什么不自己做一个攻略网站或者博客，还可以顺便赚一下广告费。就是这样我开始了自学编程，手把手搭建起自己的网站和博客，从此爱上了编程。</p><p>大学期间我还接过很多做网站的外包，做过无数个网站和博客的主题开发。也赚了一些游戏经费和学习经费。到了后面我开始研究开游戏私服，自学了一些游戏开发，开启了游戏私服。</p><p>这个过程中，我把编程当成了自己的一个业余爱好，也没有想过今天的我居然成为一名朝九晚五的程序员。回过头想想，编程给我带来了无比的快乐与成就感。作为一名开发者，可以让我们的想象力自由飞翔，实现我们所想，唯一需要的就是我们懂得编写代码， 代码，就能打造出我们心中所想的东西。无论你现在是想写一个网站介绍你自己，写一个博客记录你学习路上的种种，还是写一个无比有趣的小游戏。编程都可以如你所愿！</p><p><code>编程对于任何人都可以是一个有趣的业余爱好，没有门槛。任何人只要有一台电脑，能上网，就可以开始学编程。编程是不受任何的限制。只要你愿意学，有兴趣，有毅力，你都能学会。</code></p><hr><h2 id="7-充满活力及友善的社区"><a href="#7-充满活力及友善的社区" class="headerlink" title="7. 充满活力及友善的社区"></a>7. 充满活力及友善的社区</h2><p><img src="https://img-blog.csdnimg.cn/20200329153128613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt="充满活力及友善的社区"><br>程序员是我见过最有趣，最可爱，相处起来最轻松舒服的一群人。程序员之间没有过多的勾心斗角，像其他行业团队里面那么多的宫斗剧上演。在我待过的团队中，比较多的都是热爱学习，热爱生活，热爱代码的一群热血青年。</p><p>当然，凡事无绝对，都是有好有坏，也会有有一些比较让人恶心的程序员就希望自己每天工作中舒舒服服、一问三不知和一叫三不做的人。好在这些人还是占少数的，相对一二线的城市和有些规模的公司工作，普遍团队中的程序员都是比较好相处，并且在工作中会让我们非常开心有趣。</p><p>每一个语言或者框架，都有一群充满热情和活力的社区等着你的到来。比如 CSDN，掘金，Segmentfault，Stackoverflow，GitHub 等等这些大型的技术社区有很多的热心和热爱技术的开发在维护着这个充满热情的编程世界。如果我们需要帮助，有无数的手会伸出来援助于我们。</p><p><code>在学习编程和技术开发工作中，作为一名程序员，我们并不孤单。我们都是一个团体在一起努力，一起奋斗，一起并肩作战。</code>还有网上的各路英雄好汉在江湖中奔跑着，随时可以认识到其他的开发者与你共同进步，一起终生学习，热爱编程，热爱生活！</p><hr><h1 id="「终」总结"><a href="#「终」总结" class="headerlink" title="「终」总结"></a>「终」总结</h1><p><img src="https://img-blog.csdnimg.cn/20200329163909438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70" alt="总结"><br>这周我又写了一篇上万字的博文，给想学和在学编程的童鞋们打打气，也把我自己在编程事业中的感触分享给大家。最后我想大声的跟大家说：<code>“对！无论我们当前是多大岁数，不懂英文也好，不懂电脑也好，编程都值得我们花时间和精力去学”。</code></p><p>在这个技术和科技高速发展的时代，不懂编程就像古代中的文盲一样。你永远不知道你是否喜欢一样东西，直到你尝试它。所以对编程有兴趣的，想学编程的，现在就打开你们的电脑，开始投身到技术的海洋吧！在学习编程的你们，坚持再坚持，只要你努力，你坚持，就必定会成功！所有的付出都会得到收获，所有的艰辛都会换来未来的幸福，越努力越幸运，越努力越赚钱。</p><p>在编程的路上，有无限的可能，也有无限的空间，只要你热爱它，它也会相应的回报努力的我们！让我们一起终生学习，用代码改变生活，改变世界！</p>]]></content>
      
      
      <categories>
          
          <category> NOTES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programmer </tag>
            
            <tag> Better Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用“易于改编”原则, 提升编程水平, 写出更好的代码</title>
      <link href="/2020/03/22/notes/easy-to-change-principle.html"/>
      <url>/2020/03/22/notes/easy-to-change-principle.html</url>
      
        <content type="html"><![CDATA[<p>无论新手还是资深开发者都会经常问一个问题，“怎么写好的代码？”，要知道怎么写好代码，首先我们要知道怎么样才是好的代码。要有明确的目标，才能知道如何达成目标。在《程序员修炼之道》中提到的<code>“ETC Principle” -- 易于改编原则</code>。这个原则看似简单，但是我们越是深入思考越是觉得“简约而不简单”。</p><p>这篇文章里会详细解刨在实际产品研发中“易于改编”的原因和怎么做到“易于改编”， 从而让我们编写出更好的代码。</p><hr><h1 id="「一」程序为何需要“易于改编”？"><a href="#「一」程序为何需要“易于改编”？" class="headerlink" title="「一」程序为何需要“易于改编”？"></a>「一」程序为何需要“易于改编”？</h1><p><img src="https://img-blog.csdnimg.cn/2020032122230564.png" alt="程序为何需要“易于改编”"></p><p>为何代码必须要易于改编？因为一个系统是会随着一个产品的发展，每日有用户增长就会有一直做不完的需求。只要公司一直在运营着这个产品，需求就会随着公司的发展而改变。只要我们开发者一直与时并进专研新技术，我们就需要一直升级优化。</p><p>只有了解清楚一个系统在一个生命周期中，具体什么会推动我们程序改变，从中我们才会更深刻明白为什么我们的代码需要”易于改编“。</p><h2 id="需求会变"><a href="#需求会变" class="headerlink" title="需求会变"></a>需求会变</h2><p>无论我们是研发任何系统，产品需求都是会一直变的。这个是永恒不变的命运。为什么呢？</p><ol><li><strong><code>产品方向</code></strong> — 随着产品的营销，运营，发展会推动产品需求一直新增，修改，优化。</li><li><strong><code>使用量</code></strong> — 随着产品的用户量级，数据量级，并发量级也会推动程序的架构和策略上的变动。</li><li><strong><code>技术升级优化</code></strong> — 甚至是我们使用的语言，框架，依赖包等升级也会引起我们的代码需要适应。</li><li><strong><code>技术债</code></strong> — 可能是因为时间的限制，之前的代码重于实现而质量不佳。</li></ol><p>所以我们的代码会随着岁月的流逝一直在迭代升级优化。</p><h2 id="“可快速更变”是一个软件的核心"><a href="#“可快速更变”是一个软件的核心" class="headerlink" title="“可快速更变”是一个软件的核心"></a>“可快速更变”是一个软件的核心</h2><p>近几年很多技术团队启用了<code>敏捷迭代开发</code>模式。什么是敏捷迭代呢？</p><blockquote><p><strong>敏捷迭代就是把开发周期缩短到 1-4 周。小步快跑的迅速迭代交付功能上线。敏捷迭代的流程分别如下：</strong></p></blockquote><ol><li><strong>确定需求</strong> - 与老板和市场确认需求和流程</li><li><strong>需求评审</strong> - 与开发同频需求里面的功能点和业务流程</li><li><strong>技术反讲</strong> - 开发与产品同频需求，保证双方理解无误区，开发也需要评估开发难度和开发时间</li><li><strong>研发周期</strong> - 开发人员开始投入研发直接到功能和需求开发完毕，转交给测试，在测试环境提测</li><li><strong>测试周期</strong> - 测试和开发人员开始排除缺陷，修复所有在开发过程产生的 bug</li><li><strong>验收/预发布周期</strong> - 当测试在测试环境把所有 bug 排除掉后，当前迭代版本就会发布到预发布环境让市场和产品验收功能</li><li><strong>发布正式</strong> - 当验收通过后，当前迭代版本就可以部署上线到正式环境</li><li><strong>正式回归测试</strong> - 发布上线后，就会有正式回归测试，最后一道防线，保证系统加入的所有新功能都无问题</li><li><strong>迭代总结</strong> - 每一期迭代结束后都总结这次迭代遇到的问题，持续优化，提高效率</li></ol><p>你想想如果一个 APP 或者系统，几个月甚至一年才更新一次功能和升级。我们用起来其实很枯燥的，甚至我们会发现很多问题，还有很多功能可以便捷或者提升我们的使用体验。但是这么久才更新一次，我们还会对这个产品抱有希望吗？（除了微信这种已经很成熟的应用，但是就算是微信也是有持续更新的）。</p><p>所以一个好的产品，是需要快速迭代，小步快跑的迅速迭代交付功能上线的。也是因为这样，功能就需要持续更新、升级和优化。自然我们研发的代码就需要一直随着产品的变化而改编。而且还是每 1-4 周就会升级优化一次。</p><blockquote><p>🏆<strong>小总结一下：</strong></p><ul><li>一个系统会随着产品的发展和迭代，一直走在改变和更新的道路上。</li><li>因为系统一直在变，代码就需要响应系统的变化，持续的快速迭代升级优化。</li><li>既然代码需要快速的更变和升级，那程序的“易于改编”性就必须要高。</li></ul></blockquote><hr><h1 id="「二」如何做到“易于改编”？"><a href="#「二」如何做到“易于改编”？" class="headerlink" title="「二」如何做到“易于改编”？"></a>「二」如何做到“易于改编”？</h1><p><img src="https://img-blog.csdnimg.cn/2020032211021728.png" alt="如何做到“易于改编"></p><p>我们深刻懂得为什么系统会一直在改变，那我们就要知道怎么写代码才能让一个程序“易于改编”，然而在敏捷迭代中才能快速的响应需求的变化。如果想让我们编写的程序更容易的响应需求改变、业务改变和逻辑改变等，我们就要<strong>充分的给我们的程序解刨逻辑</strong>。</p><p>说到逻辑与业务的分解，首先要根据需求和功能深入思考分析，然后对其进行一个架构的设计。最常用的方式就是把系统模块化，组件化等的系统架构设计。</p><h2 id="模块设计-—「Modular-Design」"><a href="#模块设计-—「Modular-Design」" class="headerlink" title="模块设计 —「Modular Design」"></a>模块设计 —「Modular Design」</h2><blockquote><p>模块设计，就是以功能块为单位进行程序设计，实现其求解算法的方法称为模块化。模块化的目的是为了降低程序复杂度，使程序设计、调试和维护等操作简单化。</p></blockquote><p>不论是前端开发还是后端开发，我们都有模块化和组件设计模式。使用模块设计来分解我们的功能和逻辑，目的是为了<strong>降低程序的复杂度、利于调试、维护、修改和新增功能。</strong></p><p>比如现在我们要做个 CMS（内容管理系统），我们一起来尝试使用模块设计来分解这个系统的功能。</p><hr><h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><p>首先我们要理解一个内容管理系统有哪些功能，然后把每个功能划入各个模块里。但是很多童鞋一开始接触一个系统，然后开始瓜分模块会觉得无从入手，可能花了半天坐在电脑前思考 🤔，但是半天都吐不出一个所以然来。接下来让我们一起来学习一套逻辑思维，让我们以后更轻松架构一套模块设计吧！</p><hr><p><strong><code>一开始先思考这个系统的目的和使用场景，这个系统是用来做什么的？</code></strong></p><p>一个内容管理系统，一般来说都是用来发发文章，新闻，或者是一个官方网站的内容管理。那必定就有文章。那管理文章内容，需要什么功能呢？</p><blockquote><p>文章模块 「Article 模块」</p><ul><li>增删查改文章</li><li>文章草稿</li><li>文章置顶</li></ul><hr><p>文章子模块 — 分类 「Article Category 模块」</p><ul><li>增删查改分类</li><li>文章图片</li></ul></blockquote><p>那这些与文章相关的功能是不是可以统一放在<code>“Article”</code>模块中统一管理，然后文章的模块中还有一个文章分类的<code>子模块</code>叫做<code>“Category”</code>。</p><hr><p><strong><code>有文章了必定就需要有作者，那作者在系统中其实是一个用户。那我们就需要有用户模块了。</code></strong> 加上一个管理系统，必定就有管理员，作者，甚至是会员。走一波这个逻辑我们就发现应该要有以下的功能点。</p><blockquote><p>用户模块 「User 模块」</p><ul><li>用户增删查改</li><li>用户身份管理</li><li>用户权限管理</li><li>会员等级管理</li></ul></blockquote><p>这么一来我们就可以建立一个单独的<code>User模块</code>。这个模块主要是管理用户相关的信息和功能。</p><hr><p>看到这里我们应该对一个系统的模块构思有一点的概念了。这个时候产品经理过来给我们提了一个需求，<strong>“我们现在要在这个系统添加一个标签体系，专门用来管理文章标签的。”</strong>。</p><p>那童鞋们，你们觉得这个需求应该放入那个模块呢？🤔<br>….</p><p>你们答对了！🎉 这个是属于文章的一个子模块，<code>Tag模块</code> — 专门管理文章的标签，然后和每一篇文章有多对多关系的。所以<code>标签模块</code>归纳入文章模块中。如果我们的内容管理系统做的很大，里面有视频内容，图文文章等等。我们可以在一开始就把这些统一归纳入“内容模块”，也就是<code>Content</code>模块中。</p><hr><p><strong>前端模块设计</strong></p><p>说到了这里前端的童鞋估计要举手咯 🙋‍♂️，前端的我们求关注呀！“前端是以页面和交互为单位，不可能和后端一样按功能逻辑来分解模块吧？” — 这个童鞋说的在理哈。其实前端和后端的设计上是有稍微的不一样的。</p><p>后端会以业务逻辑来分解模块，但是前端有页面和数据逻辑两块的代码。所以前端相对比后端就要分开两种模块分解思路了。</p><p><strong>页 (排) 面 (版) 的模块设计</strong></p><ul><li>前端的页面模块与产品定义的系统模块会更加贴切一些。前端分解的模块会跟用户所看到的操作功能分组。</li><li>简单的模块分解，可以利用产品童鞋给到我们的导航来分解，这样会更合理的规整我们的页面模块。</li><li>如果在页面功能上再想细分，那就可以用<code>组件设计</code>来分解了。</li></ul><p><strong>前端逻辑模块设计</strong></p><ul><li><p>几年前的前端就是个“切图仔”，基本不用考虑什么业务逻辑，数据逻辑，数据交互这些技术领域。但是因为前后端分离现在已经变成大多数公司的研发策略。慢慢前后端都各自分摊了业务逻辑和数据交互等处理。</p></li><li><p>因为前端也有大量的业务逻辑和交互逻辑，所以在我们封装和解耦的时候，也会遇到需要分解模块来处理。现在最典型的例子就是在使用<code>Vue</code>的状态管理<code>Vuex</code>的时候，需要用到<code>模块管理</code>来分解逻辑，使后面维护和修改更容易。</p></li><li><p>其实前端也是用后端同一套思维模式来分解业务就可以了，以功能为单位来分解你们的模块就可以了。</p></li></ul><hr><h2 id="解耦-「Decoupling」"><a href="#解耦-「Decoupling」" class="headerlink" title="解耦 - 「Decoupling」"></a>解耦 - 「Decoupling」</h2><blockquote><p>解耦，就是把复杂繁琐的逻辑拆分成更小的逻辑块。从而让复杂的逻辑分解成小的逻辑处理，使得逻辑变得更简化，更易于调试和维护。</p></blockquote><p>在一个功能众多、业务复杂和系统模块繁多的系统中，每一个模块里面的代码也会开始变得臃肿，越来越难调试、维护和管理。其实模块化和解耦是一致的。模块化也是为了解耦你的程序。这里我们重点讲的是模块之间和逻辑之间的解耦（Decouping）。</p><blockquote><p>我分享一个经历让大家深刻认知到解耦的重要性。我遇到过最夸张的有一段逻辑处理写了上 5000 行代码的童鞋，然而更可怕的是，在相同功能的地方那 5000 行代码被复制粘贴过来了。😱 我滴乖乖，这位童鞋在研发小组中有个花名叫“复制兄”。不过得到大家的帮忙和提点下，后面他也成为了这个小组中的一名优秀的程序员。</p><hr><p>如果我们不懂得解耦代码，编写的代码会给我们后面带来很重的“技术债”。假设一下，你的 5000 行处理逻辑，在上数十个地方使用了。我们要改一下这段逻辑就难过登天了。就算是这段逻辑没有复用性，但当你需要回头去修改这段逻辑也是会让你头皮发麻，无从入手。修改一点这个逻辑都可能会导致出现 10 个 bug 的后果。</p></blockquote><p>我们深刻知道解耦的重要性，那么我们应该怎么去高效解耦代码呢？</p><p>在《程序员修炼之道》中的 <code>Design by Contract</code> 里提到<strong>我们编写“害羞”的代码是很有益处的。“害羞”有两个含义：“不要把自己暴露给别人”和“不要与过多的人相互影响”。</strong> 这个是什么意思？我们用书中的例子来理解一下。</p><p>在一个庞大的间谍组织中，特工们会分到各个小组，每个小组内部的特工基本都互相认识，但是各个小组之间的特工就都互不相识。假设某个特工被俘虏了，一个小组可能会被摧毁，但是其他小组的特工是不会被暴露被影响的。因为各个小组之间的关系都是绝对隔离的。但是在任务中，各个小组之间都是会有合作和互相帮助，但是都互不相识。所以这么庞大的间谍组织才能长期安全存活下来。</p><p>这个种隔离模式用在编程中是非常好的。把我们的代码解耦到相对独立的模块和方法中，让它们之间的关联性和影响性降到最低。如果一个模块或者逻辑方法出了问题，我们可以独立重构或者修复，而不会给其他模块带来巨大的影响。只要最终的结果是一致的，就可以完美优化升级或者修复了。</p><p>在程序中，我们需要一个<code>Service (服务)</code>给我们处理一个<code>Object（对象）</code>，或者请求一个服务获得一个<code>Object</code>，我们希望这个服务给到我们需要的结果，但是不需要我们去操心它是怎么处理与获得这个<code>Object</code>的。这个服务或者方法是独立运行的，里面的逻辑和代码是与我们写的代码绝对隔离的。我们只需要在获得结果的时候验证这个结果的可用性就可以了，如果结果与我们需要的不一致，那我们就可以抛出错误。只要这个服务做对应的修正，就可以继续运行了。</p><p>理论我们解说的差不多了，现在我们来个实战例子吧：</p><p><strong><code>案例：</code></strong><br>假设现在我们需要写一个获取天气预报数据的类，获取天气预报数据首先你需要提供<code>Geolocation 定位信息</code>参数。<code>Geolocation</code>对象中含有一个地址对象。里面有经纬度，省市区等数据。我们需要获取到地址中的经纬度才能得到精准定点的天气预告信息。我们的代码会这么写：</p><pre><code class="php">/*** 获取天气方法*/public function getWeather(Geolocation $geolocation) {    // 假设我们已经封装了一个获取定位的天气的方法叫getWeatherByGeo()    return $this-&gt;getWeatherByGeo($geolocation-&gt;getLocation()-&gt;getLat());}</code></pre><ul><li>我们通过<code>getLocation</code>方法获取到定位对象里面的地址对象</li><li>然后通过<code>getLat()</code>方法获取到定位地址的经纬度信息</li></ul><p>以上例子中，因为我们需要在<code>geolocation</code>对象中取到经纬度，所以我们需要先经过获取地址对象，然后再通过这个对象获取到经纬度。其实这里面有不需要的关联关系。无论是写服务，还是写对象方法，我们都不要让使用这个服务/对象的开发者去过度的理解和使用你关联性很强的内部方法。这样会导致如果我们那天改变了这个关联性，多处都需要修改代码。</p><p>如果那天<em>刘某</em>改了<code>Geolocation</code>对象，里面不再含有<code>Location</code>对象，而且也没有了<code>getLocation()</code>方法，经纬度可以直接在<code>Geolocation</code>对象中直接取得。这个时候所有之前运用这个对象的其他人都需要修改代码了。很多时候开发者很难修改代码，或者一改动就会伤筋动骨的，其实就是因为这种过多过度的关联性关系导致而为的。</p><p>所以作为<code>Geolocation</code>对象的封装者，我们应该直接给到一个方法<code>getLat()</code>，让调用这个对象的开发者直接能拿到所需要的信息：</p><pre><code class="php">/*** 获取天气方法*/public function getWeather(Geolocation $geolocation) {    // 假设我们已经封装了一个获取定位的天气的方法叫getWeatherByGeo()    return $this-&gt;getWeatherByGeo($geolocation-&gt;getLat());}</code></pre><p>这样就剪断了刚刚对象中的强关联关系的缺陷。</p><hr><h2 id="服务化-—-「Service」"><a href="#服务化-—-「Service」" class="headerlink" title="服务化 — 「Service」"></a>服务化 — 「Service」</h2><p>服务定义：</p><blockquote><p><code>角色</code>：服务是系统架构里面的业务处理层。<br><code>作用</code>：主要是为了高度解耦和封装不同场景的业务和功能到对应的服务，然而达到高度中心化的业务代码。</p></blockquote><h3 id="理解服务"><a href="#理解服务" class="headerlink" title="理解服务"></a>理解服务</h3><ul><li>假设<code>人</code>是一个<code>控制器</code>，现在拿到了一个<code>衣服对象</code>的<code>参数</code>，然后人拥有一个<code>洗衣服</code>的<code>方法</code></li><li>现在人需要洗衣服，但是手洗效率太低了，所以我们写了一个多功能的<code>洗衣机服务</code>给到人去使用</li><li><code>洗衣机</code>这个服务里面有很多不同洗衣服的<code>方法</code>，但是其实具体洗衣机里面的每一个清洗方法人是不知道怎么实现的，人都是直接按照提供的功能直接使用。</li><li>所以服务里面的所有方法都是解耦在服务里面，服务要提供的方法是可以方便人使用的。</li></ul><hr><p>这样说是不是很好理解了？所以最简单的理解就是：</p><blockquote><p>服务是用来封装业务逻辑代码，是一个独立的逻辑层，高度封装解耦后提供给控制器或者其他需要用到这个服务的地方使用的。</p></blockquote><hr><h3 id="编写思路"><a href="#编写思路" class="headerlink" title="编写思路"></a>编写思路</h3><p>❌ <code>错误例子</code></p><blockquote><p>把所有洗衣机的方法提供给人使用，那就等同于让人来决定所有洗衣机的参数和清洗步骤。当人放衣服到洗衣机后，要选择先加水，加多少水，然后清洗开始，清洗多久，再甩干等等。</p></blockquote><p>光想想，洗个衣服还那么多的选项，还要想怎么样的洗衣顺序才是正确的！ 我太难了！洗个鸡腿哦！(ﾉ｀ □ ´)ﾉ ⌒┻━┻</p><p>⭕️ <code>正确例子</code></p><blockquote><p>洗衣机服务实现了很多不同的常用洗衣服的<code>模式</code>, 比如快速清洗，毛衣清洗，地毯清洗，风干，甩干等等。都是一些常用的功能。<br>每个功能方法里面其实调用了很多洗衣机封装好的流程和方法。所以当人使用洗衣机时，根本就不需要知道这些功能是怎么实现的，只要知道自己要干嘛，洗衣机刚好也有这个模式，直接用就完事儿了。</p></blockquote><p>(✧ᗜ✧)👍 哇！ 介么人性化的么！这种洗衣机给我来一打谢谢！</p><p>我写过一篇详细关于编写服务的文章<a href="https://blog.csdn.net/TriDiamond6/article/details/104764227" target="_blank" rel="noopener">《你真的懂怎么写服务层吗？》</a>，有兴趣的童鞋可以前往查看哦。这里我就不详细解说了。</p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="https://img-blog.csdnimg.cn/20200322220709631.jpeg" alt="学懂编程第一法则助你写出更好的代码"></p><p>这篇文章已经到达尾声了，到了这里我们已经深刻知道何为<code>易于改编</code>原则，更懂得如何编写<code>易于改编</code>的代码。其实在开发的过程中，我们还是需要先思考，后设计，再编写。根据所拿到的的功能需求，做好程序的架构设计，从而写出易于改编的程序。只有这样我们编写的代码才能越来越好，走上技术巅峰！</p><hr><p><img src="https://img-blog.csdnimg.cn/20200321131747841.png" alt="和你一起终身学习"></p>]]></content>
      
      
      <categories>
          
          <category> NOTES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programmer </tag>
            
            <tag> Better Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5大法则助你 成为更出色的开发者</title>
      <link href="/2020/03/17/notes/5-principles-to-be-a-better-programmer.html"/>
      <url>/2020/03/17/notes/5-principles-to-be-a-better-programmer.html</url>
      
        <content type="html"><![CDATA[<p>在现在这个技术高速发展的时代，无论你是在校学生，还是技术职场中的精英，都会面临需要持续提升。但是如果只知道提升技术能力，忽略了一些技巧和技术素养的培养和习惯。你会发现你再有能力，也变得无用武之地。因为真正的强者是不会只依赖 TA 的装备。更多的是技巧，经验，应变能力还有思想。</p><p>这篇文章会教 5 大法则助我们成为更出色的开发者，在众多开发者中脱颖而出的诀窍，也会在我们的技术职业生涯中给我们很多的帮助。</p><hr><h1 id="一、先思考，后设计，再下手"><a href="#一、先思考，后设计，再下手" class="headerlink" title="一、先思考，后设计，再下手"></a>一、先思考，后设计，再下手</h1><p><img src="https://img-blog.csdnimg.cn/20200315000349561.png" alt="先思考，后设计，再下手"></p><p>多数拿到新功能需求，大致有思路就直接下手开始写代码，半天下来发现这个需求或者功能越想越复杂。前进的路开始迷茫，内心越来越烦躁（甚至开始埋冤产品，这个需求怎么搞那么复杂，太坑了！），秃头的噩梦开始了。(╯ಠ_ ಠ）╯</p><p>其实开始写代码之前，思路就没有整理清楚或者目标不明确，想着想着就偏离了初衷。越深入考虑就越复杂，考虑到解耦代码，封装服务，设计数据库，扩展性，通用型等等这些因素。想想都已经迈入了从 0 到放弃的节奏了。甚至遇到过“杞人忧天”的程序猿小哥哥，小姐姐。TA 们问我说：“如果那一天服务器在我处理的时候停电了怎么办呀，如果服务器爆炸了呢？！”（这种绝对不夸张，还真的有哈）</p><p>其实就是因为前期没有充分的思考和设计所以才会导致后面的手慌脚乱。</p><h2 id="深度思考"><a href="#深度思考" class="headerlink" title="深度思考"></a>深度思考</h2><p>投入代码的海洋之前，我们需要先深度思考这个功能需求，整理清楚它的<code>目的</code>，<code>场景</code>，<code>难点</code>。</p><ol><li><p><strong>明确目的 — <code>明确功能需求的目的，了解清楚它是用来做什么，为了达到什么目的</code>。</strong><br>好比如现在是要开发一个文章搜索。一听到这个，你会想到什么呢？文章标题搜索？全文搜索？拆词搜索？标签化搜索？还能想到更多各式各样的搜索功能可以在这个功能需求中实现。如果不明确目的是什么，可能一开始就想复杂了。最终可能只是需要一个简单的标题搜索而已。而我们花了半天在想一大堆的可能性，系统要承载这个功能需要如何设计。</p></li><li><p><strong>使用场景 — <code>场景因素决定了这个功能的技术架构，也决定它的难度等级</code>。</strong><br>那场景到底是什么？其实就是这个功能规模的影响因素，举个例子：后端来说场景可以是这个文章搜索涉及的数据量级，还有使用的用户量级和并发量级。这些都是会直接关系到后端架构的设计，和代码的编写策略。那如果是前端呢？前端要考虑的因素有：这个搜索是否有重复使用性（是否需要封装成组件），是否需要加强的交互（比如，实时联想历史搜索或者关键词），是否涉及前端需要数据与交互结合处理数据来达到一些特殊交互。这些都是直接和前端的实现方式息息相关的。</p></li><li><p><strong>分析难点 — <code>明确目的，锁定场景后，就可以开始解刨功能需求找到技术难点</code>。</strong><br>注意一个误区，这个思考过程不是决定技术架构和策略，这里只是单纯通过<strong>已有的关联性系统功能，技术能力范围，数据量级，用户量级，开发时效等因素排查出这个功能需求开发的难点</strong>。如果在这里就开始考虑到设计和策略，我们就会过多的花时间在一两个难点上，甚至过度设计。我们的重点是分析出某些部分的存在难度，先解刨出来，后面开始架构设计和策略的时候会特别注意到这些难点。</p></li></ol><blockquote><p><strong>小结一下：</strong> &gt; <strong>在设计和开发一个功能需求前，有一个系统化的思考模式可以让我们快速的明白一个功能需求和整理思路！</strong> 习惯先深度思考，可以大大提高自身技术的成长。慢慢我们会发现你分析一个功能需求会看的更加透彻，开发效率也会随之上升。</p></blockquote><h2 id="设计与策略"><a href="#设计与策略" class="headerlink" title="设计与策略"></a>设计与策略</h2><p>开发任何一个功能，特别是大型系统，我们都是需要有一个架构设计的过程。系统架构设计会包括：</p><ul><li><strong>后端</strong> — 数据库，设计模式，编写策略（例如：<a href="https://blog.csdn.net/TriDiamond6/article/details/104764227" target="_blank" rel="noopener">服务层封装</a>）等。</li><li><strong>前端</strong> — 组件封装，底层工具类，代码接受，模块化等。</li></ul><p>设计这个功能也是有一套方式方法可以提高这方面的效果和能力。</p><ol><li><strong>画图</strong> — 使用 UML/思维导图/逻辑图等工具整理自己的功能逻辑流程， 这个可以强化功能的背后的思路。通过画图可以完整的，可视化的整理了一遍你大脑中的功能逻辑思路。大大强化了这个逻辑在你脑海里的影响。在画图的过程中，你还会挖掘出一些细微的问题和缺陷，通过这个过程，你的逻辑思路会得到优化和强化。</li><li><strong>探讨</strong> — <strong>“集思广益”</strong>，集合大家的力量必定比你一个人想强，所以设计出你的架构和逻辑图后，可以与你的伙伴一起探讨和分享。你会发想 TA 们可以看到你看不多的角度和观点。从而可以更加优化你的设计和逻辑。如果你有看过我写的《<a href="https://blog.csdn.net/TriDiamond6/article/details/104719532" target="_blank" rel="noopener">如果高效学习编程</a>》，应该知道“小黄鸭教学法”，在你讲解你的设计和逻辑思路的过程，从思想转化为语言的过程，你已经在重新整理了一片你的设计思路和逻辑。你可能会在过程中发现一些你预想不到的全新观点。</li><li><strong>ETC 原则</strong> — <strong>“Easy to change” 易于改编原则</strong>来源于一本书叫《程序员修炼之道》，意思就是代码可以更容易被改遍的才是最好的代码 — “Good code is easy to change”。设计和编程中最重要的一个点就是，保持代码灵活和易于改编重用的架构技术。（这里我先透露一下，近期我也又在准备写一篇专门讲解有关此原则的文章，感兴趣的童鞋，敬请期待，可先关注本博主哦）。在设计架构的时候如果遇到两个或者多个选择，那就遵循 ETC 原则，选择扩展性高，易于改编更好的方案。</li></ol><blockquote><p><strong>小结一下：</strong><br>做好功能需求整理和设计模式的建立，对于功能需求的了解已经可以达到一定的深度和理解的相对透彻。这个时候就可以开始一头扎进去代码的海洋了。你会发现自己的代码会写的很顺畅，一种乘风破浪的感觉，恍惚敲代码都带风。</p></blockquote><hr><h1 id="二、把功能需求分解成小任务"><a href="#二、把功能需求分解成小任务" class="headerlink" title="二、把功能需求分解成小任务"></a>二、把功能需求分解成小任务</h1><p><img src="https://img-blog.csdnimg.cn/20200316215013461.png" alt="把功能需求分解成小任务"></p><p>接到一个功能需求时，众多开发者都会觉得，这个需求含有多个功能点，感觉无从入手。还会有一种莫名的复杂感。这个是因为一个功能需求里面很多时候对开发来说都是参合了多个小功能。</p><p>这个时候最好的解决办法就是尽量的<strong>分解需求为多个小任务</strong>。在《<a href="https://blog.csdn.net/TriDiamond6/article/details/104719532" target="_blank" rel="noopener">如果高效学习编程</a>》中也有提到一个观点 — <strong>“化繁为简，小步快跑”</strong>，把复杂的功能拆分成多个小的点，也能让自己会迅速的开展工作。同时也会更有冲劲，每个任务如果太过复杂，实现时间太过长，会慢慢觉得枯燥无味，效率就会大大下降。</p><h2 id="如何分解需求？"><a href="#如何分解需求？" class="headerlink" title="如何分解需求？"></a>如何分解需求？</h2><p>我团队的很多小伙伴一开始自己拆解功能需求的时候，经常会问我，“不知道需求怎么拆解，感觉拆的太细又不实际，但是如果不拆细，又觉得没有拆的必要“。这里我来给大家一些方法来拆解功能需求：</p><ul><li><strong>按流程</strong> — 每个功能需求都有一定有一个或多个的<code>业务流</code>，<code>逻辑流</code>，<code>数据流</code>。可以使用这个流程分解。 + 业务流 — 可以按照业务的流程拆可，比如注册账号，短信通知，推荐联系人。这个系统的注册到通知到推荐联系人。其实都是注册流程中的，但是我们可以按照流程拆开 3 个独立任务进行开发。 + 逻辑流 — 按照不同的业务逻辑拆分你的任务，使用相同注册账号的例子，可以拆分为：检测用户名重复，添加用户的逻辑，推送短信逻辑，建立短信发送服务等等。 + 数据流 — 也可以理解为按照查询数据的逻辑来分割你的功能需求。比如建立账户体系仓库，建立短信发送记录查询仓库等等。</li><li><strong>按功能模块/体系</strong> — 如果你接到的是一个大的功能需求，这个功能可能就含有多个功能模块在其中。比如我们要做一个财务模块，我们可以首先根据功能模块或者体系拆分：对账体系，提现体系，资金流水，银行账户管理，资金管理等等。</li></ul><blockquote><p><strong>小结一下：</strong><br>当我们接到的功能需求较大的时候，我们一定要把需求“化繁为简，小步快跑”的方式进行分解。这个会大大有利于我们提高效率。毕竟在技术开发中长跑是会精疲力尽的，小步快跑才能让我们高效使用脑力。分解需求还能让我们注意到更细微的功能点，那样我们不会在复杂的功能需求中遗漏一下微小的功能点。</p></blockquote><hr><h1 id="三、结队开发，代码评审"><a href="#三、结队开发，代码评审" class="headerlink" title="三、结队开发，代码评审"></a>三、结队开发，代码评审</h1><p><img src="https://img-blog.csdnimg.cn/20200317001239765.png" alt="结伴开发，代码评审"></p><p>在开发的过程中，开发者们往往会沈醉于自己的完美代码之中。我一开始也是如此，自己写了一个服务，无论是命名，写法，封装，逻辑设计，架构设计等等，我都觉得是完美无暇了，甚至觉得都被自己的代码美到了。但是越是这个时候，我们就越是无法发现美中不足。我们要接受一个现实就是<strong>没有最好，只有更好</strong>。</p><p>首先要明白，自身的问题大部分人大概率都会是看不清自己的。内心的想法是：自己一直都是这么做的，所以不会觉得自己是有可以改善的点，也会总以为自己是对的。所以我们需要人来提点和指出我们的不足和缺点。人生如果有一面好的镜子是可以照出自己的不足，推动自己改变，成长，提升。不然人会深醉在自己的迷惑中无法找到自身的缺点，最终就是走入无法突破的瓶颈。</p><p>在开发中也是，找一个或多个开发小伙伴审查自己的代码。因为每个开发者都拥有不同的经验。一个优秀的团队，每一个成员都有自身特别专研的领域和技术能力。或多或少都是一种互补的状态下组成的团队。所以互相审查代码可以达到互相学习，互相吸收彼此的特长和优点，然而达到最大化的互补，共同写出最好的代码。</p><ol><li><strong>结队开发</strong> — 其实结对开发，就是每次开发一个功能，你会分配一个伙伴，或者建立一个小组。待开发的过程中，可以彼此讨论架构和设计方案，实现方案等等，互补也互相学习利于成长，<strong>“两人搭配干活不累”</strong>。结队开发也能有效避免很多功能中的细微细节被忽略，还是那句话“两个脑袋必定比一个脑袋强”！</li><li><strong>坦诚的审查</strong> — 在开发完一个功能后，找到你的队员<strong>互相阅读并且审查彼此的代码，从而互相提出宝贵的意见。</strong> 但是其实很多时候，因为彼此是同事也是开发小组中的战友，在“审查”对方的优秀“作品”的时候给最真实的反馈意见，往往我们和对方心里会觉得这是一种“批判”，一种“批评”。然而因为这种顾虑和心态，让我们在审查的过程中有一种莫名的压力和负担。所以给出的意见不能一针见血。“真实坦诚的话大多数人都不爱听，赞美的谎言都很中听”，也可以说是“忠言逆耳”。但是往往就是最真实的反馈意见是对彼此最有价值。也是这样才能在技术的道路上，让自己看到与明白自身的不足并且更好的去改进，从而在这条道路上彼此都能越发的走的更快更远。<strong>所以如果都想让自己和队员有快速成长，那就更需要我们对彼此的知识成果予以尊重，予以坦诚相待的态度，给予队员代码中不足之处的反馈，也谦虚诚恳的接受别人的意见。这是代码审查重中之重！</strong><br>在我的团队中提出使用结队开发，代码审查制的时候，我收到很多反馈：“我们本来就是敏捷迭代开发，时间很紧凑，不够时间去审查”，“每个人的技术能力参差不齐，有些人无法读懂彼此的代码”，“功能里面掺合着业务和功能需求的业务流程，对方没有做我的功能业务，看不懂呀”等等等等。一开始大家勇于提出了很多问题。</li></ol><p><strong>那我们怎么搞？不用慌让我们来分析一下，提出解决方案：</strong></p><ul><li><strong>时间问题</strong> — 敏捷迭代中，都是小步快跑，迭代周期根据项目而定，但是大致都是 1-4 周的范围之内。时间确实是比较紧迫的。但是互相审查代码这个好处实在是很多，所以就算要在敏捷迭代中耗费一点时间也是非常值得的。</li></ul><ul><li><strong><code>方案：</code></strong> 每个人在每天早上就花 1 小时，审查前一天小伙伴们提交审核的代码，然后在<code>Gitlab</code>这种代码管理平台中直接在代码中填写反馈意见。这样时间是可控的，也不会让开发者浪费太多时间在审查中。</li></ul><ul><li><strong>能力参差不弃</strong> — 这个是审查中的问题，也是为什么更需要审查的原因。不触动互相审查，在团队中给彼此意见让团队的总体能力拉平，能力中的参差不弃的问题就永无法解决。</li></ul><ul><li><strong><code>方案：</code></strong> 首先开个群，或者开个会议，互相提出自己的优缺点，还有提出自己今年想提升的方面。找到团队成员各自的强项其实问题就好解决了。把强项和有这方面想提升的人结队开发，这样就可以发挥有强项人的能力，同时帮助了有这块短板的战友。而且，别人的强项也可能是你的短板，很少有开发者是方方面面都很强的。别人身上肯定有你可以学到的东西。所以彼此都有良好的学习文化和心态。</li></ul><ul><li><strong>业务不熟悉</strong> — 其实代码审核不是去测试对方的功能和业务，我们是写代码的开发者，不是测试工程师。代码审查的主要目的是为了，提高研发质量，把控代码规范，提高编写能力，提高技术知识。</li></ul><ul><li><strong><code>方案：</code></strong> 所以我们让开发者互相审查的是，代码质量，实现方式，架构设计，代码规范，编写策略等方面，这种是不需要知道业务的，如果这些有涉及业务的需要才那么实现的，可以询问对方计算难点在哪里：是查询？数据的处理？审查的重点放在技术本事不是业务代码的层面上。</li></ul><blockquote><p><strong>小结一下：</strong></p><ul><li><p>开发者基本上都是抱团工作的，这种环境下都是很适合互补互相学习的环境。如果想彼此有快速的成长，那就需要我们互相去给彼此提出坦诚又宝贵的意见，从中吸取彼此的优点和强项。这样每个人在这个团队中都会得到高速的提升。</p></li><li><p>如果你所在的公司领导没有推行这种模式，可以提议一下，如果因为公司的情况不合适，可以自己组队互相分享代码探讨，这样还是能达到互相学习和提升的！</p></li></ul></blockquote><hr><h1 id="四、在安静的环境中开发"><a href="#四、在安静的环境中开发" class="headerlink" title="四、在安静的环境中开发"></a>四、在安静的环境中开发</h1><p><img src="https://img-blog.csdnimg.cn/20200317000950512.png" alt="在安静的环境中开发"></p><p>开发者在日常工作中，都是要高度集中，脑力全开的状态下工作的。所以<strong>环境造成的干扰对开发者而言是很影响效率的</strong>。一个难题，一段代码的思路，都是需要高度集中，在大脑中 1000QPS 的输出速度来思考问题和逻辑。所以如果在过程中被声音，交谈，或者其它环境的干扰，就会被打断思路，然后陷入一个不停的思路重组的过程，大量的时间都被消耗掉了。</p><p>当年我刚刚当上了研发主管，开发于管理并行。发现自己每天都处于高并发状态，同时几件事情在处理，沟通，回答问题，协调工作，分析需求，与产品经理互怼，功能设计，功能规划，任务分解，然后就是研发。这一堆的事情都是日常必须要做的事情。我发现在研发的过程中，总会有那么一两个人来打断我的思路，当我大脑在全速前进的时候，突然在高速公路上出现了一个“程咬金”。解决了 TA 的疑问之后，重新投入研发，需要花至少 10 分钟重新整理思路和投入状态，大脑回归原来的速度。但是万万没想到，第二个人又来了。当时的我就感叹了一句，“做一个小小开发真的是太幸福了”。</p><p>其实不只是技术管理岗会遇到这种问题，做一个研发组的开发者也会遇到，会有产品经理，测试，其他同事来请教你，给你指 bug 等等的事情需要和你沟通。所以这种干扰是无法在岗位或者职责上避免的。</p><p><strong>那我们怎么才能做一个静静的小开发呀？(ლ `Д ́ )ლ</strong>，我来告诉你一些小秘诀吧：</p><ol><li><p><strong>番茄工作法</strong> — 给自己定好 20-60 分钟的高度集中的工作时间，这个时间内谁都不要过来打扰你，如果这个时间段有人来找你，你问一句“不好意思，我现在有点忙，事情紧急吗？不紧急我过 xx 分钟过来找你“。如果对方的事情是不紧急的，你就可以继续投入开发。到了一个 25 分钟阶段结束的时候，你再起来跟对方沟通。时间是很宝贵的，为了可以让大家高效沟通，也高效率开展研发工作。我们要高效运用时间。</p></li><li><p><strong>带上耳机</strong> — 如果音乐会打扰你思路的话，就开一点轻音乐，或者一些大自然环境的声音。这样可以帮助你高度集中，不让自己听到一些能打扰你的声音。这种也是有效的管理好自己的耳门，让自己高度集中在研发中。我一般不会告诉别人，别人看到你带着耳机，高度集中的样子，莫名的会给到 TA 人心理压力和心理负担，会想这一刻过去找你，会不会打扰到你的。</p></li><li><p><strong>免打扰模式</strong> — 在你高度集中的时候，开启手机的免打扰模式，关闭你电脑里面一些与你现在工作无关的应用和网页。只要不是工作的群都可以开启消息免打扰。在你番茄工作法的休息时间段，再去看一看消息，加加水，走动一下放松一下。（但是记得一定要控制自己的休息时间，休息过长会导致完全脱离工作状态，要重新进入状态耗费的时间就会变长）</p></li></ol><blockquote><p><strong>小结一下：</strong><br>技术研发是一个需要高度集中的脑力活，大脑的 QPS 需要保持在较高的速度和状态才能达到高效。所以要学会自控，更要把控好自己所在的环境与人。时间是宝贵的，只有珍惜时间才会在最短时间内达到最大量度的产出。如果你能做到，你会发现你加班会变少，工作效率会提高。</p></blockquote><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>看完这边文章我们发现做为一个开发者，不只是需要提升自己的技术能力，技术素养也是重中之重。只有技术能力，在职场中会有很多压力，职场中是不会给我们全世界的时间来开发，也不会给我们一个舒适的环境让我们集中。所以作为一个更出色的程序员，我们身上必须拥有更多的防身技能，才能在我们面对各式各样的情况和问题出现时，我们能处于泰然，游刃有余。往往也是这些能耐才能让我们与众多的开发者有明显的区别。</p><p>希望这 5 大法则可以助你在技术行业里成为更出色的开发者，在众多的开发者中脱颖而出，升级加薪，走上技术和人生的巅峰。</p><blockquote><p><strong>最后感谢大家的阅读和支持，你们的点赞和关注都是给予我继续写作最大的动力。</strong> &gt; <strong>让我们一起终身学习，在代码的海洋中找到快乐与自我。</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> NOTES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programmer </tag>
            
            <tag> Better Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带你体验Vue2和Vue3开发组件有什么区别</title>
      <link href="/2020/03/08/frontend/difference-between-vue-and-vue3.html"/>
      <url>/2020/03/08/frontend/difference-between-vue-and-vue3.html</url>
      
        <content type="html"><![CDATA[<p>我们一直都有关注和阅读很多关于 Vue3 的新特性和功能即将到来。但是我们没有一个具体的概念在开发中会有如何的改变和不一样的体验。还有一些童鞋已经开始又慌又抓狂了 – “又要开始学新的写法了 (ノ ToT )ノ ~┻┻”。</p><p>所以这里我使用 Vue2 和 Vue3 开发一个简单的表格组件来展示一下 Vue2 和 Vue3 开发组件的区别。看完这片文章后，你将会有一个概念 Vue2 和 Vue3 开发组件时的区别，并且为 Vue3 的开发之路做好准备。ღ(◔ڼ◔ღ)ミ</p><p>废话少说，让我们开始吧～ (๑ •̀ㅂ•́)و✧</p><hr><h1 id="创建一个-template"><a href="#创建一个-template" class="headerlink" title="创建一个 template"></a>创建一个 <code>template</code></h1><p>组件来说，大多代码在 Vue2 和 Vue3 都<strong>非常相似</strong>。Vue3 支持<code>碎片(Fragments)</code>，就是说在组件可以拥有多个根节点。</p><p>这种新特性可以减少很多组件之间的<code>div</code>包裹元素。在开发 vue 的时候，我们会发现每一个组件都会有个<code>div</code>元素包裹着。就会出现很多层多余的<code>div</code>元素。<code>碎片(Fragments)</code>解决了这个问题。对于有完美强迫症的童鞋“真的时太棒了”。我们这里的例子里就不展示了，用简单的单根节点的组件。</p><p><strong>Vue2 表格 template</strong></p><pre><code class="html">&lt;template&gt;  &lt;div class=&quot;form-element&quot;&gt;    &lt;h2&gt;{{ title }}&lt;/h2&gt;    &lt;input type=&quot;text&quot; v-model=&quot;username&quot; placeholder=&quot;Username&quot; /&gt;    &lt;input type=&quot;password&quot; v-model=&quot;password&quot; placeholder=&quot;Password&quot; /&gt;    &lt;button @click=&quot;login&quot;&gt;      Submit    &lt;/button&gt;    &lt;p&gt;      Values: {{ username + ' ' + password }}    &lt;/p&gt;  &lt;/div&gt;&lt;/template&gt;</code></pre><p>在 Vue3 的唯一真正的不同在于数据获取。Vue3 中的<code>反应数据（Reactive Data）</code>是包含在一个<code>反应状态（Reactive State）</code>变量中。— 所以我们需要访问这个反应状态来获取数据值。</p><pre><code class="html">&lt;template&gt;  &lt;div class=&quot;form-element&quot;&gt;    &lt;h2&gt;{{ state.title }}&lt;/h2&gt;    &lt;input type=&quot;text&quot; v-model=&quot;state.username&quot; placeholder=&quot;Username&quot; /&gt;    &lt;input type=&quot;password&quot; v-model=&quot;state.password&quot; placeholder=&quot;Password&quot; /&gt;    &lt;button @click=&quot;login&quot;&gt;      Submit    &lt;/button&gt;    &lt;p&gt;      Values: {{ state.username + ' ' + state.password }}    &lt;/p&gt;  &lt;/div&gt;&lt;/template&gt;</code></pre><hr><h1 id="建立数据-data"><a href="#建立数据-data" class="headerlink" title="建立数据 data"></a>建立数据 <code>data</code></h1><p><strong>这里就是 Vue2 与 Vue3 最大的区别 — Vue2 使用<code>选项类型API（Options API）</code>对比 Vue3<code>合成型API（Composition API）</code></strong></p><p>旧的选项型 API 在代码里分割了不同的属性（properties）：data，computed 属性，methods，等等。新的合成型 API 能让我们用方法（function）来分割，相比于旧的 API 使用属性来分组，这样代码会更加简便和整洁。</p><blockquote><p>现在我们来对比一下 Vue2 写法和 Vue3 写法在代码里面的区别。</p></blockquote><p><strong>Vue2</strong> - 这里把两个数据放入 data 属性中</p><pre><code class="javascript">export default {  props: {    title: String,  },  data() {    return {      username: &#39;&#39;,      password: &#39;&#39;,    };  },};</code></pre><p>在<strong>Vue3.0</strong>，我们就需要使用一个新的<code>setup()</code>方法，此方法在组件初始化构造的时候触发。</p><p>为了可以让开发者对反应型数据有更多的控制，我们可以直接使用到 Vue3 的<code>反应API（reactivity API）</code>。</p><p>使用以下三步来建立<code>反应性数据</code>:</p><ol><li>从 vue 引入<code>reactive</code></li><li>使用<code>reactive()</code>方法来声名我们的数据为反应性数据</li><li>使用<code>setup()</code>方法来返回我们的反应性数据，从而我们的 template 可以获取这些反应性数据</li></ol><p>上一波代码，让大家更容易理解是怎么实现的。</p><pre><code class="javascript">import { reactive } from &#39;vue&#39;;export default {  props: {    title: String,  },  setup() {    const state = reactive({      username: &#39;&#39;,      password: &#39;&#39;,    });    return { state };  },};</code></pre><p>这里构造的反应性数据就可以被<code>template</code>使用，可以通过<code>state.username</code>和<code>state.password</code>获得数据的值。</p><hr><h1 id="Vue2-对比-Vue3-的-methods-编写"><a href="#Vue2-对比-Vue3-的-methods-编写" class="headerlink" title="Vue2 对比 Vue3 的 methods 编写"></a>Vue2 对比 Vue3 的 <code>methods</code> 编写</h1><p><strong>Vue2</strong> 的选项型 API 是把 methods 分割到独立的属性区域的。我们可以直接在这个属性里面添加方法来处理各种前端逻辑。</p><pre><code class="javascript">export default {  props: {    title: String,  },  data() {    return {      username: &#39;&#39;,      password: &#39;&#39;,    };  },  methods: {    login() {      // 登陆方法    },  },};</code></pre><p><strong>Vue3</strong> 的合成型 API 里面的<code>setup()</code>方法也是可以用来操控 methods 的。创建声名方法其实和声名数据状态是一样的。— 我们需要先声名一个方法然后在<code>setup()</code>方法中<code>返回(return)</code>， 这样我们的组件内就可以调用这个方法了。</p><pre><code class="javascript">export default {  props: {    title: String,  },  setup() {    const state = reactive({      username: &#39;&#39;,      password: &#39;&#39;,    });    const login = () =&gt; {      // 登陆方法    };    return {      login,      state,    };  },};</code></pre><hr><h1 id="生命周期钩子-—-Lifecyle-Hooks"><a href="#生命周期钩子-—-Lifecyle-Hooks" class="headerlink" title="生命周期钩子 — Lifecyle Hooks"></a>生命周期钩子 — <code>Lifecyle Hooks</code></h1><p>在 <strong>Vue2</strong>，我们可以直接在组件属性中调用 Vue 的生命周期的钩子。以下使用一个<code>组件已挂载（mounted）</code>生命周期触发钩子。</p><pre><code class="javascript">export default {  props: {    title: String,  },  data() {    return {      username: &#39;&#39;,      password: &#39;&#39;,    };  },  mounted() {    console.log(&#39;组件已挂载&#39;);  },  methods: {    login() {      // login method    },  },};</code></pre><p>现在 <strong>Vue3</strong> 的合成型 API 里面的<code>setup()</code>方法可以包含了基本所有东西。生命周期的钩子就是其中之一！</p><p>但是在 Vue3 生周期钩子不是全局可调用的了，需要另外从 vue 中引入。和刚刚引入<code>reactive</code>一样，生命周期的挂载钩子叫<code>onMounted</code>。</p><p>引入后我们就可以在<code>setup()</code>方法里面使用<code>onMounted</code>挂载的钩子了。</p><pre><code class="javascript">import { reactive, onMounted } from &#39;vue&#39;;export default {  props: {    title: String,  },  setup() {    // ..    onMounted(() =&gt; {      console.log(&#39;组件已挂载&#39;);    });    // ...  },};</code></pre><hr><h1 id="计算属性-Computed-Properties"><a href="#计算属性-Computed-Properties" class="headerlink" title="计算属性 - Computed Properties"></a>计算属性 - <code>Computed Properties</code></h1><p>我们一起试试添加一个计算属性来转换<code>username</code>成小写字母。</p><p>在 <strong>Vue2</strong> 中实现，我们只需要在组件内的选项属性中添加即可</p><pre><code class="javascript">export default {  // ..  computed: {    lowerCaseUsername() {      return this.username.toLowerCase();    },  },};</code></pre><p><strong>Vue3</strong> 的设计模式给予开发者们按需引入需要使用的依赖包。这样一来就不需要多余的引用导致性能或者打包后太大的问题。Vue2 就是有这个一直存在的问题。</p><p>所以在 Vue3 使用计算属性，我们先需要在组件内引入<code>computed</code>。</p><p>使用方式就和<code>反应性数据（reactive data）</code>一样，在<code>state</code>中加入一个计算属性:</p><pre><code class="javascript">import { reactive, onMounted, computed } from &#39;vue&#39;export default {  props: {    title: String  },  setup () {    const state = reactive({      username: &#39;&#39;,      password: &#39;&#39;,      lowerCaseUsername: computed(() =&gt; state.username.toLowerCase())    })    // ...  }</code></pre><hr><h1 id="接收-Props"><a href="#接收-Props" class="headerlink" title="接收 Props"></a>接收 <code>Props</code></h1><p>接收组件<code>props</code>参数传递这一块为我们带来了 Vue2 和 Vue3 之间最大的区别。<strong>—<code>this</code>在 vue3 中与 vue2 代表着完全不一样的东西。</strong></p><p>在 <strong>Vue2</strong>，<code>this</code>代表的是当前组件，不是某一个特定的属性。所以我们可以直接使用<code>this</code>访问 prop 属性值。就比如下面的例子在挂载完成后打印处当前传入组件的参数<code>title</code>。</p><pre><code class="javascript">mounted () {    console.log(&#39;title: &#39; + this.title)}</code></pre><p>但是在 <strong>Vue3</strong> 中，<code>this</code>无法直接拿到 props 属性，emit events（触发事件）和组件内的其他属性。不过全新的<code>setup()</code>方法可以接收两个参数：</p><ol><li><code>props</code> - 不可变的组件参数</li><li><code>context</code> - Vue3 暴露出来的属性（emit，slots，attrs）</li></ol><p>所以在 Vue3 接收与使用 props 就会变成这样：</p><pre><code class="javascript">setup (props) {    // ...    onMounted(() =&gt; {      console.log(&#39;title: &#39; + props.title)    })    // ...}</code></pre><hr><h1 id="事件-Emitting-Events"><a href="#事件-Emitting-Events" class="headerlink" title="事件 - Emitting Events"></a>事件 - <code>Emitting Events</code></h1><p>在 <strong>Vue2</strong> 中自定义事件是非常直接的，但是在 <strong>Vue3</strong> 的话，我们会有更多的控制的自由度。</p><p>举例，现在我们想在点击提交按钮时触发一个<code>login</code>的事件。</p><p>在 <strong>Vue2</strong> 中我们会调用到<code>this.$emit</code>然后传入事件名和参数对象。</p><pre><code class="javascript">login () {      this.$emit(&#39;login&#39;, {        username: this.username,        password: this.password      }) }</code></pre><p>但是在 <strong>Vue3</strong>中，我们刚刚说过<code>this</code>已经不是和 vue2 代表着这个组件了，所以我们需要不一样的自定义事件的方式。</p><p>那怎么办呀？! ლಠ 益 ಠ)ლ</p><p>不用慌，在<code>setup()</code>中的第二个参数<code>content</code>对象中就有<code>emit</code>，这个是和<code>this.$emit</code>是一样的。那么我们只要在<code>setup()</code>接收第二个参数中使用<strong>分解对象法</strong>取出<code>emit</code>就可以在 setup 方法中随意使用了。</p><p>然后我们在<code>login</code>方法中编写登陆事件：</p><pre><code class="javascript">setup (props, { emit }) {    // ...    const login = () =&gt; {      emit(&#39;login&#39;, {        username: state.username,        password: state.password      })    }    // ...}</code></pre><hr><h1 id="最终的-vue2-对比-vue3-代码"><a href="#最终的-vue2-对比-vue3-代码" class="headerlink" title="最终的 vue2 对比 vue3 代码"></a>最终的 vue2 对比 vue3 代码</h1><p><img src="https://img-blog.csdnimg.cn/20200308214440300.png" alt="最终的vue2对比vue3代码"></p><p>真的是太棒了，能看到这里的童鞋们，你们现在基本都看到 vue2 与 vue3 其实概念与理念都是一样的。只是有一些属性获取方式和声名和定义方式稍微变了。一直在鬼哭狼嚎的小小前端开发猿人们，你们可以松一口气了吧。</p><p>总结一下，我觉得 <strong>Vue3</strong> 给我们前端开发者带来了全新的开发体验，更好的使用弹性，可控度也得到了大大的提升。如果你是一个学过或者接触过 <strong>React</strong> 然后现在想使用 Vue 的话，应该特别兴奋，因为很多使用方式都和 React 非常相近了 🎉！</p><p>全新的<code>合成式API（Composition API）</code>可以提升代码的解耦程度 —— 特别是大型的前端应用，效果会更加明显。还有就是按需引用的有了更细微的可控性，让项目的性能和打包大小有更好的控制。</p><p>最后我把完成的 <strong>Vue2</strong> 和 <strong>Vue3</strong> 的组件代码发出来给大家：</p><p><strong>Vue2</strong></p><pre><code class="javascript">&lt;template&gt;  &lt;div class=&#39;form-element&#39;&gt;    &lt;h2&gt; {{ title }} &lt;/h2&gt;    &lt;input type=&#39;text&#39; v-model=&#39;username&#39; placeholder=&#39;Username&#39; /&gt;    &lt;input type=&#39;password&#39; v-model=&#39;password&#39; placeholder=&#39;Password&#39; /&gt;    &lt;button @click=&#39;login&#39;&gt;      Submit    &lt;/button&gt;    &lt;p&gt;      Values: {{ username + ' ' + password }}    &lt;/p&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  props: {    title: String  },  data () {    return {      username: &#39;&#39;,      password: &#39;&#39;    }  },  mounted () {    console.log(&#39;title: &#39; + this.title)  },  computed: {    lowerCaseUsername () {      return this.username.toLowerCase()    }  },  methods: {    login () {      this.$emit(&#39;login&#39;, {        username: this.username,        password: this.password      })    }  }}&lt;/script&gt;</code></pre><p><strong>Vue3</strong></p><pre><code class="javascript">&lt;template&gt;  &lt;div class=&#39;form-element&#39;&gt;    &lt;h2&gt; {{ state.title }} &lt;/h2&gt;    &lt;input type=&#39;text&#39; v-model=&#39;state.username&#39; placeholder=&#39;Username&#39; /&gt;    &lt;input type=&#39;password&#39; v-model=&#39;state.password&#39; placeholder=&#39;Password&#39; /&gt;    &lt;button @click=&#39;login&#39;&gt;      Submit    &lt;/button&gt;    &lt;p&gt;      Values: {{ state.username + ' ' + state.password }}    &lt;/p&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import { reactive, onMounted, computed } from &#39;vue&#39;export default {  props: {    title: String  },  setup (props, { emit }) {    const state = reactive({      username: &#39;&#39;,      password: &#39;&#39;,      lowerCaseUsername: computed(() =&gt; state.username.toLowerCase())    })    onMounted(() =&gt; {      console.log(&#39;title: &#39; + props.title)    })    const login = () =&gt; {      emit(&#39;login&#39;, {        username: state.username,        password: state.password      })    }    return {      login,      state    }  }}&lt;/script&gt;</code></pre><p>希望这篇文章能让大家体验到一个比较全面的 Vue2 与 Vue3 的开发区别。如果大家还有什么问题，可以在评论中提问哦！</p><p>开发愉快！～</p><p><img src="https://img-blog.csdnimg.cn/20200321131747841.png" alt="和你一起终身学习"></p>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中更简便的数组处理函数.map()，.reduce()，.filter()</title>
      <link href="/2019/11/02/frontend/simplify-your-javascript-with.html"/>
      <url>/2019/11/02/frontend/simplify-your-javascript-with.html</url>
      
        <content type="html"><![CDATA[<p>如果你刚接触JavaScript可能你还没有听说过<code>.map()</code>，<code>.reduce()</code>，<code>.filter()</code>。或者听说过，看过别人用过但是自己在实际项目中没有用过。在国内很多开发项目都是需要考虑IE8的兼容，为了兼容很多JavaScript好用的方法和技巧都被埋没了。但是我发现近几年开始，很多开发项目已经完全抛弃了IE这个魔鬼了。如果你不需要兼容古老的IE浏览器了，那就要开始熟悉一下这几个方法来处理数组。</p><blockquote><p>注意这遍文章说的的3个方法其实在很多其他语言都可以使用到，因为这几个方法和使用概念在很多其他语言都是存在的。</p></blockquote><hr><h1 id="map"><a href="#map" class="headerlink" title=".map()"></a>.map()</h1><p>让我用一个简单的例子告诉你如何使用这个方法。假如你现在有多对象的数组数据 - 每一个对象代表着一个员工的信息。现在你想要的最终结果就是取出所有员工的唯一ID值。</p><pre><code class="javascript">// 员工数据var employees = [  { id: 20, name: &#39;Captain Piett&#39; },  { id: 24, name: &#39;General Veers&#39; },  { id: 56, name: &#39;Admiral Ozzel&#39; },  { id: 88, name: &#39;Commander Jerjerrod&#39; }];// 你想要的结果[20, 24, 56, 88]</code></pre><p>其实要实现这个结果有很多数组处理方式。传统的处理方法就是先定义一个空数组，然后使用<code>.forEach()</code>，<code>.for(...of)</code>，或者是最简单的<code>.for()</code>来组装ID到你定义的数组里面。</p><p>我们来对比一下传统的处理方式和<code>.map()</code>的区别。</p><p>使用<code>.forEach()</code>：</p><pre><code class="javascript">var employeeIds = [];employees.forEach(function (employee) {  employeeIds.push(officer.id);});</code></pre><p>注意使用传统的方式，我们必须有一个预定义的空数组变量才行。但是如果是<code>.map()</code>就会更简单了。</p><pre><code class="javascript">var employeeIds = employees.map(function (employee) {  return employee.id});</code></pre><p>甚至我们可以用更简洁的方式，使用箭头方法（但是需要ES6支持，Babel，或者TypeScript）。</p><pre><code class="javascript">const employeeIds = employees.map(employee =&gt; employee.id);</code></pre><p>所以<code>.map()</code>到底是怎么运作的呢？这个方法有两个参数，第一是回调方法，第二是可选内容（会在回调方法中做为<code>this</code>）。数组里的<code>每个数值/对象会被循环进入到回调方法</code>里面，然后<code>返回新的数值/对象</code>到结果数组里面。</p><p>注意的是结果数组的长度永远都会和被循环的数组的长度一致。</p><hr><h1 id="reduce"><a href="#reduce" class="headerlink" title=".reduce()"></a>.reduce()</h1><p>与<code>.map()</code>相识，<code>.reduce()</code>也是循环一个回调方法，数组里面的每一个元素对回进入回调方法。区别是回调方法返回的值会被传递到下一个回调方法，如此类推（等同于一个累加器）。</p><p><code>.reduce()</code>里的累加值可以是任何属性的值，包括<code>integer</code>，<code>string</code>，<code>object</code>等等。这个累加值会被实力化或者传递到下一个回调方法。</p><p>来上代码，做个简单的例子！假如你有一个飞机师的数组，数组里面有每个飞机师的工龄。</p><pre><code class="javascript">var pilots = [  {    id: 10,    name: &quot;Poe Dameron&quot;,    years: 14,  },  {    id: 2,    name: &quot;Temmin &#39;Snap&#39; Wexley&quot;,    years: 30,  },  {    id: 41,    name: &quot;Tallissan Lintra&quot;,    years: 16,  },  {    id: 99,    name: &quot;Ello Asty&quot;,    years: 22,  }];</code></pre><p>现在我们需要知道所有飞机师累计的总工龄。使用<code>.reduce()</code>就是比吃饭还简单的事情。</p><pre><code class="javascript">var totalYears = pilots.reduce(function (accumulator, pilot) {  return accumulator + pilot.years;}, 0);</code></pre><p>注意我这里第二个参数我传了0。第二个参数是一个累加值的初始值。当然如果场景需要这个初始值也可以传入一个变量或者你需要的值。循环了数组里的每一个元素后，reduce方法会返回最终累加后的值（在我们这个例子中就是<code>82</code>）。</p><blockquote><p>例子里面的<code>acc</code>和<code>accumulator</code>就是累加值变量</p></blockquote><p>如果是使用ES6箭头写法，我们可以写的更加优雅简洁。一行就可以搞掂的事情！</p><pre><code class="javascript">const totalYears = pilots.reduce((acc, pilot) =&gt; acc + pilot.years, 0);</code></pre><p>现在如果我们需要找到哪一位是最有经验的飞机师。这种情况我们一样可以使用<code>.reduce()</code>。</p><pre><code class="javascript">var mostExpPilot = pilots.reduce(function (oldest, pilot) {  return (oldest.years || 0) &gt; pilot.years ? oldest : pilot;}, {});</code></pre><p>这里我把<code>accumulator</code>变量改为<code>oldest</code>代表飞机师里面的老司机。这时候reduce里面的回调方法对比每一个飞机师，每一次飞机师的值进入这个回调方法，工龄更高的就会覆盖<code>oldest</code>变量。最终循环后得到的<code>oldest</code>就是工龄最高的飞机师。</p><p>通过这几个例子，你可以看到使用<code>.reduce()</code>可以简单又优雅的在一个数组里面获取到单个最终值或者对象。</p><hr><h1 id="filter"><a href="#filter" class="headerlink" title=".filter()"></a>.filter()</h1><p>如果你现在的场景是需要在一个数组里面过滤一部分的数据，这个时候<code>.filter()</code>就是你的最好的朋友了。</p><p>我们用回飞机师的数据，并且加入了所属航空公司的值：</p><pre><code class="javascript">var pilots = [  {    id: 2,    name: &quot;Wedge Antilles&quot;,    faction: &quot;Rebels&quot;,  },  {    id: 8,    name: &quot;Ciena Ree&quot;,    faction: &quot;Empire&quot;,  },  {    id: 40,    name: &quot;Iden Versio&quot;,    faction: &quot;Empire&quot;,  },  {    id: 66,    name: &quot;Thane Kyrell&quot;,    faction: &quot;Rebels&quot;,  }];</code></pre><p>加入现在我们想分别筛选出<code>Rebels</code>和<code>Empire</code>两个航空公司的飞机师，使用<code>.filter()</code>就是轻而易举的事情！</p><pre><code class="javascript">var rebels = pilots.filter(function (pilot) {  return pilot.faction === &quot;Rebels&quot;;});var empire = pilots.filter(function (pilot) {  return pilot.faction === &quot;Empire&quot;;});</code></pre><p>就这么简单，如果使用箭头方法（ES6）就更加优雅了：</p><pre><code class="javascript">const rebels = pilots.filter(pilot =&gt; pilot.faction === &quot;Rebels&quot;);const empire = pilots.filter(pilot =&gt; pilot.faction === &quot;Empire&quot;);</code></pre><p>其实原理很简单，只要你的回调方法返回的是<code>true</code>，这个值或者对象就会在新的数组里面了。如果返回的是<code>false</code>就会被过滤掉了。</p><hr><h1 id="结合使用-map-，-reduce-，-filter"><a href="#结合使用-map-，-reduce-，-filter" class="headerlink" title="结合使用 .map()，.reduce()，.filter()"></a>结合使用 .map()，.reduce()，.filter()</h1><p>既然我们刚刚学到的三个函数都是可以用于数组的，并且<code>.map()</code>和<code>.filter()</code>都是返回数组的。那我们就可以串联起来使用。不说多了上代码试试！</p><p>我们用一个有趣一点的数据试验一下，假如现在我们有一个<code>星球大战</code>里面的<code>人物</code>的数组。每个字段的定义如下：</p><blockquote><ul><li><code>Id</code>: 人物唯一ID</li><li><code>name</code>: 人物名字</li><li><code>pilotingScore</code>: 飞行能力指数</li><li><code>shootingScore</code>: 射击能力指数</li><li><code>isForceUser</code>: 是否拥有隔空操控能力</li></ul></blockquote><p>我们的目标：获取<code>拥有隔空操控能力的飞行员的总飞行能力指数</code>。我们先分开一步一步实现这个目标！</p><ul><li>首先我们需要先获取到拥有隔空操控能力的飞行员。</li></ul><pre><code class="javascript">var jediPersonnel = personnel.filter(function (person) {  return person.isForceUser;});// 结果集: [{...}, {...}, {...}] (Luke, Ezra and Caleb)</code></pre><ul><li>这段代码我们获得了3个飞行员对象，分别都是拥有隔空操控能力的飞行员。使用这个对象我们来获取每个飞行员的飞行能力指数值。</li></ul><pre><code class="javascript">var jediScores = jediPersonnel.map(function (jedi) {  return jedi.pilotingScore + jedi.shootingScore;});// 结果: [154, 110, 156]</code></pre><ul><li>获取到每个飞行员的飞行能力指数值后，我们就可以用累加器（<code>.reduce()</code>）获取总飞行能力指数了。</li></ul><pre><code class="javascript">var totalJediScore = jediScores.reduce(function (acc, score) {  return acc + score;}, 0);// 结果: 420</code></pre><p>这里分开实现方式可以达到我们的目标，但是其实我们可以串联起来，可以写的更加简洁又优雅！我们来玩玩更好玩的吧！</p><pre><code class="javascript">var totalJediScore = personnel  .filter(function (person) {    return person.isForceUser;  })  .map(function (jedi) {    return jedi.pilotingScore + jedi.shootingScore;  })  .reduce(function (acc, score) {    return acc + score;  }, 0);</code></pre><p>这样写是不是很优雅！都被这段代码给美到了！❤️</p><p>如果我们使用箭头写法ES6，就更加优雅了！</p><pre><code class="javascript">const totalJediScore = personnel  .filter(person =&gt; person.isForceUser)  .map(jedi =&gt; jedi.pilotingScore + jedi.shootingScore)  .reduce((acc, score) =&gt; acc + score, 0);</code></pre><p>哇！代码原来可以写的那么优雅的么？！想不到吧？</p><blockquote><p>其实我们只需要使用<code>.reduce()</code>就可以得到我们的目标结果了，以上例子做为教学例子，所以使用了3个我们学到的函数。</p><p>我们来看看只用<code>.reduce()</code>怎么实现的，来我们一起来刷新一下三观吧！</p></blockquote><pre><code class="javascript">const totalJediScore = personnel.reduce((acc, person) =&gt; person.isForceUser ? acc + person.pilotingScore + person.shootingScore : acc, 0);</code></pre><p>不敢想象吧？一行就搞定一个功能不是梦！</p><h1 id="为什么抛弃-forEach"><a href="#为什么抛弃-forEach" class="headerlink" title="为什么抛弃 .forEach()?"></a>为什么抛弃 .forEach()?</h1><p>其实我一开始写前端的时候也是一顿撸，来个数组都是撸个for循环，解决一切数组处理问题。但是近几年我开始步入前后端开发，API接口对接。发现数据处理越来越多，如果还是像以前那样什么都用for循环来处理数据，那其实数据处理的代码就会越来越臃肿越来越复杂凌乱。所以我开始抛弃了<code>.forEach()</code>。开始做一个优雅的程序员！</p><p>为什么使用<code>.map()</code>，<code>.filter()</code>，<code>.reduce()</code>写代码更优雅，更美观呢？我们用一个实战例子来对比一下吧。</p><p>假设现在我们对接一个接口，返回的数组里面有两个字段<code>name：人的名称</code>和<code>title：对应的职位</code>。</p><pre><code class="javascript">var data = [  {    name: &quot;Jan Dodonna&quot;,    title: &quot;General&quot;,  },  {    name: &quot;Gial Ackbar&quot;,    title: &quot;Admiral&quot;,  },]</code></pre><p>产品经理给到你的需求是只需要展示这些人的职位称呼。</p><blockquote><p>当然这个时候有一些前端就会说“我只是个小小的前端，后端给我处理吧”。但是，这个接口其实是一个通用的接口，就是获取这些员工的资料的，是在多个地方使用的。如果每一个页面因为需要展示的不一样而要写多一个接口给你，你觉得这样好吗？做为一个优秀的前端工程师🦁️，这种小case你自己就可以很优雅的处理好了。而且，在一个优秀的团队，后端确实是要考虑接口通用性的，这种为了你的方便而给他们带来更臃肿的接口是不可接受的。所以前端这个时候就是要重组数据了。</p></blockquote><p>假设现在产品给你的需求是员工列表展示，要支持只展示员工职称和员工左右信息的两种显示项。这个时候我们就要编写一个数据组装方法来跟进展示要求来改变数据格式。</p><p>因为这个“神马“的需求，我们使用<code>.forEach()</code>来重组数据就相对比较麻烦了，而且代码也会变得臃肿。</p><p>我们忽略了组装数据的方法，直接就当作我们已经写好了一个组装数据的方法为<code>formatElement</code>。如果我们用<code>forEach</code>首先我们就需要定义一个空数组来接收结果。</p><pre><code class="javascript">var results = [];data.forEach(function (element) {  var formatted = formatElement(element);  results.push(formatted);});</code></pre><p>所以我们需要两个方法才能实现这个数据结果，但是为什么要写的那么臃肿呢？因为<code>forEach</code>并没有返回值，单单就给你跑个循环，还需要自己<code>push</code>值到预定义的变量里面。其实一个方法就可以完成了，而且重点是一行代码就完事了。</p><p>来使用我们新学的技巧，用<code>.map()</code>来实现就非常简单优雅了。</p><pre><code class="javascript">var results = data.map(formatElement);</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>你学会了吗？学会了就去尝试用<code>.map()</code>，<code>.reduce()</code>，<code>.filter()</code>来替换你传统的<code>for</code>循环吧！我保证你的代码会越来越简洁，可读性更高。</p><p>如果你喜欢我的这遍文章，记得继续关注我的博客，下一遍文章我们开学习怎么在JavaScript中使用<code>.some()</code>和<code>.find()</code>。</p><p>坚持做一个优雅的程序员，坚持每天敲代码！</p>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何高效学习编程</title>
      <link href="/2019/11/01/notes/learn-programming-more-effectively.html"/>
      <url>/2019/11/01/notes/learn-programming-more-effectively.html</url>
      
        <content type="html"><![CDATA[<p>编程确实不是一件容易的事情，除了要有较强的<code>逻辑思维</code>，还需要<code>花大量的时间和集中力来提升和维持一定的高度</code>。</p><p>与其他的领域不一样的是，技术每日都在变，所以对于编程初学者是很难一直与时并进的。就算是技术大神和老司机们也是追赶的比较吃力的。在技术领域打滚的这些年里，通过经历和经验总结出一些高效的学习方式和方法，在这篇文章里与大家分享。让我们现在就在技术领域的学习之路上奔跑吧！</p><h1 id="锁定目标，风雨兼程"><a href="#锁定目标，风雨兼程" class="headerlink" title="锁定目标，风雨兼程"></a>锁定目标，风雨兼程</h1><p>在刚刚接触技术的时候，很多人都会比较迷茫。技术领域有前端后端并且各自有多种编程语言。选定前端后端后又发现越过一山还有一山高，面临更多的选择。甚至在技术领域打滚了多年后的技术人员也会迷茫，会开始质疑自己的前景，是否要换一门语言或者多学几门语言。所以锁定目标是高效学习的第一门课。</p><h2 id="选择目标"><a href="#选择目标" class="headerlink" title="选择目标"></a>选择目标</h2><p>如果你的目标是前端开发，前期的学习道路是比较明确的，HTML5+CSS3起步。但是如果你的目标是后端开发，还没有开始就已经有多扇门在你前面，让你瞬间选择困难了。所以这里我们就用后端语言选择作为一个例子讲解学习目标选择方法。</p><blockquote><p>陷入学习目标选择困难症是因为技术每日每夜都在变，方向和未来都在摇摆。但是我们首先要有一个对技术有很好的判定能力。</p></blockquote><p>大家应该很多时候都听过”JAVA才是世界上做好的语言”，”PHP才是世界上最好的语言”等等，这些在自己领域崇拜着自己所爱的语言技术爱好者。TA们并没有错，因为每个开发语言都在特定领域或者项目条件里是最好的语言。不过并<code>没有世界上最好的语言，只有在某一个场景和条件下最适合使用的语言</code>。每一种开发语言都有他擅长最合适的使用场景。</p><ul><li><code>PHP</code> - 更适合小型到中型网页端应用（大型应用就需要其他语言配合使用）</li><li><code>JAVA</code> - 更适合大型应用，企业级应用（中小型应用用JAVA就是大材小用，浪费资源）</li><li><code>PYTHON</code> - 更适合用于爬虫，人工智能，脚本类应用</li></ul><hr><blockquote><p>📖 <strong>目标寻找法：</strong></p><p>所以在选择学习目标的时候，我们要有对技术的判定能力，不要轻易听取一些偏面的评价和定论而下决定。</p><ul><li>选择学习目标时重要的决定因素:<ul><li>在目前最实用的 <em>- 学能用到的更容易上手，也更有价值</em></li><li>难度跨度不要太高 <em>- 难度跨越太大时间成本会越高</em></li><li>感兴趣的 <em>- 感兴趣才更能坚持，更有动力</em></li><li>社区更大的 <em>- 社区越大遇到问题时找答案的途径越多</em></li><li>开源项目优先 <em>- 开源的项目的技术更有未来</em></li></ul></li></ul></blockquote><p>🎯 一旦锁定一个目标就要<code>能懂，能用，能变</code>，再扩张你的学习领域到其他的技术。</p><ul><li><code>能懂</code> - 能懂的技术或者知识的理论和原理；</li><li><code>能用</code> - 能把技术或者知识投入使用，投入实战项目；</li><li><code>能变</code> - 能举一反三学到的技术或者知识，能变通，延伸拓展。</li></ul><hr><h2 id="不要蜻蜓点水"><a href="#不要蜻蜓点水" class="headerlink" title="不要蜻蜓点水"></a>不要蜻蜓点水</h2><p>这一点是很多初学者都会犯的错误。</p><blockquote><p>不要<code>浅入浅出，得不偿失</code>，得不到技能还失去了时间。</p></blockquote><p>学习要一步一个脚印，很多一开始学习编程往往会同时学习多个技术，其实这种学习方式不但没有效果反而还浪费时间浪费生命。锁定一个学习目标就要专注一个点上学习，重点学习。</p><p>举个例子，如果你想成为一个Java开发工程师，你是不需要从C学起，然后C++，最后才开始学习Java。我看到很多开发者刚开始都是这样学习，其实根本不需要从底层技术开始学习。既然你的学习目标是Java，那就直奔重点不浪费时间。稳固了基础开发语言后，选择一个框架开始深入专业实战知识。当你稳固了更专业的实战知识后，就可以开始学习这个技术的周边工具（比如IDE）让开发更加高效便捷。</p><blockquote><p>📖 <strong>专研秘诀：</strong></p><ul><li>学习每一个知识或者技术，一定要深入浅出，<code>深入学习和挖掘，吸取重要知识和技术</code>。</li><li><code>专心</code>，<code>专注</code>，<code>专研</code>是一个技术人才的基本素养！</li></ul></blockquote><hr><h2 id="先专注于会用而不是能用"><a href="#先专注于会用而不是能用" class="headerlink" title="先专注于会用而不是能用"></a>先专注于会用而不是能用</h2><p>很多开发者习惯性会过于专注于工具使用，写法，性能，可扩展性等等。初学者一般都会掉入工具使用和写法的坑，而资深的开发者会过于专注于性能和可扩展性。这时候往往会过度消耗学习时间，甚至忘记最初的学习目标。</p><p>用一个简单易懂的例子，”一个机械工程师不会浪费时间想怎么更好的使用TA的扳手，而是怎么可以组装好一个机器的部件” - 很多人会想，学会用更好的工具不是可以更快地安装好吗？但是现实是，你都还没有弄懂怎么安装，再好再有效的工具对你来说都是无用武之地。所以<code>还没有学会前行，就不要先想着怎么跑</code>。</p><p>再举例，如果你是正在学习使用Vue框架，不要太过于执着怎么使用Vue的周边工具，高级写法，性能隐患问题等等。你的目标应该是创建你的第一个首页然后直接投入开发一个小项目小应用。这样你的产出才是最高的，因为这样做更加专注于学会怎么使用Vue来实现功能，而不是更好的使用Vue框架。</p><blockquote><p>在学习的时候要专注于<code>会使用新的技术</code>，而不是怎么用各种花式技巧来<code>提高使用能力</code>。</p></blockquote><p>还有很多童鞋开始学一门技术时，会先开始看一大堆的知识和书籍，或者去看一些大型的项目用这个技术是怎么实现的。其实更<code>有效的学习方式是小步快跑</code>，学习的过程中开发一个小项目会让你更加有动力也更有趣。</p><p>约定自己在限定时间内完成小目标，如能完成就给自己一点小奖励。例如，你对你自己说“如果我下周五完成这个功能，我就让自己去看个电影”。记住奖励不需要很大，<code>小步快跑，小奖小利</code>，这样才能维持发自内心的动力和驱动力。不过就算没有达成小目标也不用气馁，失败时成功之母，所有成功的人都是通过在失败中总结成长壮大。</p><hr><h1 id="采用学习策略"><a href="#采用学习策略" class="headerlink" title="采用学习策略"></a>采用学习策略</h1><p>每一个人都会有一种最合适自己的学习方式方法，适合我的不一定对你就有效 - 所以找到一种对你有效的学习方法很重要。</p><h2 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h2><p>学习方式方法是通过你日复一日，年复一年不停地尝试和总结得来的一种技巧。我也尝试过很多种方式来学习技术，自从我开始进入技术行业到现在，我换了无数种学习方式才找到最适合自己的一种技巧。</p><p>在一开始刚刚入门的时候，我尝试看很多“从入门到精通”，“XXX语言101”等等，最终的结果都是“从入门到放弃”。后面开始走视频学习之路，发现视频里面的老师说话好像是机器人一样，本来有点失眠症的，没想到一看视频秒睡着，被治好了！我以为我的技术生涯就要结束在这里了～ <code>¯\_(⊙︿⊙)_/¯</code></p><h2 id="建立策略"><a href="#建立策略" class="headerlink" title="建立策略"></a>建立策略</h2><p>前方无绝路 · 希望在转角 ～ 我迅速改变了策略，学习技术和其他领域不一样除了看书，撸视频还需要动手去敲代码。<code>学习任何一门技术，可以遵循以下学习策略，可以让学习的技术和知识更加稳固。</code></p><blockquote><p>📖 <strong>学习策略：</strong></p><p>还是遵循我们之前说到的规则，<code>能懂，能用，能变</code>。</p><ol><li><code>深入了解技术的原理</code> - 了解清楚才能更好的在不同场景下运用自如（可以通过看书，看文档）</li><li><code>通过代码理解运用方式</code> - 看懂基本原理，就可以看看别人是怎么在项目中使用的（在github找开源项目，看教学视屏等等）</li><li><code>实战，做一个小项目</code> - 能懂，能会了就要能用，用新学的技术实现一个功能，做一个小项目，把知识投入实战。</li><li><code>发挥你的想象力</code> - 能用后如果想进阶更高层次，就要发挥你的想象力，能举一反三，在你的小项目里面加功能。</li></ol></blockquote><p>其实上面的策略无非就是学习的过程中必须有的<code>理论</code>，<code>运用</code>和<code>变通</code>。这三个学习维度要保持一个良好的平衡。这个平衡是非常重要的，只有理论那就是“纸上谈兵”，只有理论和运用那只是个“代码搬运工”，如果三个维度你都才是就是“大师”。</p><p>当然所说的平衡不是说1:1:1，完全平衡是很难的。对于一个初学者的话可以先3:2:1，中级就可以开始维持2:3:1，到了高级就可以维持2:2:2了。</p><hr><h1 id="时间管理，提高效率"><a href="#时间管理，提高效率" class="headerlink" title="时间管理，提高效率"></a>时间管理，提高效率</h1><p><code>番茄工作法</code>估计很多人都听说过，但是真正用上可能就很少了，能坚持使用的就更少了。</p><p>很多时候在学习中，或者工作中，我们都是被时间追着跑，这里看一下哪里看一下，不经意就已经过了几个小时，一天就过去了。其实真正有效的产出不大，那是因为你没有合理的管理时间。用番茄工作法就是可以让我们可以追着时间跑，让自己时刻有着时间感，急迫感。自然时间运用上就更加有效了。我现在工作中和学习中都已经在使用番茄工作法，有效管理时间效率。突然发现使用了之后，每个小时我的工作效率提高了很多。</p><blockquote><p>使用方式其实很简单，把学习或者工作时间拆分为<code>25分钟一个小阶段，每25分钟休息5分钟，每4次小阶段休息15到20分钟</code>。</p></blockquote><p>使用这个时间管理法后，你会觉得在25分钟的小阶段里面，你的时间很紧迫的，每一分钟你都觉得很宝贵。你会发现你没有时间去浪费，自然而然的在25分钟内提高了效率。无形中你的学习和工作的集中力就会提升。除了提高了你的效率以外，你会发现一天几个小时的学习或者工作都不觉得很疲惫。因为在25分钟的高度集中后，你合理的调整了休息，让自己非常平衡的控制好疲惫度。所以你会发现一天里面的学习和工作都变得轻松了。</p><blockquote><p>使用番茄工作法提高了学习效率和疲惫度，自然你的学习成果就会更高。如果你觉得我说的这个方法太虚幻了，不妨试一下体验一下，实战说明一切！</p></blockquote><hr><h1 id="多思考，多教学"><a href="#多思考，多教学" class="headerlink" title="多思考，多教学"></a>多思考，多教学</h1><p>通常我们学习都用的是吸🌟大法 <code>🌟ԅ( ͒ ۝ ͒ )</code>，然后实战运用，其实还有很多细节和理论我们并没有理解透测。所以运用就不够自由，无法延伸一些创新的用法，或者举一反三。</p><p>在我事业发展的过程中，从一个小开发，做到一个小组长，到现在技术总监。在我开始带领一个小组，到带领整个技术团队；很多问题和新知识都要通过讲解或者教学来带培养你的组员和队员。这个过程中会遇到各种不同思维程度和学习能力的人，每一个人的理解能力或者理解方式都不一样，甚至看待每一件事情或者知识的角度都不一。你会发现你教学或者讲解某一个知识的时候需要使用各种不同的方式和方法。往往就是这样触发了你自己去换角度思考和理解这个知识，而启发了你自己对这个知识新的认知。</p><blockquote><p>通过教学和讲解来把你的知识传承给另外一个人，需要重新整理思路，逻辑，切换N中方式和说法。这个过程中你会挖掘出新的知识，新的观点，新的思维方式，新的理解角度和深度。这就是自我思维切换而达到的知识深度挖掘和提升的过程。这种就是我们经常说的<code>小黄鸭教学法</code>。</p></blockquote><p>不知道大家有没有听说过，当你思路不清晰，或者有问题无法解决的时候。你可以找一只<code>小黄鸭</code>，你就开始讲解你的思路，逻辑或者问题。这个过程中你开始重新整理自己的思路。如果你把一只啥都不懂的小黄鸭也能让它听懂。那这个时候你的思路，逻辑，理解都更加清晰了，问题起码都解决了50%以上了。我给这个方法取了个名字叫<code>小黄鸭教学法</code>！初级学习的时候要用<code>吸星大法</code>，进阶到高级的时候就要用<code>小黄鸭教学法</code>。能教会一只小黄鸭技术，你就是大神了！</p><hr><h1 id="记录，总结"><a href="#记录，总结" class="headerlink" title="记录，总结"></a>记录，总结</h1><p>除非你是过目不忘，要不看完一本书能记下所有是不可能的。就算记住了但是不可能完全明白透彻。一个程序员经常面对着反复又反复的任务，记录学习进度和总结学习知识很重要。往往你学到一个知识的时候，你会使用这个知识投入实战中。你沉迷在代码海洋之中无法自拔之后，你会发现你已经不记得你入海前学到哪里了。所以记录学习进度很重要。</p><blockquote><p><strong>记录学习方式：</strong></p><ul><li>把学习后的只是写成文档</li><li>把知识写成博客</li><li>总结重点，记录重点</li><li>编写学习规划，就是所谓的<code>todo</code>规划表</li></ul></blockquote><p>在学习中，如果要把知识记录，当你要使用它的时候能快速找到。那你就要有总结知识的习惯。把你学过的知识，技术，技巧都写成文档，写成总结。这样加强你的印象，同时也整理出了属于你自己的开发手册。当你遇到了某些问题的时候就可以通过你自己的开发手册找到答案。</p><hr><h1 id="改掉以下习惯"><a href="#改掉以下习惯" class="headerlink" title="改掉以下习惯"></a>改掉以下习惯</h1><ul><li><strong>完美主义：</strong> 初学者经常会陷入的一个坑，从一开始就追求完美，完美的写法，完美的实现方式，完美的设计模式。其实有时候这些都不是最重要的，反而导致有延迟和延后的严重情况，导致进度一直无法推进。最求完美往往把简单事情变得复杂。不要总是为了完美而无限徘徊，为了最好的解决办法而纠结，为了对的方式而浪费时间。往往在开发中，<code>时间是有限的，需求是无限的，连完成都无法保证，就更没有时间追求完美</code></li><li><strong>对比心态：</strong>很多行业内的新人或者准备入行的，都会去和行业内顶尖的人做对比。有一句很火的话“没有对比就没有伤害”，很多人用来对比好与坏，美与丑。其实另外层意思就是如果对比会对你自身造成打击又何必常常带着对比之心来对待自己和事情呢？对比不一定会有伤害，但是对比的心态才是真正造成伤害的源头。应该先认可自己的优点，接受自己的缺点，然后去找到别人的优点，发现别人的缺点。在别人的优点和缺点给自己带来成长。吸收别人优点，避免自己养成了同等的缺点。<code>优秀的人不是天生比你优秀，而是TA们更懂的不自我透支，更懂得养成在无形之中让自己成长的习惯。</code></li><li><strong>复杂化：</strong>学会把复杂的问题和事情拆分成多个小问题小事情。复杂的问题和事情就会变得更加简单。因为问题和事情往往有多个点需要突破，把每个点拆开逐个突破就会更加简单轻松。<code>从简到繁，如果太复杂，就拆开一个一个更简单的小点，逐个突破。</code></li><li><strong>悲观心态：</strong> 很多人遇到巨大难题时都会来一句“没有办法，做不到”。如果做不到，无论何事，都是自己还没有真正想做！<code>没有做不到的事，只有自己不想做的！失败究其必有原因！成功必有方法！</code></li><li><strong>过度透支：</strong>学习累了就躺穿上休息，吃饱喝足了就坚决不吃了。养好一种自律的习惯，不过度透支自己的时间和生命，这样才能有更好的精神和态度面对问题和困难。近年来有很多给程序员打上的标签，”加班狗”，“无日无夜写代码”，“生活邋遢”，“衣服全是同款黑色”等等。确实，做为一个程序员，我们花了大部分时间都在想问题，编写者神乎奇幻代码和程序。但是我们都往往忘记了自己的身体已经在一点一点透支。到了那一天你停下来了，你会发现，身体不行了，除了写代码其他个方面的能力都没有时间去提升。也没有劲学习成长了，整个人好像很颓废，生无可恋一样。所以<code>学会不透支自己，才有更好的状态和精力学习和突破自己。</code></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>无论你是在学习技术还是在学士任何其他领域的知识。在学习这条路上都会有坑坑洼洼，各种颠簸。所以我们学习要有技巧，要有方法才能在有效时间内收获最大化！</p><blockquote><p><strong>学习法门：</strong></p><ol><li>锁定目标 <em>- 选择有用的，对你现在阶段有价值的目标</em></li><li>采用学习策略 <em>- 深入学习，投入实战，总结经验</em></li><li>管理好时间 <em>- 把控好时间，提高效率</em></li><li>多思考，多总结 <em>- 多思考问题，多总结和记录知识</em></li><li>改掉不好的习惯和心态 <em>- 有好的习惯才能更轻松的学习和成长</em></li></ol></blockquote><p>一个人一生是有学不完的知识和技能，然而人一生的时间是有限的。所以要把我们的时间和收益最大化才能比同年龄的人跑的更快，学的更多，能力更强！大家一起在学习的道路上继续加油吧！</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Learning </tag>
            
            <tag> Programming </tag>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>真正的`服务层`是怎么写的?</title>
      <link href="/2019/10/19/backend/how-to-write-a-service.html"/>
      <url>/2019/10/19/backend/how-to-write-a-service.html</url>
      
        <content type="html"><![CDATA[<p>其实很多系统架构里面都有服务层，但是服务对很多开发人员来说都有很多不同的定义和写法。甚至在我待过的公司里都有不同的写法和编写模式。每个人每个团队每个项目都有对服务不同的理解。那到底什么是服务，怎么理解才是对的呢？</p><p>你们有没有过无数个夜晚里严重怀疑人生，琢磨着到底哪一种服务才是对的？哪一种才是最好的写法，哪一种才能达到服务的真正意义？因为这种执着，我开始在国外的各种网站，大神们写过的开源大项目里面和文章里面总结出一个大多数研发伙伴们认可的理解方式和编写方式。</p><p>要理解什么是服务，我们先来给<code>服务</code>一个<code>定义</code>，在系统架构里面处于什么<code>角色</code>，<code>作用</code>是什么。</p><hr><h2 id="服务定义"><a href="#服务定义" class="headerlink" title="服务定义"></a>服务定义</h2><blockquote><p><code>角色</code>：服务是系统架构里面的业务处理层。<br><code>作用</code>：主要是为了高度解耦和封装不同场景的业务和功能到对应的服务，然而达到高度中心化的业务代码。</p></blockquote><p>这个定义没毛病吧？赞同的童鞋在评论里举个手哈 👋。<br>好，有了一个优雅高尚的<code>服务定义</code>，我们来用一个通俗易懂的例子来理解服务。</p><hr><h2 id="理解服务"><a href="#理解服务" class="headerlink" title="理解服务"></a>理解服务</h2><ul><li>假设<code>人</code>是一个<code>控制器</code>，现在拿到了一个<code>衣服对象</code>的<code>参数</code>，然后人拥有一个<code>洗衣服</code>的<code>方法</code></li><li>现在人需要洗衣服，但是手洗效率太低了，所以我们写了一个多功能的<code>洗衣机服务</code>给到人去使用</li><li><code>洗衣机</code>这个服务里面有很多不同洗衣服的<code>方法</code>，但是其实具体洗衣机里面的每一个清洗方法人是不知道怎么实现的，人都是直接按照提供的功能直接使用。</li><li>所以所有服务里面的方法都是解耦在服务里面，服务要提供的方法是可以方便人使用的。</li></ul><hr><p>这样说是不是很好理解了？所以最简单的理解就是：</p><blockquote><p>服务是用来封装业务逻辑代码，是一个独立的逻辑层，高度封装解耦后提供给控制器或者其他需要用到这个服务的地方使用的。</p></blockquote><hr><h2 id="编写思路"><a href="#编写思路" class="headerlink" title="编写思路"></a>编写思路</h2><p>❌ <code>错误例子</code></p><blockquote><p>把所有洗衣机的方法提供给人使用，那就等同于让人来决定所有洗衣机的参数和清洗步骤。那人放衣服到洗衣机后，要选择先加水，加多少水，然后清洗开始，清洗多久，再甩干等等。</p></blockquote><p>就想想这个洗衣机就不想用了，洗个衣服那么多选项，还要想那个设置顺序才是对的！ 我太难了！洗个鸡腿哦！(ﾉ｀□ ´)ﾉ⌒┻━┻</p><p>⭕️ <code>正确例子</code></p><blockquote><p>洗衣机服务实现了很多不同的常用洗衣服的<code>模式</code>, 比如快速清洗，毛衣清洗，地毯清洗，风干，甩干等等。都是一些常用的功能。<br>每个功能方法里面其实调用了很多洗衣机封装好的流程和方法。这样人使用洗衣机根本不需要知道这些功能是怎么实现的，只要知道自己要干嘛，洗衣机有这个模式，直接用就好了。</p></blockquote><p>(✧ᗜ✧)👍哇！ 介么人性化的么！这种洗衣机给我来一打谢谢！<br>思路我们整理清楚了，那么可以开始看看用这种思维模式写成代码是怎么样的。来上机械键盘，开始快乐滴敲代码了！</p><h2 id="服务写法"><a href="#服务写法" class="headerlink" title="服务写法"></a>服务写法</h2><h3 id="Controller-控制器"><a href="#Controller-控制器" class="headerlink" title="Controller 控制器"></a>Controller 控制器</h3><p>首先我们写一个人控制器<code>PersonController.php</code>，作为一个优秀的人类，我们天生就会洗衣服，但是人嘛天生就是懒惰的。所以我们买了一台洗衣机（实现洗衣机<code>服务</code>）并且我们学会了使用洗衣机来洗衣服。（实现<code>wash</code>方法）٩(◦`꒳´◦)۶</p><blockquote><p>一个人<code>PersonController</code>，有一个洗衣服方法<code>wash</code>，需要洗衣服的时候实例洗衣服务<code>new WashingMachineServer()</code>，然后只要把衣服传入洗衣机服务的快洗方法，洗衣机服务就会开始快速<code>quickWash($cloth)</code>清洗了。</p></blockquote><pre><code class="php">// 人控制器class PersonController{    /**    * 洗衣服方法    *     * @param object $cloth 衣服对象    */    public function wash($cloth)    {        $washingMachine = new WashingMachineService();        $washingMachine-&gt;quickWash($cloth); // 调用洗衣机的快速清洗功能    }}</code></pre><p>我们好奇的童鞋们，肯定会好奇，那这个洗衣机（<code>WashingMachineService.php</code>服务) 到底是怎么实现的呢？它的快洗功能是怎么做的呢？那我们就来自己建一部洗衣机，自然就懂了。</p><h3 id="Service-服务"><a href="#Service-服务" class="headerlink" title="Service 服务"></a>Service 服务</h3><p>动手之前我们要先思考，先分析，养成这样的好习惯，代码再也不难写了。</p><blockquote><p>分析的重点分为服务的<code>运作</code>和<code>流程</code>, 可变动的<code>属性</code>，最后就是有那些可以提供的<code>模式</code>。 </p></blockquote><ul><li><strong>洗衣机应该怎么<code>运作</code>和<code>流程</code>的：</strong><ol><li>把衣服放入洗衣机 <code>addCloth()</code></li><li>注入水到洗衣机里 <code>addWater()</code></li><li>开始洗衣服（开始旋转和各种累活）<code>wash()</code></li><li>把水排除洗衣机 <code>flushWater()</code></li><li>把衣服取出 <code>fetchClouth()</code></li></ol></li><li><strong>洗衣机可变动的<code>属性</code>：</strong><ul><li>要把衣服放入洗衣机，我们就需要有个东西来装着，然后才能清洗，所以我们应该有一个洗衣桶 <code>$bucket</code></li><li>根据衣服的量，使用的水量是应该可以调节的。（对我们要节约用水嘛）<code>$washDuration</code></li></ul></li><li><strong>洗衣机最常用的<code>模式</code>：</strong><ul><li>快速洗 <code>quickWash()</code></li></ul></li></ul><hr><blockquote><p><strong>⚠️ 需要注意：</strong>  </p><ul><li>所有洗衣机的内部方法都是 <code>private</code> 私有方法，因为都是给洗衣机使用的，外部的人是不能使用的；</li><li><code>快速清洗</code>和<code>取衣服</code>这两个方法是 <code>public</code> 共有方法，因为是洗衣机提供出去给人使用的方法；</li><li>所有属性都是 <code>protected</code> 保护属性，是洗衣机独有的属性。</li></ul></blockquote><p>现在我们就要使用程序员的魔法，把以上的逻辑和属性转换成代码。<code>(∩◉ω◉)⊃----★</code></p><pre><code class="php">class WashingMachineService{    /**    * 清洗时长 (分钟)    * @var integer    */    protected $washDuration = 60;    /**    * 洗衣机的洗衣桶    * @var array    */    protected $bucket;    /**    * 改变默认洗衣机的清洗时长    * @param integer $duration    */    public function changeWashDuration($duration)    {        $this-&gt;washDuration = intval($duration);        return $this;    }    /**    * 往洗衣机的桶加入水    */    private function addWater()    {        array_merge($this-&gt;bucket, [&#39;water&#39; =&gt; &#39;cold water&#39;]);        return $this;    }    /**    * 把衣服加入洗衣机桶内    */    private function addCloth($cloth)    {        array_merge($this-&gt;bucket, [&#39;cloths&#39; =&gt; $cloth]);        return $this;    }    /**    * 旋转桶把开始洗衣服    */    private function wash()    {        // 使用洗衣机的清洗时长来全换清洗衣服        for ($duration = $this-&gt;washDuration; $duration &gt; 0; $duration--) {            array_rand($this-&gt;bucket, 3);        }        return $this;    }    /**    * 把桶里面的水清除掉    */    private function flushWater()    {        unset($this-&gt;bucket[&#39;water&#39;]);        return $this;    }    /**    * 从洗衣桶里面把衣服拿回出来    */    private function fetchCloths()    {        return $this-&gt;bucket[&#39;cloths&#39;]    }    /**    * 快速清洗衣服方法    */    public function quickWash($cloth)    {        return $this-&gt;changeWashDuration(10) // 重新设置洗衣服的时长                    -&gt;addCloth($cloth) // 加入衣服                    -&gt;addWater() // 加入水                    -&gt;wash() // 开始清洗                    -&gt;flushWater() // 清除水                    -&gt;fetchCloths(); // 最后取出衣服返回    }}</code></pre><p>以上就是一个最基础的服务，有独立的内部方法可以让服务运作起来，也有提供出去的服务模式方法。</p><blockquote><p><strong>⚠️ 需要注意</strong>:<br>服务的重点特性在最后这个 <code>quickWash</code> 快速清洗方法。实现快速清洗是通过使用特定<code>顺序</code>和<code>组合</code>方式调用洗衣机<code>内部方法</code>。这种服务的实现方式，可以把一个服务里面的业务逻辑拆分成多个逻辑块，然后通过不同的顺序和组合来实现某种模式或者功能。这样的服务就非常有弹性，而且所有逻辑块复用性极高。这个也是设计模式里面的<code>模版方法模式（Template Method）</code>。</p></blockquote><p>上面的例子只是写了一个洗衣机10%不到的功能，一个完整的洗衣机还会有很多的逻辑方法。那问题就来了，方法多了这个服务就会开始臃肿。这个时候我们就要想一套解耦封装服务的方式方法。接下来我们来讲解一下怎么更深度的服务封装。</p><hr><h2 id="服务封装"><a href="#服务封装" class="headerlink" title="服务封装"></a>服务封装</h2><p>在日常开发过程中，我们有各种各样的封装和解耦方式。包括<code>内部Trait</code>, <code>内部服务</code>，<code>工厂设计模式</code>。这几种都是可以用来深度封装服务的方式方法。找到了方法，下一步就是要找到怎么封装才是最优解耦思路。解耦的原理就是找到<code>共通点</code>和<code>公用点</code>。然后把这些方法封装起来，解耦出去。</p><h3 id="封装思路"><a href="#封装思路" class="headerlink" title="封装思路"></a>封装思路</h3><blockquote><p>在上面写的洗衣机服务，里面的洗衣桶是很通用的和独立的业务逻辑。所以它是可以解耦封装在一起的。</p><ul><li>洗衣机的<code>bucket</code>洗衣桶属性的方法其实可以封装起来。单独做为一个洗衣桶的服务。</li><li>所有涉及洗衣桶操作的功能和流程都封装到洗衣桶服务里面给洗衣机调用。</li></ul></blockquote><p>使用上面的逻辑，我们可以把<code>洗衣机服务</code>和<code>洗衣桶服务</code>拆分成两块。来吧上机械键盘！</p><hr><h3 id="封装编写"><a href="#封装编写" class="headerlink" title="封装编写"></a>封装编写</h3><ul><li>洗衣机服务 <code>WashingMachineService.php</code></li></ul><pre><code class="php">class WashingMachineService{    /**    * 清洗时长 (分钟)    * @var integer    */    protected $washDuration = 60;    /**    * 改变默认洗衣机的清洗时长    * @param integer $duration    */    public function changeWashDuration($duration)    {        $this-&gt;washDuration = intval($duration);        return $this;    }    /**    * 快速清洗衣服方法    */    public function quickWash($cloth)    {        $washingBucket = new WashingBucketService();        $this-&gt;changeWashDuration(10) // 重新设置洗衣服的时长        // 调用洗衣机的桶去清洗衣服        return $washingBucket-&gt;addCloth($cloth) // 加入衣服                    -&gt;addWater() // 加入水                    -&gt;wash($this-&gt;washDuration) // 开始清洗                    -&gt;flushWater() // 清除水                    -&gt;fetchCloths(); // 最后取出衣服返回    }}</code></pre><ul><li>洗衣桶服务 - <code>WashingBucketService.php</code></li></ul><pre><code class="php">class WashingBucketService{    /**    * 洗衣机的洗衣桶    * @var array    */    protected $bucket;    /**    * 往洗衣机的桶加入水    */    public function addWater()    {        array_merge($this-&gt;bucket, [&#39;water&#39; =&gt; &#39;cold water&#39;]);        return $this;    }    /**    * 把衣服加入洗衣机桶内    */    public function addCloth($cloth)    {        array_merge($this-&gt;bucket, [&#39;cloths&#39; =&gt; $cloth]);        return $this;    }    /**    * 旋转桶把开始洗衣服    */    public function wash($washDuration)    {        // 使用洗衣机的清洗时长来全换清洗衣服        for ($duration = $washDuration; $duration &gt; 0; $duration--) {            array_rand($this-&gt;bucket, 3);        }        return $this;    }    /**    * 把桶里面的水清除掉    */    public function flushWater()    {        unset($this-&gt;bucket[&#39;water&#39;]);        return $this;    }    /**    * 从洗衣桶里面把衣服拿回出来    */    public function fetchCloths()    {        return $this-&gt;bucket[&#39;cloths&#39;]    }}</code></pre><hr><h2 id="提供和调用"><a href="#提供和调用" class="headerlink" title="提供和调用"></a>提供和调用</h2><p>模块与模块或者系统与系统直接都会使用到服务来互相打通业务。这个时候服务就要有一个方式提供出去让外部的模块或者系统调用。</p><blockquote><p><strong>⚠️ 需要注意：</strong><br>这里说的是<code>外部模块</code>或者<code>系统调用</code>，这个是要考虑到如果是微服务的话，每个模块都会在不同的服务器和域名下，这个时候就需要异步调用。这种情况下如果还是用类实例的方式来提供和调用服务后面要改就很麻烦了。</p></blockquote><p>这种情况下目前最优的方式就是服务提供者用<code>Trait</code>给到服务使用者来注入到业务代码里面。</p><ul><li>洗衣机服务Trait - <code>WashingMachineProvider.php</code></li></ul><pre><code class="php">trait WashingMachineProvider{    /**    * 提供洗衣机服务类    */    public washingMachine()    {        return new \WashingMachineService();    }}</code></pre><blockquote><p><strong>⚠️ 需要注意：</strong><br>这里是使用了命名空间来实例洗衣机服务类的。但是如果改成了微服务，那我们只需要改掉所有这些服务提供Trait，把服务类实例改为服务发现，或者异步服务调用就可以了。再也不用花钱去买霸王洗发水了。<code>٩(^ᴗ^)۶</code></p></blockquote><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经历了千辛万苦，无数个失眠的夜晚。终于知道服务到底是什么，应该怎么写，怎么写才是对的。写好服务可以提高代码的维护性，编写的代码也会有更强的逻辑和条理。好的服务也会有更好的弹性和扩张性。下面我们来总结一下编写服务的重点。</p><blockquote><p><code>角色</code>: 服务是系统架构里面的业务处理层。<br><code>作用</code>: 主要是为了高度解耦和封装不同场景的业务和功能到对应的服务，然而达到高度中心化的业务代码。<br><code>思路</code>: 逻辑要独立，分解成逻辑块，保持复用性高，尽量不要限定逻辑使用的顺序和高弹性的组合性。<br><code>编写</code>: 高度封装，高内聚的原理来编写服务，细化分解通用性，公用性的业务，然后封装成一个服务。</p></blockquote><hr><blockquote><p><strong>#通过技术悟出人生道理# 💭</strong><br>  “大千世界每一件事都有千百万种做法，<br>  吸收，打磨，专研，总结，进步，<br>  才会找到最适合的做法。” <small> <em>～ 三·钻 TriDiamond</em><small></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> BackEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Service </tag>
            
            <tag> Architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Console技巧提高JS调试技能</title>
      <link href="/2019/10/11/frontend/debugging-skills-console.html"/>
      <url>/2019/10/11/frontend/debugging-skills-console.html</url>
      
        <content type="html"><![CDATA[<p>其实 <strong>JavaScript</strong> 给到我们很多调试工具来调试代码，那问问你自己，你又知道多少呢？用到多少呢？</p><p>大部分前端开发在 <strong>JavaScript</strong> 调试代码的常规用法都是直接<code>console.log</code>，直接输出某一个变量或者返回数据里面的对象数据。当然毋庸置疑这样输出来调试是没有问题的。但是不是最优雅的方式来调试代码，其实还有更好的办法。作为一个有追求的技术人才，有更好的调试方式为什么不去使用呢？</p><p><img src="https://s2.ax1x.com/2019/10/11/ubREy4.png" alt="Console输出Hello"></p><p>我们先来了解清楚浏览器的<code>console</code>。浏览器的<code>console</code>对象有提供自带的调试控制台。<code>console</code>对象只能在浏览器的JavaScript中使用，也就是说客户端应用可用而服务端应用不可用。它的作用或者效果会根据不同的浏览器而不同，但是基础使用方式和功能是基本一致的。不过<code>console</code>是可以在任何前端语言或者框架中使用。</p><hr><h2 id="console-log"><a href="#console-log" class="headerlink" title="console.log"></a>console.log</h2><p>最常用的使用方式就是<code>console.log</code>，对前端开发工程师来说就是家常便饭了。以下是一个简单的使用例子。</p><pre><code class="js">function sayHello(name) {  console.log(name)}sayHello(&#39;Indrek&#39;)</code></pre><blockquote><p>以上<code>sayHello</code>方法接收一个名字，然后在控制台输出出来。</p></blockquote><p><img src="https://s2.ax1x.com/2019/10/12/ujmEr9.png" alt="Console输出名字"></p><p>现在我们开始玩以下更有趣的调试方法。加入我们现在想知道<code>sayHello</code>这个方法被调用了多少次，这样我们应该怎么调试呢？其实有一个很简单的办法就是使用<code>console.count()</code>.</p><hr><h2 id="console-count"><a href="#console-count" class="headerlink" title="console.count"></a>console.count</h2><p><code>count()</code>方法会输出某一个<code>标示</code>被调用了几次。如果没有穿任何参数，<code>count()</code>默认为使用默认标示<code>defaut</code>。</p><pre><code class="js">function sayHello(name) {  console.count()  console.log(name)}sayHello(&quot;Indrek&quot;)sayHello(&quot;William&quot;)sayHello(&quot;Kelly&quot;) </code></pre><blockquote><p>以上代码就会在控制台输出以下结果：</p></blockquote><p><img src="https://s2.ax1x.com/2019/10/12/ujm7ZR.png" alt="统计了sayHello方法被调用的次数"></p><p>上面的例子实现了统计某一个方法被调用的次数，那如果我们想统计每个同名字(<code>name</code>)的在这个方法里面被调用了多少次呢？要调试这种其实也很简单，只要直接吧<code>name</code>直接传入<code>count</code>就可以了。</p><pre><code class="js">function sayHello(name) {  console.count(name)}sayHello(&quot;Indrek&quot;)sayHello(&quot;William&quot;)sayHello(&quot;Kelly&quot;)sayHello(&quot;Indrek&quot;)</code></pre><p><code>‍(∩｀-´)⊃━☆ﾟ.*・｡ﾟ</code> 巴拉巴拉！就是那么简单，我们就可以跟踪同名的参数在<code>sayHello</code>方法里面被调用的次数了！</p><p><img src="https://s2.ax1x.com/2019/10/13/uj1xhR.png" alt="统计同名的参数在`sayHello`方法里面被调用的次数"></p><hr><h2 id="console-warn"><a href="#console-warn" class="headerlink" title="console.warn"></a>console.warn</h2><p>这个控台答应方法会输出一个警告信息。在你开发APIs或者开发工具的时候使用。<code>console.warn</code>这个方法在你需要警告用户的时候特别实用，例如漏掉了某个参数或者是让开发者知道你的API/插件包的版本已经失效的时候使用。</p><pre><code class="js">function sayHello(name) {  if(!name) {    console.warn(&quot;No name given&quot;)  }}sayHello()</code></pre><blockquote><p>上面的代码检测了<code>sayHello</code>方法的参数是否漏传。如果<code>name</code>参数没有传，一个警告消息就会被打印到控制台中。让开发者可以思考问题出在哪里。</p></blockquote><p><img src="https://s2.ax1x.com/2019/10/13/uj85Q0.png" alt="一个警告消息就会被打印到控制台中。让开发者可以思考问题出在哪里"></p><hr><h2 id="console-table"><a href="#console-table" class="headerlink" title="console.table"></a>console.table</h2><p>如果是我们在调试数组或者对象时，<code>console.table</code>是一个非常实用的调试方法来在控制台打印数据。数组里面的每一个元素都会在表格的行里面展示。以下是的水果名数组作为一个例子，如果我们把这个数组传入<code>console.table</code>，我们会看到一个含有这个水果名数据以表格的方式在控制台被打印出来。</p><pre><code class="js">const fruits = [&quot;kiwi&quot;, &quot;banana&quot;, &quot;strawberry&quot;]console.table(fruits)</code></pre><blockquote><p>我们一起来围观以下在控制台里面的展示效果</p></blockquote><p><img src="https://s2.ax1x.com/2019/10/13/ujGlkQ.png" alt="数据以表格的形式打印在控制台"></p><p>看到了这个，你会不会灵光一闪想到mmp，如果是一个很大的数组这种表格化的展示方式是多么的实用啊！对的！例如一个上百个数据的数组，我们使用这种调试方法来打印就很方便了。为了可以让我们用双眼见证这个说法的真实性，我们用代码说话吧！</p><pre><code class="js">const fruits = [  &quot;Apple&quot;,  &quot;Watermelon&quot;,  &quot;Orange&quot;,  &quot;Pear&quot;,  &quot;Cherry&quot;,  &quot;Strawberry&quot;,  &quot;Nectarine&quot;,  &quot;Grape&quot;,  &quot;Mango&quot;,  &quot;Blueberry&quot;,  &quot;Pomegranate&quot;,  &quot;Carambola&quot;,  &quot;Plum&quot;,  &quot;Banana&quot;,  &quot;Raspberry&quot;,  &quot;Mandarin&quot;,  &quot;Jackfruit&quot;,  &quot;Papaya&quot;,  &quot;Kiwi&quot;,  &quot;Pineapple&quot;,  &quot;Lime&quot;,  &quot;Lemon&quot;,  &quot;Apricot&quot;,  &quot;Grapefruit&quot;,  &quot;Melon&quot;,  &quot;Coconut&quot;,  &quot;Avocado&quot;,  &quot;Peach&quot;];console.table(fruits);</code></pre><p>我们使用<code>console.table</code>来打印一下上面这个大数组试试看吧。</p><p><img src="https://s2.ax1x.com/2019/10/13/ujGvNQ.png" alt="使用表格化方式在控制台打印数据"></p><blockquote><p>这种展示方式简直就是一目了然！这样妈妈再也不用担心我们调试数据的时候蒙圈了！<code>՞༘✡ (๑ •̀ㅂ•́)و✧</code></p></blockquote><p>但是问题少年们，我们可是有梦想的工程师，如果是用来调试<code>对象</code>会是怎么样呢？来吧亲自动手丰衣足食，上代码！</p><pre><code class="js">const pets = {  name: &quot;Simon&quot;,  type: &quot;cat&quot;};console.table(pets);</code></pre><p>注意了兄弟姐妹们，现在我们打印的是对象不是数组。在控制台的表格现在有两个键值<code>name</code>和<code>type</code>。之前是0，1，2，3，4…</p><p><img src="https://s2.ax1x.com/2019/10/13/ujtOHK.png" alt="控制台表格化打印对象数据"></p><p>这种方式可以替代普遍使用的直接用log打印对象数据，表格化的展示相对还是更加清晰的。问题少年再次发问，如果我们想多个对象一起打印呢？</p><pre><code class="js">const pets = {  name: &quot;Simon&quot;,  type: &quot;cat&quot;};const person = {  firstName: &quot;Indrek&quot;,  lastName: &quot;Lasn&quot;}console.table(pets, person);</code></pre><p>与预想一致，两个不同键值的对象被才分成两个表格在控制台打印出来了。</p><p><img src="https://s2.ax1x.com/2019/10/13/ujNQuq.png" alt="两个对象一起打印"></p><p>如果我们不想分开两个表格打印，可否在一个表格显示呢？可以的！只要把两个对象放入一个数组就ok了。</p><pre><code class="js">const pets = {  name: &quot;Simon&quot;,  type: &quot;cat&quot;};const person = {  firstName: &quot;Indrek&quot;,  lastName: &quot;Lasn&quot;}console.table([pets, person]);</code></pre><p>现在我们看到两个对象在一个表格里面展示了，键值被放在表格的头部了，因为键值在两个对象里面是不一样的。</p><p><img src="https://s2.ax1x.com/2019/10/13/ujNtC4.png" alt="两个对象在一个表格里面打印"></p><hr><h2 id="console-group"><a href="#console-group" class="headerlink" title="console.group"></a>console.group</h2><p>当我们是在调试集合（sets）或者是关联数据（linked-data），可以使用嵌套组来优化你的控制台输出。使用<code>console.group()</code>来创建一个嵌套的组。</p><pre><code class="js">console.log(&quot;This is the first level&quot;);console.group();console.log(&quot;Level 2&quot;);console.group();console.log(&quot;Level 3&quot;);console.warn(&quot;More of level 3&quot;);console.groupEnd();console.log(&quot;Back to level 2&quot;);console.groupEnd();console.log(&quot;Back to the first level&quot;);</code></pre><p>以下是一个嵌套的层级提示输出，在调试关联或者层级数据的时候特别实用。</p><p><img src="https://s2.ax1x.com/2019/10/13/ujNy5D.png" alt=""></p><blockquote><p>使用<code>console.groupCollapsed()</code>可以把所有嵌套的层级收起来，使用鼠标点击时可以展开查看。</p></blockquote><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>作为一名优秀的程序员，我们应该尽量在合适的场景或者合适的情况下运用在提供到给我的调试工具。所以这一篇文章提到的调试方式，我们应该在开发调试的过程中多合理运用，习惯后我们会发现调试起来会更加敏捷和高效。</p><hr><blockquote><p><strong>#通过技术悟出人生道理# 💭</strong><br>“人生无常，写的了一行是一行<br>Code now or never” <small> <em>～ 三·钻 TriDiamond</em> <small></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
          <category> Tips </category>
          
          <category> Debugging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Console </tag>
            
            <tag> Debugging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab Webhook 自动部署</title>
      <link href="/2019/09/10/server/aliyun-webhook-setup.html"/>
      <url>/2019/09/10/server/aliyun-webhook-setup.html</url>
      
        <content type="html"><![CDATA[<h2 id="创建与填写部署公钥"><a href="#创建与填写部署公钥" class="headerlink" title="创建与填写部署公钥"></a>创建与填写部署公钥</h2><h3 id="创建部署公钥"><a href="#创建部署公钥" class="headerlink" title="创建部署公钥"></a>创建部署公钥</h3><pre><code class="bash">sudo -Hu www ssh-keygen -t rsa</code></pre><blockquote><p>如果创建失败首先需要创建/home/www/.ssh这个文件夹</p></blockquote><h3 id="查看公钥"><a href="#查看公钥" class="headerlink" title="查看公钥"></a>查看公钥</h3><pre><code class="bash">cat /home/www/.ssh/id_rsa.pub</code></pre><h3 id="添加Hook"><a href="#添加Hook" class="headerlink" title="添加Hook"></a>添加Hook</h3><p>在阿里云code.aliyun.com上的profile&gt;ssh_key里面添加公钥</p><h2 id="初始化git项目文件夹"><a href="#初始化git项目文件夹" class="headerlink" title="初始化git项目文件夹"></a>初始化git项目文件夹</h2><pre><code class="bash">sudo -Hu www git clone [git地址]</code></pre><blockquote><p>这里注意, 一定要用www的身份状态要不后期无法自动git pull</p></blockquote><h2 id="自动部署脚本-PHP"><a href="#自动部署脚本-PHP" class="headerlink" title="自动部署脚本 (PHP)"></a>自动部署脚本 (PHP)</h2><h3 id="Shell-exec"><a href="#Shell-exec" class="headerlink" title="Shell_exec"></a>Shell_exec</h3><p>在使用这个PHP脚本的时候我们需要用到<code>shell_exec</code>php的原生函数, php-fpm是默认屏蔽这个函数的, 所有需要在php.ini里面修改一下配置</p><blockquote><p>找到<code>disable_functions</code>这个参数, 并且在里面去掉<code>shell_exec</code></p></blockquote><h3 id="PHP-脚本"><a href="#PHP-脚本" class="headerlink" title="PHP 脚本"></a>PHP 脚本</h3><pre><code class="php">$token = &#39;token&#39;;if (!isset($_GET[&#39;token&#39;]) &amp;&amp; $_GET[&#39;token&#39;] != $token) {    die(&#39;access denied&#39;);}$json = json_decode(file_get_contents(&#39;php://input&#39;), true);$repo = $json[&#39;repository&#39;][&#39;name&#39;];// 只在主分支提交时且提交数大于0执行自动部署if ($json[&#39;ref&#39;]==&#39;refs/heads/master&#39; &amp;&amp; $json[&#39;total_commits_count&#39;]&gt;0) {    $pull_result = shell_exec(&#39;cd /to/project/path/ &amp;&amp; git pull&#39;);    if ($pull_result) {        $res_log = &#39;----------pull 成功---------------&#39;.PHP_EOL;        $res_log .= $json[&#39;user_name&#39;] . &#39; 在&#39; . date(&#39;Y-m-d H:i:s&#39;) . &#39;向&#39; . $json[&#39;repository&#39;][&#39;name&#39;] . &#39;项目的&#39; . $json[&#39;ref&#39;] . &#39;分支push了&#39; . $json[&#39;total_commits_count&#39;] . &#39;个commit：&#39; . PHP_EOL;        $res_log .= $pull_result.PHP_EOL;        file_put_contents(&quot;cityconcierge-webhook-log.txt&quot;, $res_log, FILE_APPEND);//追加写入    } else {        $res_log = &#39;------------pull 失败-------------&#39;.PHP_EOL;        $res_log .= $json[&#39;user_name&#39;] . &#39; 在&#39; . date(&#39;Y-m-d H:i:s&#39;) . &#39;向&#39; . $json[&#39;repository&#39;][&#39;name&#39;] . &#39;项目的&#39; . $json[&#39;ref&#39;] . &#39;分支push了&#39; . $json[&#39;total_commits_count&#39;] . &#39;个commit：&#39; . PHP_EOL;        $res_log .= $pull_result.PHP_EOL;        file_put_contents(&quot;cityconcierge-webhook-log.txt&quot;, $res_log, FILE_APPEND);//追加写入    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gitlab </tag>
            
            <tag> Webhook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lumen 使用 laravel passport</title>
      <link href="/2019/01/10/laravel/lumen-passport-usage.html"/>
      <url>/2019/01/10/laravel/lumen-passport-usage.html</url>
      
        <content type="html"><![CDATA[<p>Lumen是laravel的简洁版, 把laravel里面深重的依赖都去掉了, 所以直接安装laravel的passport是无法正常使用的.<br>所以如果要在lumen上使用laravel的passport就需要安装另外一个插件.</p><h2 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h2><ul><li>PHP &gt;= 5.6.3</li><li>Lumen &gt;= 5.3</li></ul><h2 id="Composer安装lumen-passport插件"><a href="#Composer安装lumen-passport插件" class="headerlink" title="Composer安装lumen-passport插件"></a>Composer安装lumen-passport插件</h2><p>首先安装 Lumen Passport</p><pre><code class="bash"># 进入项目根目录$ cd lumen-app# 使用composer安装插件$ composer require dusterio/lumen-passport</code></pre><h2 id="修改-bootstrap-bootstrap-app-php"><a href="#修改-bootstrap-bootstrap-app-php" class="headerlink" title="修改 bootstrap (bootstrap/app.php)"></a>修改 bootstrap (bootstrap/app.php)</h2><p>需要引入Laravel Passport的provider和Lumen的一些provider</p><pre><code class="php">// 开启 Facades$app-&gt;withFacades();// 开启 Eloquent$app-&gt;withEloquent();// 开启 auth 中间件$app-&gt;routeMiddleware([    &#39;auth&#39; =&gt; App\Http\Middleware\Authenticate::class,]);// 注册laravel passport的provider和lumen passport的provider$app-&gt;register(Laravel\Passport\PassportServiceProvider::class);$app-&gt;register(Dusterio\LumenPassport\PassportServiceProvider::class);</code></pre><h2 id="数据表移植和安装Laravel-Passport"><a href="#数据表移植和安装Laravel-Passport" class="headerlink" title="数据表移植和安装Laravel Passport"></a>数据表移植和安装Laravel Passport</h2><pre><code class="bash"># 移植passport的数据表php artisan migrate# 安装passport需要的配置php artisan passport:install</code></pre><h2 id="Lumen-Passport自带的路由"><a href="#Lumen-Passport自带的路由" class="headerlink" title="Lumen Passport自带的路由"></a>Lumen Passport自带的路由</h2><p>这个lumen-passport包已经引入了一下路由, 但是与web相关的路由因为lumen是没有web的路由的, 只有api的, 所以这个插件已经把web端的路由都去掉了.</p><table><thead><tr><th>Verb</th><th>Path</th><th>NamedRoute</th><th>Controller</th><th>Action</th><th>Middleware</th></tr></thead><tbody><tr><td>POST</td><td>/oauth/token</td><td></td><td>\Laravel\Passport\Http\Controllers\AccessTokenController</td><td>issueToken</td><td>-</td></tr><tr><td>GET</td><td>/oauth/tokens</td><td></td><td>\Laravel\Passport\Http\Controllers\AuthorizedAccessTokenController</td><td>forUser</td><td>auth</td></tr><tr><td>DELETE</td><td>/oauth/tokens/{token_id}</td><td></td><td>\Laravel\Passport\Http\Controllers\AuthorizedAccessTokenController</td><td>destroy</td><td>auth</td></tr><tr><td>POST</td><td>/oauth/token/refresh</td><td></td><td>\Laravel\Passport\Http\Controllers\TransientTokenController</td><td>refresh</td><td>auth</td></tr><tr><td>GET</td><td>/oauth/clients</td><td></td><td>\Laravel\Passport\Http\Controllers\ClientController</td><td>forUser</td><td>auth</td></tr><tr><td>POST</td><td>/oauth/clients</td><td></td><td>\Laravel\Passport\Http\Controllers\ClientController</td><td>store</td><td>auth</td></tr><tr><td>PUT</td><td>/oauth/clients/{client_id}</td><td></td><td>\Laravel\Passport\Http\Controllers\ClientController</td><td>update</td><td>auth</td></tr><tr><td>DELETE</td><td>/oauth/clients/{client_id}</td><td></td><td>\Laravel\Passport\Http\Controllers\ClientController</td><td>destroy</td><td>auth</td></tr><tr><td>GET</td><td>/oauth/scopes</td><td></td><td>\Laravel\Passport\Http\Controllers\ScopeController</td><td>all</td><td>auth</td></tr><tr><td>GET</td><td>/oauth/personal-access-tokens</td><td></td><td>\Laravel\Passport\Http\Controllers\PersonalAccessTokenController</td><td>forUser</td><td>auth</td></tr><tr><td>POST</td><td>/oauth/personal-access-tokens</td><td></td><td>\Laravel\Passport\Http\Controllers\PersonalAccessTokenController</td><td>store</td><td>auth</td></tr><tr><td>DELETE</td><td>/oauth/personal-access-tokens/{token_id}</td><td></td><td>\Laravel\Passport\Http\Controllers\PersonalAccessTokenController</td><td>destroy</td><td>auth</td></tr></tbody></table><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>修改 <code>config/auth.php</code> 里面的配置, 按照项目需要修改. 下面是一个简单的例子</p><pre><code class="php">return [    &#39;defaults&#39; =&gt; [        &#39;guard&#39; =&gt; &#39;api&#39;,        &#39;passwords&#39; =&gt; &#39;users&#39;,    ],    &#39;guards&#39; =&gt; [        &#39;api&#39; =&gt; [            &#39;driver&#39; =&gt; &#39;passport&#39;,            &#39;provider&#39; =&gt; &#39;users&#39;,        ],    ],    &#39;providers&#39; =&gt; [        &#39;users&#39; =&gt; [            &#39;driver&#39; =&gt; &#39;eloquent&#39;,            &#39;model&#39; =&gt; \App\User::class        ]    ]];</code></pre><p>需要在 <code>vendor\laravel\lumen-framework\config\auth.php</code> 复制到项目根目录下的<code>config</code>文件夹里面, 如果没有config文件夹, 需要手动添加一个.</p><p>然后在<code>bootstrap/app.php</code>最前面加入配置应用, 因为lumen是不自动引入config里面的配置的.</p><pre><code class="php">$app-&gt;configure(&#39;auth&#39;);</code></pre><h2 id="注册路由"><a href="#注册路由" class="headerlink" title="注册路由"></a>注册路由</h2><p>需要在<code>Provider\AuthServiceProviders.php</code>里面的<code>boot</code>方法里面注册路由</p><pre><code class="php">/*** Boot the authentication services for the application.** @return void*/public function boot(){    // Here you may define how you wish users to be authenticated for your Lumen    // application. The callback which receives the incoming request instance    // should return either a User instance or null. You&#39;re free to obtain    // the User instance via an API token or any other method necessary.    LumenPassport::routes($this-&gt;app); // 注册路由    LumenPassport::tokensExpireIn(Carbon::now()-&gt;addDays(7));    LumenPassport::refreshTokensExpireIn(Carbon::now()-&gt;addDays(30));}</code></pre><p>简单路由注册</p><pre><code class="php">Dusterio\LumenPassport\LumenPassport::routes($this-&gt;app);</code></pre><p>通用版本控制的路由</p><pre><code class="php">Dusterio\LumenPassport\LumenPassport::routes($this-&gt;app, [&#39;prefix&#39; =&gt; &#39;v1/oauth&#39;]);</code></pre><h2 id="用户模型"><a href="#用户模型" class="headerlink" title="用户模型"></a>用户模型</h2><p>需要在用户模型里面加入<code>HasApiTokens</code>的trait, 例子:</p><pre><code class="php">class User extends Model implements AuthenticatableContract, AuthorizableContract{    use HasApiTokens, Authenticatable, Authorizable;    /* rest of the model */}</code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>其他的详细文档可以查看lumen-passport的插件<a href="https://github.com/dusterio/lumen-passport" target="_blank" rel="noopener">github</a></p>]]></content>
      
      
      <categories>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel Passport </tag>
            
            <tag> Lumen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lumen passport实现多个用户体系下的oauth验证</title>
      <link href="/2019/01/10/laravel/lumen-multi-oauth.html"/>
      <url>/2019/01/10/laravel/lumen-multi-oauth.html</url>
      
        <content type="html"><![CDATA[<p>这个教程是基于, lumen里面已经安装好了lumen-passport的插件, 如果还没有的话可以先到<a href="/2019/01/10/2019-01-10-lumen-passport-usage/">lumen使用laravel passport教程</a>先安装.</p><h2 id="改写Laravel-Passport里面的UserRepository"><a href="#改写Laravel-Passport里面的UserRepository" class="headerlink" title="改写Laravel Passport里面的UserRepository"></a>改写Laravel Passport里面的<code>UserRepository</code></h2><blockquote><p>文件路径 <code>vendor\laravel\passport\src\Bridge\UserRepository.php</code></p></blockquote><ul><li><p>首先需要改写<code>userRepositroy</code>里面的<code>getUserEntityByUserCredentials</code>方法</p></li><li><p>复制<code>userRepositroy</code>里面的<code>getUserEntityByUserCredentials</code>方法, 改名为<code>getEntityByUserCredentials</code></p></li><li><p>在新建的方法里面找到一下代码</p></li></ul><pre><code class="php">$provider = config(&#39;auth.guards.api.provider&#39;);</code></pre><p>改成一下样子</p><pre><code class="php">$provider = config(&#39;auth.guards.&#39;.$provider.&#39;.provider&#39;);</code></pre><ul><li>然后在新的方法<code>getEntityByUserCredentials</code>的参数里面添加新的参数<code>$provider</code></li></ul><pre><code class="php">public function getEntityByUserCredentials($username, $password, $grantType,   ClientEntityInterface $clientEntity, $provider) {      //...}</code></pre><h2 id="修改oauth2-server里面的PasswordGrand"><a href="#修改oauth2-server里面的PasswordGrand" class="headerlink" title="修改oauth2-server里面的PasswordGrand"></a>修改oauth2-server里面的PasswordGrand</h2><blockquote><p>文件路径 <code>vendor\league\oauth2-server\src\Grant\PasswordGrant.php</code></p></blockquote><ul><li>修改<code>validateUser</code>方法里面的这一串代码:</li></ul><pre><code class="php">$user = $this-&gt;userRepository-&gt;getEntityByUserCredentials(    $username,    $password,    $this-&gt;getIdentifier(),    $client,    $provider // 新加的provider字段);</code></pre><ul><li>在同一个方法里面加入新参数的获取</li></ul><pre><code class="php"> $provider = $this-&gt;getRequestParameter(&#39;provider&#39;, $request); if (is_null($provider)) { throw OAuthServerException::invalidRequest(&#39;provider&#39;); }</code></pre><h2 id="在auth-php配置里面加入新的guard"><a href="#在auth-php配置里面加入新的guard" class="headerlink" title="在auth.php配置里面加入新的guard"></a>在auth.php配置里面加入新的guard</h2><p>首先需要加入新的guard配置</p><pre><code class="php">&#39;guards&#39; =&gt; [    // 原有的api guard    &#39;api&#39; =&gt; [        &#39;driver&#39; =&gt; &#39;passport&#39;,        &#39;provider&#39; =&gt; &#39;users&#39;,    ],    // 新加的admin-api guard    &#39;admin-api&#39; =&gt; [        &#39;driver&#39; =&gt; &#39;passport&#39;,        &#39;provider&#39; =&gt; &#39;admins&#39;,    ],],</code></pre><p>添加新<code>admin-api</code> guard的provider</p><pre><code class="php">&#39;providers&#39; =&gt; [    &#39;users&#39; =&gt; [        &#39;driver&#39; =&gt; &#39;eloquent&#39;,        &#39;model&#39; =&gt; \App\Models\General\MemberLogin::class    ],    // 新加的admins provider对应不用的用户模型    &#39;admins&#39; =&gt; [        &#39;driver&#39; =&gt; &#39;eloquent&#39;,        &#39;model&#39; =&gt; \App\Models\Backend\Manager::class    ]],</code></pre><h2 id="路由middleware使用"><a href="#路由middleware使用" class="headerlink" title="路由middleware使用"></a>路由middleware使用</h2><p>区别在于middleware, 上文加入的新<code>admin-api</code>guard, 在新的路由里面就可以使用<code>auth:admin-api</code>的权限验证中间件理实现权限控制了!</p><pre><code class="php">/*|--------------------------------------------------------------------------| Admin API版本 v1 路由|--------------------------------------------------------------------------.|| prefix admin/api/api版本号| namespace Api\api版本号|*/$app-&gt;group([&#39;prefix&#39; =&gt; &#39;admin/api/v1&#39;, &#39;namespace&#39; =&gt; &#39;AdminApi\V1&#39;], function ($app) {    // ================ 不受登录权限控制的接口路由 ================ //    //测试    $app-&gt;get(&#39;test&#39;, &#39;ExampleController@test&#39;);    // ================ 受登录权限控制的接口路由 ================ //    $app-&gt;group([&#39;middleware&#39; =&gt; &#39;auth:admin-api&#39;], function ($app) {        //测试        $app-&gt;get(&#39;test2&#39;, function(){            return &#39;oauth test&#39;;        });        //测试        $app-&gt;get(&#39;test3&#39;, &#39;ExampleController@test&#39;);    });});</code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>使用了多个guard的时候, 在使用laravel默认的<code>$request-&gt;user()</code>, 这个方法默认是使用<code>api</code>guard的, 可以在<code>auth.php</code>配置里面看到默认guard的配置.</p><pre><code class="php">/*|--------------------------------------------------------------------------| Authentication Defaults|--------------------------------------------------------------------------|| This option controls the default authentication &quot;guard&quot; and password| reset options for your application. You may change these defaults| as required, but they&#39;re a perfect start for most applications.|*/&#39;defaults&#39; =&gt; [    &#39;guard&#39; =&gt; env(&#39;AUTH_GUARD&#39;, &#39;api&#39;),    &#39;passwords&#39; =&gt; &#39;users&#39;,],</code></pre><p>所以在使用新的<code>admin-api</code> guard的时候在使用<code>$request-&gt;user()</code>时需要加入对应的guard. 例子:</p><pre><code class="php">namespace App\Http\Controllers\AdminApi\V1;use App\Http\Controllers\Controller;use Illuminate\Http\Request;use Illuminate\Support\Facades\Cache;class ExampleController extends Controller{    public function test(Request $request)    {        $request-&gt;user(&#39;admin-api&#39;)-&gt;toArray(); // 获取到admin-api下的用户信息    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel Passport </tag>
            
            <tag> Lumen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IONIC 2 实现首页双击退出APP</title>
      <link href="/2017/04/24/ionic/listen-to-back-button.html"/>
      <url>/2017/04/24/ionic/listen-to-back-button.html</url>
      
        <content type="html"><![CDATA[<h2 id="添加绑定值"><a href="#添加绑定值" class="headerlink" title="添加绑定值"></a>添加绑定值</h2><blockquote><p>首先在<code>app/app.html</code>下加入<code>#myNav</code>, 这个是用于绑定当前页面的导航标签</p></blockquote><pre><code class="html"> &lt;ion-nav #myNav [root]=&quot;rootPage&quot;&gt;&lt;/ion-nav&gt;</code></pre><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><blockquote><p>然后在<code>app.component.ts</code>做相对的改动</p></blockquote><pre><code class="ts">import { Component, ViewChild } from &#39;@angular/core&#39;;import { Platform, ToastController, Nav, App } from &#39;ionic-angular&#39;;import { StatusBar } from &#39;@ionic-native/status-bar&#39;;import { SplashScreen } from &#39;@ionic-native/splash-screen&#39;;@Component({  templateUrl: &#39;app.html&#39;,  providers: [SplashScreen, StatusBar]})export class MyApp {  rootPage = &#39;TabsPage&#39;;  backButtonPressed: boolean = false;  //用于判断返回键是否触发  @ViewChild(&#39;myNav&#39;) nav: Nav;  constructor(public platform: Platform, private splashScreen: SplashScreen, private statusBar: StatusBar, public app: App, public toastCtrl: ToastController) {    platform.ready().then(() =&gt; {      // Okay, so the platform is ready and our plugins are available.      // Here you can do any higher level native things you might need.      this.statusBar.styleDefault();      this.statusBar.backgroundColorByHexString(&#39;#661F22&#39;);      this.splashScreen.hide();      this.registerBackButtonAction(); //运行这个方法绑定返回按钮    });  }  registerBackButtonAction() {    this.platform.registerBackButtonAction(() =&gt; {      //如果想点击返回按钮隐藏toast或loading或Overlay就把下面加上      // this.ionicApp._toastPortal.getActive() || this.ionicApp._loadingPortal.getActive() || this.ionicApp._overlayPortal.getActive();      let nav = this.app.getActiveNav();      if (nav.canGoBack()){ //是否已经到了首页        nav.pop();      }else{        this.showExit()      }    }, 1);  }  //双击退出提示框  showExit() {    if (this.backButtonPressed) { //当触发标志为true时，即2秒内双击返回按键则退出APP      this.platform.exitApp();    } else {     this.toastCtrl.create({      message: &#39;再按一次退出应用&#39;,      duration: 2000,      position: &#39;middle&#39;     }).present();     this.backButtonPressed = true;     setTimeout(() =&gt; this.backButtonPressed = false, 2000);//2秒内没有再次点击返回则将触发标志标记为false    }  }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Ionic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ionic 2 </tag>
            
            <tag> Hybird App </tag>
            
            <tag> Angular 4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IONIC 3 使用sliders轮播时拖动后autoplay失效解决方法</title>
      <link href="/2017/04/20/ionic/sliders-autoplay.html"/>
      <url>/2017/04/20/ionic/sliders-autoplay.html</url>
      
        <content type="html"><![CDATA[<h4 id="我们先了解一下Ionic的Sliders"><a href="#我们先了解一下Ionic的Sliders" class="headerlink" title="我们先了解一下Ionic的Sliders"></a>我们先了解一下Ionic的Sliders</h4><blockquote><p>首先Ionic里面的sliders是用<a href="http://idangero.us/swiper/api/#.WPhzbPB96Uk" target="_blank" rel="noopener">Swiper.js</a>的第三方插件实现的, Ionic官方Sliders的文档里面只描述了可以直接写入html标签内的属性, 有很多高级属性是没有写在文档里面的. </p></blockquote><h4 id="要怎么改变sliders的其他属性呢"><a href="#要怎么改变sliders的其他属性呢" class="headerlink" title="要怎么改变sliders的其他属性呢?"></a>要怎么改变sliders的其他属性呢?</h4><blockquote><p>那如果我们要用到Swiper的其他属性怎么办呢? Ionic 2.x 的时候我们是可以在options里面传入的, 但是升级Ionic 3.x.x 后sliders的options属性被移除了. 现在要改变sliders的属性我们要用到sliders类. </p></blockquote><h4 id="如何拖动轮播图后不让autoplay失效呢"><a href="#如何拖动轮播图后不让autoplay失效呢" class="headerlink" title="如何拖动轮播图后不让autoplay失效呢?"></a>如何拖动轮播图后不让autoplay失效呢?</h4><blockquote><p>首先我们要引入<code>viewChild</code>和<code>Sliders</code></p></blockquote><pre><code class="ts">import { ViewChild } from &#39;@angular/core&#39;;import { Slides } from &#39;ionic-angular&#39;;</code></pre><blockquote><p>然后使用<code>ionViewWillEnter</code>在进入页面前改变sliders的<code>autoplayDisableOnInteraction</code>属性</p></blockquote><pre><code class="ts">import { ViewChild } from &#39;@angular/core&#39;;import { Slides } from &#39;ionic-angular&#39;;class MyPage {  @ViewChild(Slides) slides: Slides;  ionViewWillEnter() {    this.slides.autoplayDisableOnInteraction = false; //禁止slider拖动后autoPlay失效  }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Ionic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hybird App </tag>
            
            <tag> Ionic 3 </tag>
            
            <tag> Angular 4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修复 Ionic 3.0.1 在IOS点击Tabs多次出现黑屏问题方法</title>
      <link href="/2017/04/11/ionic/ios-blackscreen-fix.html"/>
      <url>/2017/04/11/ionic/ios-blackscreen-fix.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Ionic 3.0.1 在IOS存在的一个严重的BUG，在IOS下多次重复点击TAB的时候页面会出现黑屏问题。</p></blockquote><blockquote><p>好消息是目前有一个暂时的修复方法。但是这个方法涉及修改Ionic核心代码，所以如果你们正在使用Ionic3发布APP，可以暂时使用以下办法修复问题。</p></blockquote><blockquote><p>在<code>node_modules/ionic-angular/components/tabs/tabs.js</code>找到一下代码 (468行)</p></blockquote><pre><code class="typescript">getComponent(this._linker, tab.root).then(function (viewController) {    if (viewController !== active.component) {        // Otherwise, if the page we&#39;re on is not our real root        // reset it to our default root type        return tab.setRoot(tab.root);    }}).catch(function () {    (void 0) /* console.debug */;});</code></pre><blockquote><p>把以上代码改为</p></blockquote><pre><code class="typescript">getComponent(this._linker, tab.root).then(function (viewController) {    if (viewController.component !== active.component) {        // Otherwise, if the page we&#39;re on is not our real root        // reset it to our default root type        return tab.setRoot(tab.root);    }}).catch(function () {    (void 0) /* console.debug */;});</code></pre><blockquote><p>以上解决办法来自于github上面的一个大神 <a href="https://github.com/driftyco/ionic/pull/11084" target="_blank" rel="noopener">https://github.com/driftyco/ionic/pull/11084</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Ionic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hybird App </tag>
            
            <tag> Ionic 3 </tag>
            
            <tag> Angular 4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IONIC 2 升级 3 教程</title>
      <link href="/2017/04/10/ionic/upgrade-guide.html"/>
      <url>/2017/04/10/ionic/upgrade-guide.html</url>
      
        <content type="html"><![CDATA[<h2 id="升级步骤"><a href="#升级步骤" class="headerlink" title="升级步骤"></a>升级步骤</h2><blockquote><p>这一次的升级Ionic 3 换成了使用最新的Angular 4.0, 最新的TypeScript, 添加了懒加载和修复了一些组件的bug.</p></blockquote><ol><li>首先更新<code>package.json</code>, 按照以下的代码相应替换你package.json里面的代码, 并且把你项目根目录下的<code>node_modules</code>文件夹删除掉, 然后运行<code>npm install</code> (如果你是用淘宝镜像可以运行 <code>cnpm install</code>)</li></ol><pre><code class="json">&quot;dependencies&quot;: {    &quot;@angular/common&quot;: &quot;4.0.0&quot;,    &quot;@angular/compiler&quot;: &quot;4.0.0&quot;,    &quot;@angular/compiler-cli&quot;: &quot;4.0.0&quot;,    &quot;@angular/core&quot;: &quot;4.0.0&quot;,    &quot;@angular/forms&quot;: &quot;4.0.0&quot;,    &quot;@angular/http&quot;: &quot;4.0.0&quot;,    &quot;@angular/platform-browser&quot;: &quot;4.0.0&quot;,    &quot;@angular/platform-browser-dynamic&quot;: &quot;4.0.0&quot;,    &quot;@ionic-native/core&quot;: &quot;3.4.2&quot;,    &quot;@ionic-native/splash-screen&quot;: &quot;3.4.2&quot;,    &quot;@ionic-native/status-bar&quot;: &quot;3.4.2&quot;,    &quot;@ionic/storage&quot;: &quot;2.0.1&quot;,    &quot;ionic-angular&quot;: &quot;3.0.1&quot;,    &quot;ionicons&quot;: &quot;3.0.0&quot;,    &quot;rxjs&quot;: &quot;5.1.1&quot;,    &quot;sw-toolbox&quot;: &quot;3.4.0&quot;,    &quot;zone.js&quot;: &quot;^0.8.4&quot;},&quot;devDependencies&quot;: {  &quot;@ionic/app-scripts&quot;: &quot;1.3.0&quot;,  &quot;typescript&quot;: &quot;~2.2.1&quot;}</code></pre><ol start="2"><li>第二步你需要在<code>app/app.module.ts</code>文件里面引入<code>BrowserModule</code>和<code>HttpModule</code></li></ol><blockquote><p>首先需要在头部引入这两个module (如果你的APP不使用HTTP可以不引入<code>HttpModule</code>)</p></blockquote><pre><code class="typescript">import { BrowserModule } from &#39;@angular/platform-browser&#39;;import { HttpModule } from &#39;@angular/http&#39;;</code></pre><blockquote><p>在同一个文件里面找到<code>imports</code>并且加入<code>BrowserModule</code>和<code>HttpModule</code></p></blockquote><pre><code class="typescript">imports: [  BrowserModule,  HttpModule,  IonicModule.forRoot(MyApp)],</code></pre><ol start="3"><li>如果你升级到 Ionic Native 3.x, 就是CLI3. 使用 Ionic Native 3.x的话, APP打包出来会更小. 因为Ionic Native的原生插件都不自带有了, 你使用一个就要安装一个. 如果你原有的Ionic 2 项目有引入原生插件, 你就要做以下操作.</li></ol><blockquote><p>这里用<code>Camera</code>和<code>Geolocation</code>这个两个原生插件作为例子, 你其他的插件都需要使用相同的方式做修改</p></blockquote><blockquote><p>注意您使用的所有插件都必须要在<code>app/app.module.ts</code>里面先引用了, 而且要在<code>app/app.modules.ts</code>里面的providers里面声明, 如果没有这样配置就会出现<code>No provider for XXXXX</code>这样的报错了!</p></blockquote><h4 id="Camera插件"><a href="#Camera插件" class="headerlink" title="Camera插件"></a>Camera插件</h4><pre><code class="typescript">// 在app/app.module.ts文件里面import { Camera } from &#39;@ionic-native/camera&#39;;...@NgModule({  ...  providers: [    ...    Camera    ...  ]  ...})export class AppModule { }</code></pre><h4 id="Geolocation插件"><a href="#Geolocation插件" class="headerlink" title="Geolocation插件"></a>Geolocation插件</h4><pre><code class="typescript">// 在app/app.module.ts文件里面import { Geolocation } from &#39;@ionic-native/geolocation&#39;;import { Platform } from &#39;ionic-angular&#39;;import { NgZone } from &#39;@angular/core&#39;;@Component({ ... })export class MyComponent {  constructor(private geolocation: Geolocation, private platform: Platform, private ngZone: NgZone) {    platform.ready().then(() =&gt; {      // get position      geolocation.getCurrentPosition().then(pos =&gt; {        console.log(`lat: ${pos.coords.latitude}, lon: ${pos.coords.longitude}`)      });      // watch position      const watch = geolocation.watchPosition().subscribe(pos =&gt; {        console.log(`lat: ${pos.coords.latitude}, lon: ${pos.coords.longitude}`)        // Currently, observables from Ionic Native plugins        // need to run inside of zone to trigger change detection        ngZone.run(() =&gt; {          this.position = pos;        })      });      // to stop watching      watch.unsubscribe();    });  }}</code></pre><blockquote><p>更详细的文档可以参考官方的修改日记 <a href="https://github.com/driftyco/ionic-native/blob/master/README.md" target="_blank" rel="noopener">https://github.com/driftyco/ionic-native/blob/master/README.md</a></p></blockquote><h2 id="组件Component更变"><a href="#组件Component更变" class="headerlink" title="组件Component更变"></a>组件<code>Component</code>更变</h2><h4 id="新网格"><a href="#新网格" class="headerlink" title="新网格"></a>新网格</h4><blockquote><p>旧的网格体系已经废除, 新的网格组件请参考官方文档 <a href="http://blog.ionic.io/build-awesome-desktop-apps-with-ionics-new-responsive-grid/" target="_blank" rel="noopener">http://blog.ionic.io/build-awesome-desktop-apps-with-ionics-new-responsive-grid/</a></p></blockquote><h4 id="标签的color属性更变"><a href="#标签的color属性更变" class="headerlink" title="标签的color属性更变"></a>标签的<code>color</code>属性更变</h4><blockquote><p>以下标签的<code>color</code>属性在新的版本里面会不起效果了, 现在必须要使用<code>ion-text</code>才会起效果, 详细说明请看官方文档 <a href="http://ionicframework.com/docs/api/components/typography/Typography/" target="_blank" rel="noopener">http://ionicframework.com/docs/api/components/typography/Typography/</a></p></blockquote><pre><code class="css">h1[color], h2[color], h3[color], h4[color], h5[color], h6[color], a[color]:not([ion-button]):not([ion-item]):not([ion-fab]), p[color], span[color], b[color], i[color], strong[color], em[color], small[color], sub[color], sup[color]</code></pre><h4 id="Slides组件更变"><a href="#Slides组件更变" class="headerlink" title="Slides组件更变"></a>Slides组件更变</h4><blockquote><p>以下的Slides属性和方法已经正式在新版本里面移除了</p></blockquote><ul><li>Slides的input的<code>options</code>属性已经废除, 请使用标签的属性;</li><li>Slide的事件<code>ionWillChange</code>方法已经废除, 请使用<code>ionSlideWillChange</code>;</li><li>Slide的事件<code>ionDidChange</code>方法已经废除, 请使用<code>ionSlideDidChange</code>;</li><li>Slide的事件<code>ionDrag</code>方法已经废除, 请使用<code>ionSlideDrag</code>;</li><li>Slides的<code>getSlider()</code>方法已经废除, 请使用<code>ion-slides</code>实例;</li></ul>]]></content>
      
      
      <categories>
          
          <category> Ionic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hybird App </tag>
            
            <tag> Ionic 3 </tag>
            
            <tag> Angular 4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IONIC 2 - 确认密码</title>
      <link href="/2017/03/19/ionic/comfirm-password-validators.html"/>
      <url>/2017/03/19/ionic/comfirm-password-validators.html</url>
      
        <content type="html"><![CDATA[<p>开发过程中一般在注册或者修改密码都要写一个密码确认的表格, 这篇文章就是记录怎么在Ionic2里面使用<strong>FormBuilder</strong>和<strong>Validators</strong>判断密码是否一致.</p><p>首先这篇文章是默认您已经了解怎么使用<strong>Angualr2</strong>的<strong>FormBuilder</strong>和<strong>Validator</strong>, 如果你还没了解这两个类的用法可以前去看<a href="https://ionicframework.com/docs/v2/resources/forms/" target="_blank" rel="noopener">Ionic2的文档</a></p><h1 id="实例一个FormGroup"><a href="#实例一个FormGroup" class="headerlink" title="实例一个FormGroup"></a>实例一个<code>FormGroup</code></h1><blockquote><p>第一步首先我们需要实例了FormBuilder的一个FormGroup</p></blockquote><ul><li>这里我们定义了passwordForm的这个表格里面的input.</li><li>在最后我们加入了自定义认证方法 { validator: AdvanceValidator.matchingPasswords(‘password’, ‘rePassword’) }</li><li>这里我们把password, 和rePassword 传给了 AdvanceValidator 方法, 这里传的是密码和确认密码在FormGroup里面定义的名字.</li><li>现在我们看看这个password.ts怎么写.</li></ul><pre><code class="typescript">import { FormBuilder, Validators, FormGroup } from &#39;@angular/forms&#39;;import { AdvanceValidator } from &#39;../../validators/advance-validator&#39;;@Component({  selector: &#39;page-password&#39;,  templateUrl: &#39;password.html&#39;})//密码修改页export class PasswordPage {  passwordForm: FormGroup;  constructor(private fb: FormBuilder)   {    this.passwordForm = fb.group({        username: [&#39;&#39;, Validators.required],        password: [&#39;&#39;, Validators.compose([Validators.maxLength(30), Validators.minLength(7), Validators.required])],        rePassword: [&#39;&#39;, Validators.compose([Validators.maxLength(30), Validators.minLength(7), Validators.required])],    }, { validator: AdvanceValidator.matchingPasswords(&#39;password&#39;, &#39;rePassword&#39;) });  }}</code></pre><h1 id="创建自定义认证器"><a href="#创建自定义认证器" class="headerlink" title="创建自定义认证器"></a>创建自定义认证器</h1><ul><li>我们首先在项目根目录创建 <strong>validators</strong> 的文件夹</li><li>然后在里面创建 <strong>advance-validators.ts</strong> 的ts文件</li><li>在 <strong>advance-validators.ts</strong> 里面编以下代码</li></ul><pre><code class="typescript">import { FormGroup } from &#39;@angular/forms&#39;;export class AdvanceValidator {    static matchingPasswords(passwordKey: string, rePasswordKey: string) {    return (group: FormGroup) =&gt; {      let password = group.controls[passwordKey]; //获取密码值      let rePassword = group.controls[rePasswordKey]; //获取确认密码值      if(password.value !== rePassword.value) {        //如果密码和确认密码的值不一致就返回给FormBuild rePassword有错误        return rePassword.setErrors({notEquivalent: true})       }    }  }}</code></pre><h1 id="前端表格示例"><a href="#前端表格示例" class="headerlink" title="前端表格示例"></a>前端表格示例</h1><pre><code class="html">&lt;form [formGroup] = &quot;passwordForm&quot;&gt;  &lt;ion-list inset&gt;    &lt;ion-item&gt;      &lt;ion-input type=&quot;tel&quot; placeholder=&quot;用户名&quot; formControlName=&quot;username&quot;&gt;&lt;/ion-input&gt;      &lt;div item-right *ngIf=&quot;!passwordForm.controls.username.valid  &amp;&amp; (passwordForm.controls.username.dirty)&quot;&gt;        &lt;ion-icon name=&quot;alert&quot;&gt;&lt;/ion-icon&gt; 用户名必填      &lt;/div&gt;    &lt;/ion-item&gt;    &lt;ion-item&gt;      &lt;ion-input type=&quot;password&quot; placeholder=&quot;新密码&quot; formControlName=&quot;password&quot;&gt;&lt;/ion-input&gt;      &lt;div item-right *ngIf=&quot;!passwordForm.controls.password.valid  &amp;&amp; (passwordForm.controls.password.dirty)&quot; &gt;        &lt;ion-icon name=&quot;alert&quot;&gt;&lt;/ion-icon&gt; 密码必须7个字以上      &lt;/div&gt;    &lt;/ion-item&gt;    &lt;ion-item&gt;      &lt;ion-input type=&quot;password&quot; placeholder=&quot;确认密码&quot; formControlName=&quot;rePassword&quot;&gt;&lt;/ion-input&gt;      &lt;div item-right *ngIf=&quot;!passwordForm.controls.rePassword.valid  &amp;&amp; (passwordForm.controls.rePassword.dirty)&quot; &gt;        &lt;ion-icon name=&quot;alert&quot;&gt;&lt;/ion-icon&gt; 密码必须一致      &lt;/div&gt;    &lt;/ion-item&gt;  &lt;/ion-list&gt;&lt;/form&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Ionic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ionic 2 </tag>
            
            <tag> Angular 2 </tag>
            
            <tag> Hybird App </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel 5.4 开发笔记</title>
      <link href="/2017/02/26/laravel/laravel5.4-passport-and-authen.html"/>
      <url>/2017/02/26/laravel/laravel5.4-passport-and-authen.html</url>
      
        <content type="html"><![CDATA[<p>Laravel最近出的Laravel5.4新加了挺多功能的, 比起我用了1年的5.1完善多了. 比较吸引我使用最新的5.4的有几点:</p><ul><li>5.4 添加了谷歌内核的浏览器模拟操作</li><li>自带API认证类”PASSPORT”</li><li>路由自动分类, 现有有了Route自己的文件夹然后里面分类好了WEB和API的路由<br>这一篇记录会分享一些我在尝试Laravel 5.4的过程中遇到的问题和经验</li></ul><h2 id="开发记录"><a href="#开发记录" class="headerlink" title="开发记录"></a>开发记录</h2><h3 id="移植-Migrate-用户和API认证表格是出现sql错误"><a href="#移植-Migrate-用户和API认证表格是出现sql错误" class="headerlink" title="移植(Migrate)用户和API认证表格是出现sql错误"></a>移植(Migrate)用户和API认证表格是出现sql错误</h3><pre><code class="console">[Illuminate\Database\QueryException]                                                           SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key     length is 767 bytes (SQL: alter table `users` add unique `users_email_unique`(`email`))   </code></pre><pre><code class="console">[PDOException]                                                                                 SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key     length is 767 bytes  </code></pre><p>解决办法就是在<strong>app/Providers/AppServiceProvider.php</strong>的这个文件里面的<strong>boot</strong>方法里面添加一下代码:</p><pre><code class="php">use Illuminate\Support\Facades\Schema;function boot(){    Schema::defaultStringLength(191);}</code></pre><h3 id="怎么不使用Laravel5-4自带的用户登录字段"><a href="#怎么不使用Laravel5-4自带的用户登录字段" class="headerlink" title="怎么不使用Laravel5.4自带的用户登录字段"></a>怎么不使用Laravel5.4自带的用户登录字段</h3><p>每次使用laravel自带的用户认证体系都会纠结, 怎么不用它自带的email作为用户名!<br>这次适用Laravel5.4 又遇到了这个问题, 而且解决办法和5.1,5.2的不一样了, 因为Laravel的Auth Provider变动了.<br>解决办法就是在自带的<strong>User.php</strong>(用户模型)里面使用<strong>findForPassport</strong>, 参考一下例子:</p><pre><code class="php">class User extends Authenticatable{    use HasApiTokens, Notifiable;    // ... some code    public function findForPassport($username) {        return $this-&gt;where(&#39;id&#39;, $username)-&gt;first();    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel 5.4 </tag>
            
            <tag> Laravel Passport </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IONIC 2 开发笔记</title>
      <link href="/2017/02/25/ionic/dev-note.html"/>
      <url>/2017/02/25/ionic/dev-note.html</url>
      
        <content type="html"><![CDATA[<p>因为IONIC2才刚刚开始进入正式版, 中文文档基本都是不全的, 我现在开发都是在看英文文档<br>在开发的过程中遇到了很多文档没有描述的问题, 而且开发的过程中遇到一些框架本身没有完善的功能和存在的BUG</p><p>我会在这个日记里面记录一些文档没有写的, 和我开发过程中遇到的一些坑和经验, 希望可以帮助那些刚刚接触IONIC2的程序猿们!</p><h2 id="APP配置"><a href="#APP配置" class="headerlink" title="APP配置"></a>APP配置</h2><h3 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h3><p>因为跨域问题，在开发时如果要用到本地环境进行开发(ionic serve)，必须配置proxy</p><ul><li>Proxy位于项目根目录下的 <strong>ionic.config.json</strong></li></ul><ul><li>只需要把<strong>proxyUrl</strong>改为你本地环境的API地址</li></ul><pre><code class="javascript">{  &quot;name&quot;: &quot;rlph&quot;,  &quot;app_id&quot;: &quot;&quot;,  &quot;v2&quot;: true,  &quot;typescript&quot;: true,  &quot;proxies&quot;: [    {      &quot;path&quot;: &quot;/api&quot;,      &quot;proxyUrl&quot;: &quot;http://api.dev&quot;    }  ]}</code></pre><ul><li>然后把API地址的常量制定为<strong>/api/</strong>这个proxy</li></ul><ul><li>在根目录下<strong>/src/config.ts</strong>里面把<strong>“API_SERVER”</strong>的值改为<strong>“/api/“</strong></li></ul><pre><code>  export let data = {      &quot;API_SERVER&quot; : &quot;/api/&quot;  }</code></pre><h3 id="上线APP配置"><a href="#上线APP配置" class="headerlink" title="上线APP配置"></a>上线APP配置</h3><ul><li>首先你需要配置真是服务器API地址<br>配置API地址是在根目录下<strong>/src/config.ts</strong>里面把<strong>“API_SERVER”</strong>的值改为线上API地址</li></ul><pre><code>  export let data = {      &quot;API_SERVER&quot; : &quot;http://api.domain.com/&quot;  }</code></pre><h2 id="开发常见问题"><a href="#开发常见问题" class="headerlink" title="开发常见问题"></a>开发常见问题</h2><h3 id="APP-run-失败"><a href="#APP-run-失败" class="headerlink" title="APP run 失败"></a>APP run 失败</h3><p>当运行<strong>ionic run android</strong>的时候可能会遇到该报错：</p><pre><code>Error: Failed to install apk to device: [  1%] /data/local/tmp/android-debug.apk[  2%] /data/local/tmp/android-debug.apk...[100%] /data/local/tmp/android-debug.apk        pkg: /data/local/tmp/android-debug.apkFailure [INSTALL_FAILED_UPDATE_INCOMPATIBLE]</code></pre><ul><li>此问题是因为已有签名的APP存在手机上， 需要想删除该APP才能安装测试（debug）版的apk</li><li>在cmd运行以下代码即可解决问题：</li></ul><pre><code>adb uninstall my.package.id</code></pre><h3 id="Ionic-2-自带的native文件上传-FILE-TRANSFER-插件无法获取成功返回内容"><a href="#Ionic-2-自带的native文件上传-FILE-TRANSFER-插件无法获取成功返回内容" class="headerlink" title="Ionic 2 自带的native文件上传(FILE TRANSFER)插件无法获取成功返回内容"></a>Ionic 2 自带的native文件上传(FILE TRANSFER)插件无法获取成功返回内容</h3><p>这个是Ionic 2 核心代码里面的一个BUG, 在一下版本下是有问题的<br><strong>Ionic CLI Version: 2.2.1</strong></p><ul><li>首先找到项目根目录下以下路径里面的<strong>filetransfer.d.ts</strong>文件</li></ul><pre><code>node_modules\ionic-native\dist\es5\plugins\filetransfer.d.tsnode_modules\ionic-native\dist\esm\plugins\filetransfer.d.ts</code></pre><ul><li>分别修改以上两个文件里面的代码</li></ul><pre><code>//把这一行:upload(fileUrl: string, url: string, options?: FileUploadOptions, trustAllHosts?: boolean): Promise&lt;FileUploadResult | FileTransferError&gt;//改为: upload(fileUrl: string, url: string, options?: FileUploadOptions, trustAllHosts?: boolean): Promise&lt;FileUploadResult&gt;</code></pre><h3 id="在安卓下使用相册选择时-返回的图片路径不能再显示问题"><a href="#在安卓下使用相册选择时-返回的图片路径不能再显示问题" class="headerlink" title="在安卓下使用相册选择时, 返回的图片路径不能再显示问题"></a>在安卓下使用相册选择时, 返回的图片路径不能再显示问题</h3><ul><li>首先在这个例子使用的是cordova-plugin-camera组件(Cordova的相机插件)</li><li>首先引入需要的类</li><li>FilePath 这个类就是用来修复安卓上图片URI的问题的</li></ul><pre><code class="typescript">import { Camera, File, FilePath } from &#39;ionic-native&#39;;</code></pre><ul><li>使用 FilePath.resolveNativePath(imagePath) 这个方法来纠正图片URI</li></ul><pre><code class="typescript">Camera.getPicture(options).then((imagePath) =&gt; { // 特殊安卓图片库的处理 this.nativeFilePath = imagePath; if (this.pl.is(&#39;android&#39;) &amp;&amp; sourceType === Camera.PictureSourceType.PHOTOLIBRARY) {   FilePath.resolveNativePath(imagePath)   .then(filePath =&gt; {       this.nativeFilePath = filePath;       let currentName = imagePath.substring(imagePath.lastIndexOf(&#39;/&#39;) + 1, imagePath.lastIndexOf(&#39;?&#39;));   }); } else {   var currentName = imagePath.substr(imagePath.lastIndexOf(&#39;/&#39;) + 1); }}, err =&gt; { // this.presentToast(&#39;选择图片失败.&#39;);});</code></pre>]]></content>
      
      
      <categories>
          
          <category> Ionic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ionic 2 </tag>
            
            <tag> Angular 2 </tag>
            
            <tag> Hybird App </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
